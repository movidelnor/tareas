<?php

App::uses('AppController', 'Controller');
App::import('Vendor', 's3', array('file' => 's3' . DS . 'S3.php'));
App::uses('RequestsController', 'Controller');

//App::import('Vendor', 'ElephantIO', array('file' => 'ElephantIO' . DS . 'Client.php'));
//use ElephantIO\Client as ElephantIOClient;

class EasycasesController extends AppController
{
    public $name = 'Easycase';
    public $components = array('Format', 'Postcase', 'Sendgrid', 'Tmzone', 'RequestHandler','Pushnotification','PhpMailer');
    public $uses = array('EasyCase', 'Project', 'ProjectUser', 'User', 'Company', 'Archive',
        'CaseActivity', 'CaseRecent', 'EasycaseMilestone', 'CaseUserView', 'SearchFilter',
        'CustomFilter', 'Milestone', 'LogTime', 'CompanyUser', 'Task','EasycaseLabel');

    public function help()
    {
        $this->redirect(KNOWLEDGEBASE_URL);
        exit;
        if ($this->Auth->User("id")) {
            $this->layout = 'default_inner';
        } else {
            $this->layout = 'default_outer';
        }
        $this->loadModel('Help');
        $this->loadModel('Subject');
        if (trim(@$_GET['search_help_txt'])) {
            $search = urldecode(trim(htmlentities(strip_tags($_GET['search_help_txt']))));
        }
        if (isset($this->params['pass']['1']) && intval($this->params['pass']['1'])) {
            $subjectId = $this->params['pass']['1'];
        } else {
            $subjectId = 1;
        }
        $conditions = array();
        if (trim($search)) {
            $conditions = array('OR' => array('Help.title LIKE' => '%' . $search . '%', 'Help.description LIKE' => '%' . $search . '%'));
            $getSearchResult = $this->Help->searchResults($conditions);
        } else {
            $conditions = '';
            $getSearchResult = '';
        }
        $allSubjectData = $this->Subject->getAllSubjects();
        $allHelpData = $this->Help->getAllHelps($subjectId);
        $getSubjectName = $this->Subject->subjectName($subjectId);
        $this->set("allSubjectData", $allSubjectData);
        $this->set("subjectId", $subjectId);
        $this->set("subject_name", $getSubjectName);

        if ($getSearchResult && count($getSearchResult) > 0) { //If search result data present then display results
            $this->set("isSearchresult", 1);
            $this->set("allHelpData", $getSearchResult);
        } else {  //If no data present then display no data message
            $this->set("isSearchresult", 0);
            $this->set("allHelpData", $allHelpData);
        }
    }

    public function ajax_check_size()
    {
        $this->layout = '';
    }

    public function exportcsv()
    {
        $this->layout = '';
        exit;
    }

    public function archive_case()
    {
        $this->layout = 'ajax';
        $id = $this->params->data['id'];
        $cno = $this->params->data['cno'];
        $pid = $this->params->data['pid'];
        $typ = isset($this->params->data['typ']) ? trim($this->params->data['typ']) : '';

        if ($typ == 'all') {
            $cno = trim($cno, ',');
            $io_cno = explode(',', $cno);
            $id = trim($id, ',');
            $t_id = explode(',', $id);
            if (count($io_cno) == 1 && $io_cno[0] != '') {
                $arcCaseTitle = $this->Easycase->getCaseTitle(0, $cno);
            } else {
                $arcCaseTitle = implode(' ,#', $io_cno);
                $arcCaseTitle = '#' . $arcCaseTitle;
            }
            $t_pid = $this->Easycase->query("SELECT project_id FROM easycases WHERE id=" . $t_id[0]);
            $pid = $t_pid[0]['easycases']['project_id'];
        } else {
            $arcCaseTitle = $this->Easycase->getCaseTitle($pid, $cno);
        }
        
        $subtask_id = explode(',', $id);
        $subtask_cno = explode(',', $cno);
        //on close of parent task close all children tasks
        $child_tasks = $this->Easycase->getSubTaskChild($subtask_id, $pid);
        //closing children tasks
        if (!empty($child_tasks['data'])) {
            $chld_ids = array_keys($child_tasks['data']);
            $chld_nos = Hash::extract($child_tasks['data'], '{n}.Easycase.case_no');
            $subtask_cno = array_merge($subtask_cno, $chld_nos);
            $subtask_id = array_merge($subtask_id, $chld_ids);
        }
        $id = implode(',', $subtask_id);
        $cno = implode(',', $subtask_cno);
        $typ = 'all'; //added in 26/04/2018
        
        //$this->Easycase->query("UPDATE easycases SET assign_to='0' WHERE id IN(" . $id . ")");
        //$this->Format->delete_booked_hours(array('easycase_id' => $id, 'project_id' => $pid));
        
        if ($typ == 'all') {
            $this->Easycase->query("UPDATE easycases SET assign_to='0',isactive='0',depends=NULL,children=NULL WHERE id IN(" . $id . ")");
        } else {
            $this->Easycase->query("UPDATE easycases SET assign_to='0',isactive='0',depends=NULL,children=NULL WHERE id=" . $id);
        }

        $this->CaseActivity->recursive = -1;
        if ($typ == 'all') {
            $this->CaseActivity->query("UPDATE case_activities SET isactive='0' WHERE project_id=" . $pid . " AND case_no IN(" . $cno . ")");
        } else {
            $this->CaseActivity->query("UPDATE case_activities SET isactive='0' WHERE project_id=" . $pid . " AND case_no=" . $cno);
        }

        $this->CaseRecent->recursive = -1;
        if ($typ == 'all') {
            $this->CaseRecent->query("DELETE FROM case_recents WHERE easycase_id IN(" . $id . ")");
        } else {
            $this->CaseRecent->query("DELETE FROM case_recents WHERE easycase_id=" . $id);
        }


        $this->CaseUserView->recursive = -1;
        if ($typ == 'all') {
            $this->CaseUserView->query("DELETE FROM case_user_views WHERE easycase_id IN(" . $id . ")");
        } else {
            $this->CaseUserView->query("DELETE FROM case_user_views WHERE easycase_id=" . $id);
        }
        /* remove easycase id from other dependant tasks from depends and  children column */
        if (intval($id) > 0) {
            $this->update_dependancy($id, $pid);
        }
        /* Delete previous RA **/
        if ($typ == 'all') {
            if ($this->Format->isResourceAvailabilityOn()) {
                foreach (explode(",", $id) as $casek=>$casev) {
                    $this->Format->delete_booked_hours(array('easycase_id' => $casev, 'project_id' =>$pid), 1);
                }
            }
        }
        /* End */

        $this->Archive->recursive = -1;
        if ($typ == 'all') {
            $arc = $this->Archive->query("SELECT * FROM archives WHERE easycase_id IN(" . $id . ") AND type='2'");
        } else {
            $arc = $this->Archive->query("SELECT * FROM archives WHERE easycase_id ='" . $id . "' AND type='2'");
        }
        $t_id = explode(',', $id);
        if (is_array($arc) && count($arc) > 0) {
            foreach ($arc as $k => $v) {
                if (in_array($v['archives']['easycase_id'], $t_id)) {
                    $IND = array_search($v['archives']['easycase_id'], $t_id);
                    unset($t_id[$IND]);
                }
                $this->Archive->query("UPDATE archives SET type='1' WHERE id='" . $v['archives']['id'] . "'");
            }
        }
        $this->Archive->recursive = -1;
        #if ($typ == 'all') {
        if (is_array($t_id) && count($t_id) > 0) {
            foreach ($t_id as $k1 => $v1) {
                $CaseArc = array();
                $CaseArc['easycase_id'] = $v1;
                $CaseArc['case_file_id'] = "0";
                $CaseArc['type'] = "1";
                $CaseArc['user_id'] = SES_ID;
                $CaseArc['dt_created'] = GMT_DATETIME;
                $CaseArc['company_id'] = SES_COMP;
                $this->Archive->saveAll($CaseArc);
            }
        }

        //socket.io implement start
        //$this->ProjectUser->recursive = -1;
        //$getUser = $this->ProjectUser->query("SELECT user_id FROM project_users WHERE project_id='" . $pid . "'");
        $prjuniq = $this->Project->query("SELECT uniq_id, short_name, name FROM projects WHERE id='" . $pid . "'");
        $prjuniqid = $prjuniq[0]['projects']['uniq_id']; //print_r($prjuniq);
        $projShName = strtoupper($prjuniq[0]['projects']['short_name']);
        $channel_name = $prjuniqid;
        $resdata = array();
        $resdata['arch_ids'] = $id;
        $resdata['arch_cno'] = $cno;
        //$pname = $this->Format->getProjectName($projId);
        //$msgpub = "'Case Replay Available in '" . $postParam['Easycase']['title'] . "''";
        if (!stristr(HTTP_ROOT, 'payzilla.in') && !stristr(HTTP_ROOT, 'orangegigs.com') && !stristr(HTTP_ROOT, 'ospb.com')) {
            $resdata['iotoserver'] = array('channel' => $channel_name, 'message' => 'Updated.~~' . SES_ID . '~~' . $cno . '~~' . 'ARC' . '~~' . $arcCaseTitle . '~~' . $projShName);
            //$this->Postcase->iotoserver(array('channel' => $channel_name, 'message' => 'Updated.~~' . SES_ID . '~~' . $cno . '~~' . 'ARC' . '~~' . $arcCaseTitle . '~~' . $projShName));
            //socket.io implement end
        }
        $resdata['status'] = "success";
        echo json_encode($resdata);
        exit;
    }

    public function check_parent_before_status()
    {
        $this->layout = 'ajax';
        $retRes = array('status'=>'success','msg'=>'','statusid'=>'');
        if ($this->data['masterid'] == 3) {
            $retRes_chk = $this->Easycase->checkParentTaskCntCustom($this->data['parent_key']);
            if (!empty($retRes_chk)) {
                $retRes['msg'] = $retRes_chk['CustomStatus']['name'];
                $retRes['statusid'] = $retRes_chk['CustomStatus']['id'];
            }
        }
        echo json_encode($retRes);
        exit;
    }
    public function check_parent_before_delete()
    {
        $this->layout = 'ajax';
        $retRes = array('status'=>'success');
        if ($this->Easycase->checkParentTaskCnt($this->data['parent_key'])) {
            $retRes['status'] = 'error';
        }
        echo json_encode($retRes);
        exit;
    }
    #### DELETING CASES CREATED BY LOGGED IN USER OR LOGGED IN AS ADMIN USER #######

    public function delete_case($oauth_arg = null)
    {
        $this->layout = 'ajax';
        if (isset($oauth_arg['id']) && !empty($oauth_arg['id'])) {
            $id = $oauth_arg['id'];
            $cno = $oauth_arg['cno'];
            $pid = $oauth_arg['pid'];
        } else {
            $id = $this->params->data['id'];
            $cno = $this->params->data['cno'];
            $pid = $this->params->data['pid'];
        }
        $arr = array();
        $this->Easycase->recursive = -1;
        $case_list = $this->Easycase->find('first', array('conditions' => array('Easycase.case_no' => $cno, 'Easycase.istype' => '1', 'Easycase.project_id' => $pid), 'fields' => array('Easycase.id', 'Easycase.title','Easycase.isactive','Easycase.parent_task_id','Easycase.project_id','Easycase.dt_created','Easycase.user_id')));
        $delCsTitle = '';
        if ($case_list) {
            $id = $case_list['Easycase']['id'];
            $arr[] = $id;
            $delCsTitle = $case_list['Easycase']['title'];
        }
        if (!$arr || empty($pid) || empty($cno)) {
            if (isset($oauth_arg['id']) && !empty($oauth_arg['id'])) {
                echo 0;
                exit;
            } else {
                echo json_encode(array('status'=>0));
                exit;
            }
        }
        $resArr = array();
        $resArr['parent_id'] = '';
        //$get_parent_task = $this->Easycase->getParentTask($id);
        if (!empty($case_list['Easycase']['parent_task_id'])) {
            $resArr['parent_id'] = $case_list['Easycase']['parent_task_id'];
        }
        $prjuniq = $this->Project->query("SELECT uniq_id, short_name,company_id FROM projects WHERE id='" . $pid . "'");
                
                
        
        $comp_id = (SES_COMP != 'SES_COMP')?SES_COMP:$prjuniq[0]['projects']['company_id'];        
        $this->loadModel('CustomFieldValue');
        $this->CustomFieldValue->deleteCustomFields($case_list['Easycase']['id']);

                
        $this->Easycase->deleteTasksRecursively(array($id), $pid, $oauth_arg);
        //socket.io implement start
        /* remove easycase id from other dependant tasks from depends and  children column */
        if (intval($id) > 0) {
            $this->update_dependancy($id, $pid);
        }

        $prjuniqid = $prjuniq[0]['projects']['uniq_id'];
        $projShName = strtoupper($prjuniq[0]['projects']['short_name']);
        //$channel_name = 'my_channel_delete_case';
        $channel_name = $prjuniqid;
        if (!stristr(HTTP_ROOT, 'payzilla.in') && !stristr(HTTP_ROOT, 'orangegigs.com')) {
            $resArr['iotoserver'] = array('channel' => $channel_name, 'message' => 'Updated.~~' . SES_ID . '~~' . $cno . '~~' . 'DEL' . '~~' . $delCsTitle . '~~' . $projShName);
            // $this->Postcase->iotoserver(array('channel' => $channel_name, 'message' => 'Updated.~~' . SES_ID . '~~' . $cno . '~~' . 'DEL' . '~~' . $delCsTitle . '~~' . $projShName));
        }
        //socket.io implement end
        if (isset($oauth_arg['id']) && !empty($oauth_arg['id'])) {
            return "success";
        } else {
            $this->Format->createGoogleCalendarEvent($id, $case_list['Easycase'], 'delete');
            $resArr['status'] = "success";
            echo json_encode($resArr);
        }
        exit;
    }

    /**
     * This method gets the total storage used by user.
     *
     * @author Sunil
     * @method ajax_getStorage
     * @param
     * @return string
     */
    public function ajax_getStorage()
    {
        App::import('Model', 'CaseFile');
        $CaseFile = new CaseFile();
        $usedspace = $CaseFile->getStorage();
        echo $usedspace;
        exit;
    }

    public function archive_file()
    {
        $this->layout = 'ajax';
        $id = $this->params->data['id'];

        $CaseFile = ClassRegistry::init('CaseFile');
        $CaseFile->recursive = -1;
        $CaseFile->query("UPDATE case_files SET isactive='0' WHERE id=" . $id);
        $easycaseId = $CaseFile->find('first', array('conditions' => array('CaseFile.id' => $id), 'fields' => array('CaseFile.easycase_id')));
        $cur_data = $this->Easycase->find('first', array('conditions' => array('Easycase.id' => $easycaseId['CaseFile']['easycase_id']), 'fields' => array('Easycase.case_no', 'Easycase.project_id','Easycase.format', 'Easycase.message','Easycase.istype')));
        $org_data = $this->Easycase->find('all', array('conditions' => array('Easycase.project_id' => $cur_data['Easycase']['project_id'], 'Easycase.case_no' => $cur_data['Easycase']['case_no']), 'fields' => array('Easycase.id', 'Easycase.project_id', 'Easycase.case_no')));
        $arr = array();
        foreach ($org_data as $data) {
            $files = $CaseFile->find('all', array('conditions' => array('CaseFile.easycase_id' => $data['Easycase']['id'])));
            array_push($arr, $files);
        }
        if (empty($arr)) {
            $first_data = $this->Easycase->find('first', array('conditions' => array('Easycase.project_id' => $cur_data['Easycase']['project_id'], 'Easycase.case_no' => $cur_data['Easycase']['case_no'], 'Easycase.istype' => '1'), 'fields' => array('Easycase.id', 'Easycase.project_id', 'Easycase.case_no')));
            $this->Easycase->updateAll(array('format' => 2), array('id' => $org_data['Easycase']['id'], 'project_id' => $first_data['Easycase']['project_id'], 'case_no' => $org_data['Easycase']['case_no'], 'istype' => 1));
        }

        $this->Archive->recursive = -1;
        $arc = $this->Archive->query("SELECT * FROM archives WHERE case_file_id ='" . $id . "' AND type='2'");

        if (isset($arc) && count($arc) != "0") {
            $this->Archive->query("UPDATE archives SET type='1' WHERE case_file_id='" . $id . "'");
        } else {
            $this->Archive->recursive = -1;
            $CaseArc['easycase_id'] = "0";
            $CaseArc['case_file_id'] = $id;
            $CaseArc['type'] = "1";
            $CaseArc['user_id'] = SES_ID;
            $CaseArc['dt_created'] = GMT_DATETIME;
            $CaseArc['company_id'] = SES_COMP;
            $this->Archive->saveAll($CaseArc);
        }

        $getFiles = $CaseFile->find('first', array('conditions' => array('CaseFile.id' => $id)));
        $checkFiles = $CaseFile->find('all', array('conditions' => array('CaseFile.easycase_id' => $getFiles['CaseFile']['easycase_id'], 'CaseFile.isactive' => 1)));
        if (count($checkFiles) == 0) {
            $this->Easycase->query("UPDATE easycases SET format='2' WHERE id='" . $getFiles['CaseFile']['easycase_id'] . "'");
            if (empty($cur_data['Easycase']['message']) && $cur_data['Easycase']['istype'] == 2) {
                $this->Easycase->updateAll(array('thread_count'=>'thread_count-1'), array( 'project_id' => $cur_data['Easycase']['project_id'], 'case_no' => $cur_data['Easycase']['case_no'], 'istype' => 1));
            }
        } else {
            $this->Easycase->query("UPDATE easycases SET format='1' WHERE id='" . $getFiles['CaseFile']['easycase_id'] . "'");
        }


        echo "success";
        exit;
    }
    public function removepandaddbr($inpt_msg=null)
    {
        return $inpt_msg;
        if ($inpt_msg && !empty($inpt_msg)) {
            $newcontent_msg = preg_replace("/<p[^>]*?>/", "", $inpt_msg);
            $newcontent_msg = str_replace("</p>", "<br />", $newcontent_msg);
            return $newcontent_msg;
        } else {
            return $inpt_msg;
        }
    }
    public function checkStorageForTask($flArr)
    {
        $size_fl = 0;
        $usedstorage = $this->Easycase->usedSpace('', SES_COMP);
        foreach ($flArr as $flk => $flv) {
            $size_fl += $flv['size'];
        }
        if ($size_fl) {
            $size_fl = round($size_fl/1024);
            $usedstorage_t = $usedstorage+$size_fl;
            $allowusage = $GLOBALS['user_subscription']['storage'];
            if ($allowusage != 'Unlimited') {
                if ($usedstorage_t > $allowusage) {
                    $storageExceeds = round(($usedstorage_t - $allowusage), 2);
                    return $storageExceeds;
                }
            }
        }
        return 0;
    }
    public function editorFileUpload($filesArr = null, $projId, $caseid)
    {
        if (!$filesArr) {
            return array();
        }
        $size = '';
        $name = '';
        $type = '';
        $file_path = WWW_ROOT . 'temp/';
        $newFileName = "";
        $updateData = "";
        $message = "success";
        $displayname = "";
        $retarr = array();
        $user_id = SES_ID;
        $comp_id = SES_COMP;
        //remove file from comment while editing (read data from os and compare here)
        $allowedSize = MAX_FILE_SIZE * 1024;
        if ($filesArr) {
            $size_chk = $this->checkStorageForTask($filesArr);
            if (!empty($size_chk)) {
                $retarr['notallowed'] = 1;
                return $retarr;
            }
            foreach ($filesArr as $k => $v) {
                $name = $v['name'];
                $sizeinMb = $v['size'] / 1024;
                $sizeinkb = $v['size'];
                if ($sizeinMb <= $allowedSize) {
                    if ($name) {
                        //$oldname = $this->Format->chnageUploadedFileName($name);
                        $oldname = $name;
                        $t_displayname = $oldname;
                        $ext1 = substr(strrchr($oldname, "."), 1);
                        #$ext1 = $ext1 == 'tif' ? 'png' : $ext1;
                        $message = $this->Format->validateFileExt($ext1);
                        if ($message == "success") {
                            $tot = strlen($oldname);
                            $extcnt = strlen($ext1);
                            $end = $tot - $extcnt - 1;
                            $onlyfile = substr($oldname, 0, $end);

                            $CaseEditorFile = ClassRegistry::init('CaseEditorFile');
                            $CaseEditorFile->recursive = -1;
                            $newFileName = $oldname;
                            //converting tif to png
                            !is_dir(WWW_ROOT . "temp/") ? mkdir(WWW_ROOT . "temp/", 0777, true) : "";
                            $file = $file_path . $newFileName;
                            $file_orig = $file_path .'orig/'. $newFileName;
                            if (!is_dir($file_path)) {
                                mkdir($file_path, 0777, true);
                            }
                            $fil_mob = fopen($file, 'w');
                            fwrite($fil_mob, base64_decode($v['content']));
                            fclose($fil_mob);
                            copy($file_path . $newFileName, $file_orig);
                            try {
                                // s3 bucket  start
                                $type = $v['type'];
                                $autogenId = $this->Format->generateUniqNumber();
                                $temp_thumb_name = '';
                                $csEdtrFiles = array();
                                $csEdtrFiles['user_id'] = $user_id;
                                $csEdtrFiles['project_id'] = $projId;
                                $csEdtrFiles['company_id'] = $comp_id;
                                $csEdtrFiles['easycase_id'] = $caseid;
                                $csEdtrFiles['name'] = $newFileName;
                                $csEdtrFiles['file_size'] = $sizeinkb;
                                $csEdtrFiles['uniq_id'] = $autogenId;
                                                                        
                                //array_push($retarr['images'], $newFileName);
                                if ($CaseEditorFile->saveAll($csEdtrFiles)) {
                                    if (defined('USE_S3') && USE_S3 == 1) {
                                        $s3 = new S3(awsAccessKey, awsSecretKey);
                                        $s3->putBucket(BUCKET_NAME, S3::ACL_PRIVATE);
                                        $folder_orig_Name = DIR_CASE_FILES_EDITOR_S3_FOLDER . trim($newFileName);
                                        $returnvalue = $s3->putObjectFile($file_orig, BUCKET_NAME, $folder_orig_Name, S3::ACL_PRIVATE);
                                    } else {
                                        //need to be done
                                        $returnvalue = copy($file_path . $newFileName, DIR_CASE_EDITOR_FILES . $newFileName);
                                        unlink($file_path . $newFileName);
                                    }
                                    if (!$returnvalue) {
                                        $retarr['images'][$k] = array(
                                                                                            'name' => $newFileName,
                                                                                            'uniq_id' => $autogenId,
                                                                                            'status' => 0,
                                                                                            'msg' => __('You have error in uploading file to S3 bucket from the editor')
                                                                                        );
                                        //$retarr['error'] = "s3_error";
                                        //$retarr['error_message'] = 'You have error in uploading file to S3 bucket from the editor';
                                        //$retarr['success'] = 0;
                                        $message = "s3_error ";
                                        $subject = __('Error in uploading file to S3 bucket');
                                        $userdetails = $this->User->query('SELECT User.*,Company.name FROM users User,company_users AS CompanyUser,companies AS Company WHERE User.id=CompanyUser.user_id AND CompanyUser.company_id=Company.id AND CompanyUser.company_id=' . $comp_id . ' AND User.id=' . $user_id);
                                        $this->Email->delivery = 'smtp';
                                        $this->Email->to = TO_DEV_EMAIL;
                                        $this->Email->subject = $subject;
                                        $this->Email->from = FROM_EMAIL;
                                        $this->Email->template = 'fileupload_error';
                                        $this->set('f_size', $sizeinkb);
                                        $this->set('f_type', $type);
                                        $this->set('f_name', $newFileName);
                                        $this->set('u_storage', $usedstorage);
                                        $this->set('allow_usage', $allowusage);
                                        $this->set('userdetails', $userdetails[0]);
                                        $this->Email->sendAs = 'html';
                                        $this->Sendgrid->sendgridsmtp($this->Email);
                                    } else {
                                        //array_push($retarr[$k]['images'], $newFileName);
                                        //array_push($retarr['uniq_id'], $autogenId);
                                        //$retarr['uniq_id'] = $autogenId;
                                        $retarr['images'][$k] = array(
                                                                                        'name' => $newFileName,
                                                                                        'uniq_id' => $autogenId,
                                                                                        'status' => 1,
                                                                                        'msg' => ''
                                                                                    );
                                    }
                                } else {
                                    $retarr['error'][$k] = array('msg'=> __('Not able to save in database'));
                                }
                            } catch (Exception $e) {
                            }
                        } else {
                            $retarr['error'][$k] = array('msg'=> __('You have error in uploading file due to invalid file extension.'));
                        }
                    } else {
                        $retarr['error'][$k] = array('msg'=> __('You have error in uploading file due to  invalid file name'));
                    }
                } else {
                    $retarr['error'][$k] = array('msg'=> __('You have error in uploading file due to allowed upload size is exceeded.'));
                }
                //} else {
                                    //$retarr['error'][$k] = array('msg'=> __('You have error in uploading file due to allowed upload size is exceeded.'));
                   // $retarr['error_message'] = __('You have error in uploading file because your company //storage limit exceeded by ') . $ret_chk_strg . __(' MB. Please upgrade your subscription.');
                //}
            }
        }
        return $retarr;
    }
    public function getImageExtFromComment($comment_txt)
    {
        if (stristr($comment_txt, 'png')) {
            return array('png','image/png');
        } elseif (stristr($comment_txt, 'jpg') || stristr($comment_txt, 'jpeg')) {
            if (stristr($comment_txt, 'jpg')) {
                return array('jpg','image/jpg');
            } else {
                return array('jpeg','image/jpeg');
            }
        } elseif (stristr($comment_txt, 'gif')) {
            return array('gif','image/gif');
        } elseif (stristr($comment_txt, 'tiff')) {
            return array('gif','image/tiff');
        } elseif (stristr($comment_txt, 'bmp')) {
            return array('gif','image/bmp');
        } elseif (stristr($comment_txt, 'psd')) {
            return array('gif','image/psd');
        }
    }
    public function getImageFromComment($comment='', $pid, $cs_id, $edtd_msg='')
    {
        $retStatus = array('is_paste_image'=>0,'comment'=>$comment, 'uid'=>0);
        if ((!empty($comment) && stristr($comment, '<img')) || (!empty($edtd_msg) && stristr($edtd_msg, '<img'))) {
            /*$gh = fopen('mytest.txt','a');
            fwrite($gh, $comment);
            fclose($gh);*/
            if (!empty($edtd_msg)) {
                $doc = new DOMDocument();
                $doc->loadHTML($edtd_msg);
                $tags = $doc->getElementsByTagName('img');
                $imgArr = array();
                $imgArrExt = array();
                $imgArrNew = array();
                $imgArrRmv = array();
                //iterate over all image tags
                $noimg_t =0;
                foreach ($tags as $tag) {
                    //get src attribute of an img tag
                    $imgSrcExt = $tag->getAttribute('src');
                    if (stristr($imgSrcExt, DOMAIN) || stristr($imgSrcExt, 'users/image_thumb/?type=editor')) {
                        array_push($imgArrExt, $imgSrcExt);
                    }
                }
            }
            $doc = new DOMDocument();
            $doc->loadHTML($comment);
            $tags = $doc->getElementsByTagName('img');
            $imgArr = array();
            //iterate over all image tags
            $noimg_t =0;
            foreach ($tags as $tag) {
                //get src attribute of an img tag
                $imgSrc = $tag->getAttribute('src');
                //$imgSrcHt = $tag->getAttribute('height');
                //$imgSrcWt = $tag->getAttribute('width');
                if (stristr($imgSrc, 'base64,')) {
                    $comment = str_replace($imgSrc, "EDTR__OS_IMG".$noimg_t, $comment);
                    $exploddt_t = explode('base64,', $imgSrc);
                    $typ_ext = $this->getImageExtFromComment($exploddt_t[0]);
                    $imgArr_t = array(
                            'name' => time().'_'.$noimg_t.'_case_edtr.'.$typ_ext[0],
                            'type' => $typ_ext[1],
                            'size' => (((strlen($exploddt_t[1]) * (3/4)) - 1)/1024),
                            'content' => $exploddt_t[1]
                        );
                    array_push($imgArr, $imgArr_t);
                    $noimg_t++;
                } else {
                    if (stristr($imgSrc, 'users/image_thumb/?type=editor')) { //'/users/image_thumb/?type=editor'
                        if (stristr($imgSrc, '../')) {
                            $imgSrc = str_replace('../', HTTP_ROOT, $imgSrc);
                        } elseif (stristr($imgSrc, 'users/image_thumb')) {
                            $imgSrc = str_replace('../', HTTP_ROOT, $imgSrc);
                        }
                        $imgSrc = str_replace('users/image_thumb', HTTP_ROOT.'users/image_thumb', $imgSrc);
                        array_push($imgArrNew, $imgSrc);
                    }
                }
            }
            $CaseEditorFile = ClassRegistry::init('CaseEditorFile');
            $CaseEditorFile->recursive = -1;
            if (count($imgArrExt) && $cs_id) {
                $existImages = $CaseEditorFile->find('list', array('conditions' => array('CaseEditorFile.easycase_id' => $cs_id, 'CaseEditorFile.company_id' => SES_COMP, 'CaseEditorFile.project_id' => $pid, 'CaseEditorFile.is_deleted' => 2), 'fields' => array('CaseEditorFile.id','CaseEditorFile.name')));
                if (!empty($existImages)) {
                    //$existImages = array_values($existImages);
                    if (empty($imgArrNew)) {
                        $CaseEditorFile->updateAll(array('CaseEditorFile.is_deleted' => 1), array('CaseEditorFile.easycase_id' => $cs_id, 'CaseEditorFile.company_id' => SES_COMP, 'CaseEditorFile.project_id' => $pid));
                    } else {
                        $n_fl_arra = array();
                        foreach ($imgArrNew as $rk => $rv) {
                            $q_pars = explode('&file=', parse_url($rv, PHP_URL_QUERY));
                            $q_pars_f = explode('&quality', $q_pars[1]);
                            array_push($n_fl_arra, $q_pars_f[0]);
                        }
                        foreach ($existImages as $rko => $rvo) {
                            if (!in_array(trim($rvo), $n_fl_arra)) {
                                $CaseEditorFile->updateAll(array('CaseEditorFile.is_deleted' => 1), array('CaseEditorFile.easycase_id' => $cs_id, 'CaseEditorFile.company_id' => SES_COMP, 'CaseEditorFile.project_id' => $pid, 'CaseEditorFile.name' => trim($rvo)));
                            }
                        }
                    }
                }
            } elseif (empty($imgArrExt) && !empty($cs_id)) {
                //$CaseEditorFile->updateAll(array('CaseEditorFile.is_deleted' => 1), array('CaseEditorFile.easycase_id' => $cs_id, 'CaseEditorFile.company_id' => SES_COMP, 'CaseEditorFile.project_id' => $pid));
            }
            if (!empty($imgArr)) {
                #pr($imgArr);
                $retArr = $this->editorFileUpload($imgArr, $pid, $cs_id);
                if (empty($retArr) || (isset($retArr['notallowed']) && $retArr['notallowed'])) {
                    $retStatus['comment'] = $comment;
                    return $retStatus;
                }
                $img_arry_uids = array();
                #pr($retArr);exit;
                if (isset($retArr['images']) && !empty($retArr['images'])) {
                    $retStatus['is_paste_image'] = 1;
                    $doc_r = new DOMDocument();
                    $doc_r->loadHTML($comment);
                    $tags_r = $doc_r->getElementsByTagName('img');
                    $imgk = 0;
                    foreach ($tags_r as $tag_r) {
                        //get src attribute of an img tag
                        $imgSrc = $tag_r->getAttribute('src');
                        if (stristr($imgSrc, 'EDTR__OS_IMG')) {
                            if ($retArr['images'][$imgk]['status']) {
                                $url_t = HTTP_ROOT.'users/image_thumb/?type=editor&file='.$retArr['images'][$imgk]['name'].'&quality=100';
                                $comment = str_replace('EDTR__OS_IMG'.$imgk, $url_t, $comment);
                                $img_arry_uids[$imgk] = $retArr['images'][$imgk]['uniq_id'];
                                $imgk++;
                            }
                        }
                    }
                    //return $comment;
                    $retStatus['comment'] = $comment;
                    $retStatus['uid'] = $img_arry_uids;
                } else {
                    //return $comment;
                    $retStatus['comment'] = $comment;
                }
            } else {
                //return $comment;
                $retStatus['comment'] = $comment;
            }
        }
        return $retStatus;
    }
    public function ajaXRemoveEditorFile()
    {
        $this->layout = 'ajax';
        $arr['status'] = 'success';
        if (!empty($this->data['file'])) {
            $CaseEditorFile = ClassRegistry::init('CaseEditorFile');
            $arr = $CaseEditorFile->removeFile(trim($this->data['file']), SES_COMP);
            if ($arr['status'] == 'success' && defined('USE_S3') && USE_S3 == 0) {
                unlink(DIR_CASE_EDITOR_FILES . trim($this->data['file']));
            }
        } else {
            $arr['status'] = 'err';
            $arr['msg'] = 'fail';
        }
        echo json_encode($arr);
        exit;
    }
    public function ajaxpostcase($oauth_arg = null)
    {
        $this->layout = 'ajax';
        if (isset($this->params->data['CS_project_id']) && $this->params->data['CS_project_id'] && $this->params->data['CS_project_id'] != "all") {
            $CS_project_id = $this->params->data['CS_project_id'];
            $CS_assign_to = $this->params->data['CS_assign_to'];
        } elseif (isset($oauth_arg['CS_project_id'])) {
            $CS_project_id = $oauth_arg['CS_project_id'];
        } else {
            $CS_project_id = $this->params->data['pid'];
        }

        $oauth_return = 0;
        if (isset($oauth_arg) && !empty($oauth_arg)) {
            $arr = $oauth_arg;
            $oauth_return = 1;
            $this->loadModel('UserSubscription');
            $limitation = $this->UserSubscription->readSubDetlfromCache(SES_COMP);
            $GLOBALS['Userlimitation'] = $limitation['UserSubscription'];
        } else {
            $CS_istype = $this->params->data['CS_istype'];
            $CS_title = $this->Format->convert_ascii($this->params->data['CS_title']);
            $CS_type_id = $this->params->data['CS_type_id'];
            $CS_priority = $this->params->data['CS_priority'];
            if ((isset($this->params->data['CS_id']) && !empty($this->params->data['CS_id'])) || (isset($this->params->data['taskid']) && !empty($this->params->data['taskid']))) {
                $img_past_id = $this->params->data['CS_id'] > 0 ? $this->params->data['CS_id'] : ($this->params->data['taskid'] > 0 ? $this->params->data['taskid'] : 0);
                if (isset($this->params->data['taskid']) && !empty($this->params->data['taskid'])) {
                    $edtTask_temp = $this->Easycase->find('first', array('conditions' => array('Easycase.id' => $this->params->data['taskid']),'fields' => array('Easycase.id','Easycase.seq_id','Easycase.message','Easycase.project_id'),'order' => 'Easycase.id DESC'));
                    $imgExtret = $this->getImageFromComment($this->params->data['CS_message'], $edtTask_temp['Easycase']['project_id'], $edtTask_temp['Easycase']['id'], $edtTask_temp['Easycase']['message']);
                } else {
                    $imgExtret = $this->getImageFromComment($this->params->data['CS_message'], 0, $this->params->data['CS_id']);
                }
                $this->request->data['CS_message'] = $imgExtret['comment'];
                $this->request->data['is_image_paste'] = $imgExtret['is_paste_image'];
                $this->request->data['is_image_paste_uid'] = $imgExtret['uid'];
            } else {
                $imgExtret = $this->getImageFromComment($this->params->data['CS_message'], 0, 0);
                $this->request->data['CS_message'] = $imgExtret['comment'];
                $this->request->data['is_image_paste'] = $imgExtret['is_paste_image'];
                $this->request->data['is_image_paste_uid'] = $imgExtret['uid'];
            }
            $msg = trim($this->params->data['CS_message']);
            /* $msg = preg_replace('/^(?:<br\s*\/?>\s*)+/', '', $msg);
              $msg = preg_replace('/(<br \/>)+$/', '', $msg); */
            $this->params->data['CS_message'] = $msg;
            $CS_message = $msg;
            $CS_due_date = $this->params->data['CS_due_date'];
            $CS_milestone = $this->params->data['CS_milestone'];
            $CS_legend = 1;
            if (isset($this->params->data['CS_legend'])) {
                $CS_legend = $this->params->data['CS_legend'];
            }
            $pagename = $this->params->data['pagename'];
            $arr = $this->params->data;
            if (isset($edtTask_temp)) {
                $arr['seq_id'] = $edtTask_temp['Easycase']['seq_id'];
            }
            if (stristr($this->params->data['CS_start_date'], 'Invalid')) {
                $arr['CS_start_date'] = '';
            }
            if (stristr($this->params->data['CS_due_date'], 'Invalid')) {
                $arr['CS_due_date'] = '';
            }
            if (!isset($this->data['CS_type_id']) || empty($this->data['CS_type_id'])) {
                $arr['CS_type_id'] = (isset($GLOBALS['TYPE'][0]['Type']['id']) && $GLOBALS['TYPE'][0]['Type']['id']) ? $GLOBALS['TYPE'][0]['Type']['id'] : $GLOBALS['TYPE'][1]['Type']['id'];
                $this->data['CS_type_id'] = $arr['CS_type_id'];
            }
            if ($this->data['CS_type_id'] == 10 && !isset($this->data['from_email'])) {
                //$arr['CS_legend'] = 1;
            }
            $arr['CS_message'] = $this->removepandaddbr($msg);
            //By Sunil
            if (isset($this->params->query['data']['Easycase']['cloud_storage_files'])) {
                $arr['cloud_storages'] = $this->params->query['data']['Easycase']['cloud_storage_files'];
            }
        }
        if (!intval($oauth_return)) {
            $arr['is_client'] = $this->params->data['is_client'];
        }
        $customFieldData = null;
        $customFieldId = null;
        if (isset($this->params->data['customFieldData']) && $this->params->data['customFieldData']) {
            $customFieldData=$this->params->data['customFieldData'];
        }
        if (isset($this->params->data['customFieldId']) && $this->params->data['customFieldId']) {
            $customFieldId=$this->params->data['customFieldId'];
        }

        if (trim($CS_project_id)) {
            /* validate if overlaping timelog */
            $task_id = $arr['CS_id'] > 0 ? $arr['CS_id'] : ($arr['taskid'] > 0 ? $arr['taskid'] : 0);
            $validtime = array();
            /* validate if overlaping tielog end */
            if ($arr['timelog'] != 'false' && $task_id > 0) {
                $logdata = $this->prepare_log_time_from_reply($arr);
                /*$validtime = $this->validate_time_log($logdata, $arr['pid']);
                if ($validtime['success'] == 'No') {
                    echo json_encode($validtime);
                    exit;
                }*/
            }
            if (isset($arr['CM']) && $arr['CM'] == 'CREATETASK') {
                $arr['CS_start_date'] = date("Y-m-d H:i:s", ($arr['CS_start_date'] / 1000));
            }
            $arr['depend'] = $this->task_dependency($task_id);
            $arr['CS_legend'] = $CS_legend;

            /* add to easycase */
            $due_reason_id = 0;
            if (!empty($arr['reason_id'])) {
                $due_reason_id = $arr['reason_id'];
            }
            $orig_ini_due_ddate = '';
            if (!empty($due_reason_id) && !empty($arr['CS_due_date']) && !empty($task_id)) {
                //log change reason history
                $getCase = $this->Easycase->find('first', array(
                                'conditions' => array(
                                    'Easycase.id' => $task_id, 'Easycase.isactive' => 1,'Easycase.istype' => 1
                                ),
                                'fields' => array('Easycase.id','Easycase.uniq_id','Easycase.title','Easycase.due_date','Easycase.initial_due_date')
                            ));
                if ($getCase) {
                    $orig_ini_due_ddate = $getCase['Easycase']['due_date'];
                }
            }
            $value = $this->Postcase->casePosting($arr, $oauth_return);
            
            $task_details = json_decode($value, true);
            if ($task_details['success'] =='success') {
                $task_id = $arr['CS_id'] > 0 ? $arr['CS_id'] : ($arr['taskid'] > 0 ? $arr['taskid'] : $task_details['caseid']);
                if (!empty($due_reason_id) && !empty($arr['CS_due_date']) && !empty($task_id)) {
                    //log change reason history
                    $this->loadModel('TaskDueChangeReason');
                                
                    $getCase = $this->Easycase->find('first', array(
                                    'conditions' => array(
                                        'Easycase.id' => $task_id, 'Easycase.isactive' => 1,'Easycase.istype' => 1
                                    ),
                                    'fields' => array('Easycase.id','Easycase.uniq_id','Easycase.title','Easycase.message','Easycase.project_id','Easycase.case_no','Easycase.user_id','Easycase.type_id','Easycase.priority','Easycase.assign_to','Easycase.story_point','Easycase.legend','Easycase.custom_status_id','Easycase.reply_type','Easycase.dt_created','Easycase.estimated_hours','Easycase.status','Easycase.gantt_start_date','Easycase.due_date','Easycase.initial_due_date')
                                ));
                    if ($getCase) {
                        $inptArr['duedate_change_reason_id'] = $due_reason_id;
                        $inptArr['easycase_id'] = $task_id;
                        $inptArr['due_date'] = $orig_ini_due_ddate;
                        $inptArr['user_id'] = SES_ID;
                        $this->TaskDueChangeReason->saveChangeReasons($inptArr);
                    }
                    if (!empty($due_reason_id)) {
                        $getCase['Easycase']['due_date'] = $arr['CS_due_date'];
                        $getCase['Easycase']['case_count'] = $getCase['Easycase']['case_count']+1;
                        $getCase['Easycase']['updated_by'] = SES_ID;
                        $getCase['Easycase']['dt_created'] = GMT_DATETIME;
                        $getCase['Easycase']['reason_id'] = $due_reason_id;
                        $this->Easycase->insertCommentThreadCommon($getCase, 'due_date', $due_date);
                        unset($getCase['Easycase']['reason_id']);
                    }
                }
                if (isset($arr['is_image_paste']) && !empty($arr['is_image_paste'])) {
                    $CaseEditorFile = ClassRegistry::init('CaseEditorFile');
                    $CaseEditorFile->recursive = -1;
                    //$CaseEditorFile->updateAll(array('CaseEditorFile.project_id' => $task_details['projId'],'CaseEditorFile.is_deleted' => 2), array('CaseEditorFile.easycase_id' => $task_id, 'CaseEditorFile.company_id' => SES_COMP, 'CaseEditorFile.is_deleted' => 0));
                    if (!empty($arr['is_image_paste_uid'])) {
                        if (!$task_id) {
                            $task_id = $task_details['caseid'];
                        }
                        $arr['is_image_paste_uid'] = array_values($arr['is_image_paste_uid']);
                        $CaseEditorFile->updateAll(array('CaseEditorFile.project_id' => $task_details['projId'],'CaseEditorFile.is_deleted' => 2,'CaseEditorFile.easycase_id' => $task_id), array('CaseEditorFile.uniq_id' => $arr['is_image_paste_uid'], 'CaseEditorFile.company_id' => SES_COMP, 'CaseEditorFile.is_deleted' => 0));
                    }
                }
                /*try { //managed in post case component if ($caseIstype == 1 || $caseIstype == 2)
                $this->ProjectUser->getLastVisiedProject($task_details['projId'], SES_ID, SES_COMP);
                } catch (Exception $e) {
                }*/
                /* Send Pushnotification to the respective users starts here */
                
                $this->Pushnotification->sendPushNotiGeneral(COMP_UID, $this->Auth->user('uniq_id'), $CS_project_id, $arr, $task_details);
                    
                /* Send Pushnotification to the respective users ends here */
            }
            $task_id = $arr['CS_id'] > 0 ? $arr['CS_id'] : ($arr['taskid'] > 0 ? $arr['taskid'] : $task_details['caseid']);
            $arr['CS_id'] = $task_id;
           
            /* time log entry start: GKM */
            if ($arr['timelog'] != 'false' && $CS_assign_to && $arr['depend'] == 'Yes') {
                $logdata = $arr['timelog'];
                #$task_date = date('Y-m-d', strtotime($logdata['taskdate']));
                #$task_date = date('Y-m-d');
                /* utc has been converted to users time zone */
                $task_date = $this->Tmzone->GetDateTime(SES_TIMEZONE, TZ_GMT, TZ_DST, TZ_CODE, date('Y-m-d H:i:s'), "date");

                $i = 0;

                $LogTime = array();
                $LogTime[$i]['task_id'] = $task_id;

                $LogTime[$i]['project_id'] = $task_details['projId'];
                $LogTime[$i]['user_id'] = $CS_assign_to;
                $LogTime[$i]['task_status'] = $CS_legend;
                $LogTime[$i]['ip'] = $_SERVER['REMOTE_ADDR'];

                /* start time set start */
                $start_time = $logdata['start_time'];
                $spdts = explode(':', $start_time);

                #converted to min
                if (SES_TIME_FORMAT ==12) {
                    if (strpos($start_time, 'am') === false) {
                        $nwdtshr = ($spdts[0] != 12) ? ($spdts[0] + 12) : $spdts[0];
                        $dt_start = strstr($nwdtshr . ":" . $spdts[1], 'pm', true) . ":00";
                    } else {
                        $nwdtshr = ($spdts[0] != 12) ? ($spdts[0]) : '00';
                        $dt_start = strstr($nwdtshr . ":" . $spdts[1], 'am', true) . ":00";
                    }
                } else {
                    $nwdtshr = $spdts[0];
                    $dt_start = $nwdtshr.":".$spdts[1]. ":00";
                }
                $minute_start = ($nwdtshr * 60) + $spdts[1];
                /* start time set end */

                /* end time set start */
                $end_time = $logdata['end_time'];
                $spdte = explode(':', $end_time);
                #converted to min

                if (SES_TIME_FORMAT ==12) {
                    if (strpos($end_time, 'am') === false) {
                        $nwdtehr = ($spdte[0] != 12) ? ($spdte[0] + 12) : $spdte[0];
                        $dt_end = strstr($nwdtehr . ":" . $spdte[1], 'pm', true) . ":00";
                    } else {
                        $nwdtehr = ($spdte[0] != 12) ? ($spdte[0]) : '00';
                        $dt_end = strstr($nwdtehr . ":" . $spdte[1], 'am', true) . ":00";
                    }
                } else {
                    $nwdtehr = $spdte[0];
                    $dt_end = $nwdtehr . ":" . $spdte[1] . ":00";
                }
                $minute_end = ($nwdtehr * 60) + $spdte[1];
                /* end time set end */

                /* checking if start is greater than end then add 24 hr in end i.e. 1440 min */
                $duration = $minute_end >= $minute_start ? ($minute_end - $minute_start) : (($minute_end + 1440) - $minute_start);
                $task_end_date = $minute_end >= $minute_start ? $task_date : date('Y-m-d', strtotime($task_date . ' +1 day'));

                /* total working */
                $totalbreak = trim($logdata['break_time']) != '' ? $logdata['break_time'] : '0';
                $break_time = trim($totalbreak);
                if (strpos($break_time, '.')) {
                    $split_break = $break_time * 60;
                    $break_hour = (intval($split_break / 60) < 10 ? "0" : "") . intval($split_break / 60);
                    $break_min = (intval($split_break % 60) < 10 ? "0" : "") . intval($split_break % 60);
                    $break_time = $break_hour . ":" . $break_min;
                    $minute_break = ($break_hour * 60) + $break_min;
                } elseif (strpos($break_time, ':')) {
                    $split_break = explode(':', $break_time);
                    #$extra_hr = floor($split_est[1]/60);
                    #$break_hour = (intval($split_break / 60) < 10 ? "0" : "") . intval($split_break / 60);
                    #converted to min
                    $minute_break = ($split_break[0] * 60) + $split_break[1];
                } else {
                    $break_time = $break_time . ":00";
                    $minute_break = $break_time * 60;
                }
                $minute_break = $duration < $minute_break ? 0 : $minute_break;
                /* break ends */

                /* total hrs start */
                $total_duration = $duration - $minute_break;
                /* $total_hrs = floor($total_duration / 60);
                  $total_mins = (intval($total_duration % 60) < 10 ? "0" : "") . intval($total_duration % 60);
                  $total_hours = $total_hrs . ":" . $total_mins; */
                $total_hours = $total_duration;
                /* total hrs end */

                $LogTime[$i]['task_date'] = $task_date;
                $LogTime[$i]['start_time'] = $dt_start;
                $LogTime[$i]['end_time'] = $dt_end;

                /* required to convert the date to utc as we are taking converted server date to save */
                #$LogTime[$i]['start_datetime'] = $task_date . " " . $dt_start;
                #$LogTime[$i]['end_datetime'] = $task_end_date . " " . $dt_end;
                #converted to UTC
                $LogTime[$i]['start_datetime'] = $this->Tmzone->convert_to_utc(SES_TIMEZONE, TZ_GMT, TZ_DST, TZ_CODE, $task_date . " " . $dt_start, "datetime");
                $LogTime[$i]['end_datetime'] = $this->Tmzone->convert_to_utc(SES_TIMEZONE, TZ_GMT, TZ_DST, TZ_CODE, $task_end_date . " " . $dt_end, "datetime");

                #stored in sec
                $LogTime[$i]['break_time'] = $minute_break * 60;
                $LogTime[$i]['total_hours'] = $total_hours * 60;

                $LogTime[$i]['is_billable'] = isset($logdata['is_bilable']) && trim($logdata['is_bilable']) == 'Yes' ? 1 : 0;
                //$LogTime[$i]['description'] = strip_tags(addslashes(trim($CS_message)));
                $LogTime[$i]['description'] = addslashes(trim($CS_message));

                #pr($LogTime);exit;
                $saveLogTimeData = $this->LogTime->saveAll($LogTime);
            }

            $task_details['depend_message'] = ($arr['timelog'] != 'false' && $CS_assign_to && $arr['depend'] == 'No') ? ' But status, progress and time log cannot be changed as dependant tasks are not closed...' : '';

            /* time log entry end */
            /* Add custom field details --Start--*/
            if (!empty($customFieldData)) {
                $caseId = $arr['CS_id'] > 0 ? $arr['CS_id'] : ($arr['taskid'] > 0 ? $arr['taskid'] : $task_details['caseid']);
                $this->loadModel('CustomFieldValue');
                $saveCustomFieldData = $this->CustomFieldValue->saveCSValues($caseId, $customFieldData, $customFieldId);
            }
            /* --end-- */
            if (!empty($this->request->data['CS_id'])) {
                $res_val = json_decode($value, true);
                $curCaseId = $res_val['curCaseId'];
                $caseId = $this->request->data['CS_id'];
                $projUId = $this->request->data['CS_project_id'];
                $this->loadModel('Project');
                $this->Project->recursive = '-1';
                
                //$projId = $this->Project->query('SELECT Project.id from projects AS Project WHERE Project.uniq_id = "' . $projUId . '"');
                //$case_count = $this->Easycase->query('SELECT Easycase.case_count from easycases AS Easycase WHERE Easycase.project_id = "' . $projId[0]['Project']['id'] . '" AND Easycase.id = "' . $caseId . '"');
                $threadDtls = array();
                $view = new View($this);
                $tz = $view->loadHelper('Tmzone');
                $dt = $view->loadHelper('Datetime');
                $cq = $view->loadHelper('Casequery');
                $frmt = $view->loadHelper('Format');

                $sql = 'SELECT Easycase.*, CONCAT_WS(" ", User.name, " ") as user_name, User.photo as photo, IF(Easycase.assign_to > 0, CONCAT_WS(" ", User1.name, User1.last_name), "Nobody") as asgnd_usr from easycases AS Easycase LEFT JOIN users AS User ON Easycase.user_id=User.id LEFT JOIN users AS User1 ON Easycase.assign_to=User1.id WHERE Easycase.id = ' . $curCaseId;
                $curCaseDtls = $this->Easycase->query($sql);
                $curCaseDtls = $curCaseDtls[0];

                $curCaseDtls['User']['photo_existBg'] = $frmt->getProfileBgColr($curCaseDtls['Easycase']['user_id']);
                $replyDt = $tz->GetDateTime(SES_TIMEZONE, TZ_GMT, TZ_DST, TZ_CODE, $curCaseDtls['Easycase']['dt_created'], "datetime");
                $curDate = $tz->GetDateTime(SES_TIMEZONE, TZ_GMT, TZ_DST, TZ_CODE, GMT_DATETIME, "date");
                $caseReplyType = $curCaseDtls['Easycase']['reply_type'];
                $caseDtMsg = $curCaseDtls['Easycase']['message'];
                $caseDtLegend = $curCaseDtls['Easycase']['legend'];
                $caseDtTyp = $curCaseDtls['Easycase']['type_id'];
                $caseAssignTo = $curCaseDtls['Easycase']['assign_to'];
                $curCaseDtls['Easycase']['rply_dt'] = $dt->dateFormatOutputdateTime_day($replyDt, $curDate);
                $curCaseDtls['Easycase']['wrap_msg'] = $frmt->html_wordwrap($frmt->formatCms($curCaseDtls['Easycase']['message']), 75);
                if ($caseReplyType == 0 && ($caseDtMsg == '' || $caseDtLegend == 6)) {
                    if ($caseDtLegend == 3) {
                        $replyCap = '<b class="closed">'.__('Closed', true).'</b> '.__('the Task', true);
                    } elseif ($caseDtLegend == 4 || $caseDtLegend == 2) {
                        $replyCap = '<b class="wip">'.__('Started', true).'</b> '.__('the Task', true);
                    } elseif ($caseDtLegend == 5) {
                        $replyCap = '<b class="resolved">'.__('Resolved', true).'</b> '.__('the Task', true);
                    } elseif ($caseDtLegend == 6) {
                        $replyCap = '<b class="resolved">'.__('Modified', true).'</b> '.__('the Task', true);
                    } elseif ($caseDtLegend == 1) {
                        $replyCap = __('Changed the status of the task to', true).' <b class="resolved">'.__('New', true).'</b>';
                    }
                } else {
                    if ($caseReplyType == 1) {
                        $prjtype_name = $cq->getTypeArr($caseDtTyp, $GLOBALS['TYPE']);
                        $name = $prjtype_name['Type']['name'];
                        $sname = $prjtype_name['Type']['short_name'];
                        $image = $frmt->todo_typ($sname, $name);
                        $replyCap = __('Task Type changed to', true).' ' . $image . ' <b>' . $name . '</b>';
                    } elseif ($caseReplyType == 2) {
                        if ($caseAssignTo == 0) {
                            $replyCap = __('Task re-assigned to', true).' <b class="ttc">'.__('Nobody', true).'</b>';
                        } else {
                            $replyCap = __('Task re-assigned to', true).' <b class="ttc">' . $curCaseDtls[0]['asgnd_usr'] . '</b>';
                        }
                    } elseif ($caseReplyType == 3) {
                        #$caseDtDue = $getdata['Easycase']['due_date'];
                        $caseDtDue = $tz->GetDateTime(SES_TIMEZONE, TZ_GMT, TZ_DST, TZ_CODE, $curCaseDtls['Easycase']['due_date'], "datetime");
                        $curCreated = $tz->GetDateTime(SES_TIMEZONE, TZ_GMT, TZ_DST, TZ_CODE, GMT_DATETIME, "datetime");
                        if ($caseDtDue != "NULL" && $caseDtDue != "0000-00-00 00:00:00" && $caseDtDue != "" && $caseDtDue != "1970-01-01 00:00:00") {
                            $due_date = $dt->dateFormatOutputdateTime_day($caseDtDue, $curCreated, 'week');
                            $replyCap = __('Due Date changed to', true).' <b>' . $due_date . '</b>';
                        } else {
                            $replyCap = __('Due Date', true).': <i>'.__('No Due Date', true).'</i>';
                        }
                    } elseif ($caseReplyType == 4) {
                        $casePriority = $curCaseDtls['Easycase']['priority'];
                        if ($casePriority == 0) {
                            $replyCap = __('Priority changed to', true).' <b class="pr_high">'.__('High', true).'</b><br/>';
                        } elseif ($casePriority == 1) {
                            $replyCap =__('Priority changed to', true).' <b class="pr_medium">'.__('Medium', true).'</b><br/>';
                        } elseif ($casePriority == 2) {
                            $replyCap = __('Priority changed to', true).' <b class="pr_low">'.__('Low', true).'</b><br/>';
                        }
                    } elseif ($caseReplyType == 5) {
                        $caseEstHour = $frmt->format_time_hr_min($curCaseDtls['Easycase']['estimated_hours']);
                        $replyCap = __('Estimated Hour(s) changed to', true).' <b>' . $caseEstHour . '</b>';
                    } elseif ($caseReplyType == 6) {
                        $completed = $curCaseDtls['Easycase']['completed_task'];
                        $replyCap = __('Task Progress changed to', true).' <b>' . $completed . '%</b>';
                    } elseif ($caseReplyType == 7) {
                        $titl = $this->Easycase->formatTitle($curCaseDtls['Easycase']['title']);
                        $replyCap = __('Changed task title to', true).' "<b>' . $titl . '</b>"';
                    } elseif ($caseReplyType == 8) {
                        $replyCap = __('Removed a file from this Task', true);
                    } elseif ($caseReplyType == 9) {
                        $replyCap = __('Changed the status of this Task', true);
                    } elseif ($caseReplyType == 10) {
                        $replyCap = __('Added time log', true);
                    } elseif ($caseReplyType == 11) {
                        $replyCap = __('Updated time log', true);
                    } elseif ($caseReplyType == 15) {
                        $replyCap = __('Added story point', true);
                    } elseif ($caseReplyType == 16) {
                        $replyCap = __('Updated story point', true);
                    }
                }
                $curCaseDtls['Easycase']['replyCap'] = $replyCap;
                $curCaseDtls['Easycase']['wrap_msg'] = $frmt->html_wordwrap($frmt->formatCms($curCaseDtls['Easycase']['message']), 75);
                $curCaseDtls['Easycase']['user_name'] = $curCaseDtls[0]['user_name'];
                $rplyFilesArr = $this->Easycase->getCaseFiles($curCaseId);
                foreach ($rplyFilesArr as $fkey => $getFiles) {
                    $caseFileName = $getFiles['CaseFile']['file'];
                    $caseFileUName = $getFiles['CaseFile']['upload_name'] != '' ? $getFiles['CaseFile']['upload_name'] : $getFiles['CaseFile']['file'];

                    $rplyFilesArr[$fkey]['CaseFile']['is_exist'] = 0;
                    if (trim($caseFileName)) {
                        $rplyFilesArr[$fkey]['CaseFile']['is_exist'] = 1; //$frmt->pub_file_exists(DIR_CASE_FILES_S3_FOLDER,$caseFileName);
                    }

                    if (stristr($getFiles['CaseFile']['downloadurl'], 'www.dropbox.com')) {
                        $rplyFilesArr[$fkey]['CaseFile']['format_file'] = 'db'; //'<img src="'.HTTP_IMAGES.'images/db16x16.png" alt="Dropbox" title="'.$caseFileName.'" width="16" height="16" border="0" style="border:0px solid #C3C3C3" />';
                        $rplyFilesArr[$fkey]['CaseFile']['is_ImgFileExt'] = $frmt->validateImgFileExt($caseFileUName);
                    } elseif (stristr($getFiles['CaseFile']['downloadurl'], '.google.com')) {
                        $rplyFilesArr[$fkey]['CaseFile']['format_file'] = 'gd'; //'<img src="'.HTTP_IMAGES.'images/gd16x16.png" alt="Google" title="'.$caseFileName.'" width="16" height="16" border="0" style="border:0px solid #C3C3C3" />';
                        $rplyFilesArr[$fkey]['CaseFile']['is_ImgFileExt'] = 0;
                    } else {
                        $rplyFilesArr[$fkey]['CaseFile']['format_file'] = substr(strrchr(strtolower($caseFileName), "."), 1); //str_replace(array('"','\''), array('\'','"'), $frmt->imageType($caseFileName,25,10,1));
                        $rplyFilesArr[$fkey]['CaseFile']['is_ImgFileExt'] = $frmt->validateImgFileExt($caseFileUName);
                    }

                    if ($rplyFilesArr[$fkey]['CaseFile']['is_ImgFileExt']) {
                        if (defined('USE_S3') && USE_S3 == 1) {
                            $rplyFilesArr[$fkey]['CaseFile']['fileurl'] = $frmt->generateTemporaryURL(DIR_CASE_FILES_S3 . $caseFileUName);
                        } else {
                            $rplyFilesArr[$fkey]['CaseFile']['fileurl'] = HTTP_CASE_FILES . $caseFileUName;
                        }
                        if (trim($rplyFilesArr[$fkey]['CaseFile']['thumb']) != '') {
                            $info = true; #$s3->getObjectInfo(BUCKET_NAME, DIR_CASE_FILES_S3_FOLDER_THUMB . $caseFileName, S3::ACL_PRIVATE);
                            if ($info && defined('USE_S3') && USE_S3 == 1) {
                                $rplyFilesArr[$fkey]['CaseFile']['fileurl_thumb'] = $frmt->generateTemporaryURL(DIR_CASE_FILES_S3 . "thumb/" . $caseFileUName);
                            } else {
                                $rplyFilesArr[$fkey]['CaseFile']['fileurl_thumb'] = HTTP_CASE_FILES . trim($rplyFilesArr[$fkey]['CaseFile']['thumb']);
                            }
                        } else {
                            $rplyFilesArr[$fkey]['CaseFile']['fileurl_thumb'] = '';
                        }
                    } else {
                        $rplyFilesArr[$fkey]['CaseFile']['is_PdfFileExt'] = $frmt->validatePdfFileExt($caseFileUName);
                        if ($rplyFilesArr[$fkey]['CaseFile']['is_PdfFileExt']) {
                            if (defined('USE_S3') && USE_S3 == 1) {
                                $rplyFilesArr[$fkey]['CaseFile']['fileurl'] = $frmt->generateTemporaryURL(DIR_CASE_FILES_S3 . $caseFileUName);
                            } else {
                                $rplyFilesArr[$fkey]['CaseFile']['fileurl'] = HTTP_CASE_FILES . $caseFileUName;
                            }
                        }
                    }

                    //$rplyFilesArr[$fkey]['CaseFile']['file_shname'] = $frmt->shortLength($caseFileName,37);
                    $rplyFilesArr[$fkey]['CaseFile']['file_size'] = $frmt->getFileSize($getFiles['CaseFile']['file_size']);
                }
                $curCaseDtls['Easycase']['rply_files'] = $rplyFilesArr;
                $threadDtls['curCaseDtls'] = $curCaseDtls;
                $query = 'Select Easycase.case_count,Easycase.thread_count, Easycase.case_no, Easycase.id, Easycase.uniq_id from easycases AS Easycase WHERE Easycase.id = ' . $caseId;
                $mainCaseDtls = $this->Easycase->query($query);
                $threadDtls['curCaseDtls']['caseId'] = $mainCaseDtls[0]['Easycase']['id'];
                $threadDtls['curCaseDtls']['caseUniqId'] = $mainCaseDtls[0]['Easycase']['uniq_id'];
                $threadDtls['curCaseDtls']['case_count'] = $mainCaseDtls[0]['Easycase']['thread_count'];
                $threadDtls['curCaseDtls']['case_no'] = $mainCaseDtls[0]['Easycase']['case_no'];
                $res_val['appendData'] = array('threadDetails' => $threadDtls, 'total' => $mainCaseDtls[0]['Easycase']['thread_count'], 'is_inactive_case' => 0);
                $value = json_encode($res_val);
            }

            if (intval($oauth_return)) {
                return $value;
            } else {
                echo $value;
            }
        }
        exit;
    }
    
    public function download($files = null)
    {
        $this->layout = 'ajax';
        $this->Format->downloadFile($files);
        exit;
    }

    public function downloadfiles($files = null)
    {
        $this->loadModel('CaseFile');
        $getFiles = $this->CaseFile->findByUploadName($files);
        $getoldFiles = $this->CaseFile->findByFile($files);
        $orig_name = null;
        if (!empty($getFiles)) {
            $this->layout = 'ajax';
            if (empty($getFiles['CaseFile']['display_name'])) {
                $orig_name = $getFiles['CaseFile']['file'];
            } else {
                $orig_name = $getFiles['CaseFile']['display_name'];
            }
            $this->Format->downloadFile($files, $orig_name);
            exit;
        } elseif (empty($getFiles) && !empty($getoldFiles)) {
            $this->layout = 'ajax';
            if (empty($getFiles['CaseFile']['display_name'])) {
                $orig_name = $getoldFiles['CaseFile']['file'];
            } else {
                $orig_name = $getoldFiles['CaseFile']['display_name'];
            }
            $this->Format->downloadFile($files, $orig_name);
            exit;
        } else {
            echo "$files has been moved permanently";
            exit;
        }
    }
    public function downloadPrevewfiles($files = null)
    {
        if (!empty($files)) {
            $this->layout = 'ajax';
            $this->Format->downloadTMpFile($files);
            exit;
        } else {
            echo "$files has been moved permanently";
            exit;
        }
    }
    public function viewPdfFile($id = null)
    {
        $this->loadModel('CaseFile');
        $this->loadModel('ProjectUser');
        $this->layout = 'ajax';
        $id_file = isset($id) ? $id : $this->request->data['id'];
        //$getFiles = $this->CaseFile->findById($id);
        $getFiles = $this->CaseFile->find('first', array('conditions' => array('CaseFile.id' => $id_file, 'CaseFile.company_id' => SES_COMP)));
        if (empty($getFiles)) {
            $ret['status'] = 'fail';
            $ret['mesg'] = 'Need Authorization to access this file.';
            echo json_encode($ret);
            exit;
        }
        $this->ProjectUser->bindModel(array('belongsTo' => array('Project')));
        $projArr = $this->ProjectUser->find('first', array('conditions' => array('ProjectUser.project_id' => $getFiles['CaseFile']['project_id'], 'Project.isactive' => 1, 'ProjectUser.user_id' => $getFiles['CaseFile']['user_id'])));
        if (empty($projArr)) {
            $ret['status'] = 'fail';
            $ret['mesg'] = 'Need Authorization to access this file.';
            echo json_encode($ret);
            exit;
        }
        $ret = null;
        if (!empty($getFiles)) {
            if (defined('USE_S3') && USE_S3) {
                $s3 = new S3(awsAccessKey, awsSecretKey);
                $info = $s3->getObjectInfo(BUCKET_NAME, 'files/case_files/' . $getFiles['CaseFile']['upload_name']);
                if ($info) {
                    if ($id) {
                        $from_name1 = 'https://s3.amazonaws.com/' . BUCKET_NAME . '/files/case_files/' . $getFiles['CaseFile']['upload_name'];
                        $fil_temp = $this->Format->generateTemporaryURL($from_name1);
                        $from_name = 'files/case_files/' . $getFiles['CaseFile']['upload_name'];
                        $content = file_get_contents($fil_temp);
                        header('Content-Type: application/pdf');
                        header('Content-Length: ' . strlen($content));
                        header('Content-Disposition: inline;');
                        header('Cache-Control: private, max-age=0, must-revalidate');
                        header('Pragma: public');
                        print $content;
                        exit;
                    }
                    /* $temp = @fopen(WWW_ROOT.$from_name, "w");
                      if ($temp) {
                      @fwrite($temp, @file_get_contents($fil_temp)) or die("Cannot download image");
                      @fclose($temp);
                      } */
                    $ret['status'] = 'success';
                    $ret['type'] = 's3';
                } else {
                    $ret['status'] = 'fail';
                    $ret['mesg'] = 'File does not exists.';
                }
            } else {
                if (file_exists(WWW_ROOT . 'files/case_files/' . $getFiles['CaseFile']['upload_name'])) {
                    $from_name = 'files/case_files/' . $getFiles['CaseFile']['upload_name'];
                    $ret['type'] = 'local';
                    $ret['status'] = 'success';
                    $ret['url'] = HTTP_ROOT . $from_name;
                } else {
                    $ret['status'] = 'fail';
                    $ret['mesg'] = 'File does not exists.';
                }
            }
        } else {
            $ret['status'] = 'fail';
            $ret['mesg'] = 'Invalid pdf file';
        }
        echo json_encode($ret);
        exit;
    }

    public function downloadImgFile($files = null)
    {
        if (file_exists(DIR_CASE_FILES . $files)) {
            $file_path = DIR_CASE_FILES . $files;
            header("Content-type: image/jpeg");
            $content = file_get_contents($file_path);
            print $content;
            exit;
        } else {
            $var = "<table align='center' width='100%'><tr><td style='font:bold 12px verdana;color:#FF0000;' align='center'>Oops! File not found.<br/> File may be deleted or make sure you specified correct file name.</td></tr></table>";
            die($var);
        }
    }

    public function comment_edit()
    {
        $this->layout = 'ajax';
        $comments = $this->params->data['comments'];
        $cmntid = $this->params->data['cmntid'];

        $this->loadModel('CaseComment');
        $CaseComment['id'] = $cmntid;
        $CaseComment['comments'] = $comments;
        $this->CaseComment->save($CaseComment);

        echo $comments;
        exit;
    }

    public function comment()
    {
        $this->layout = 'ajax';
        $comments = $this->params->data['comments'];
        $repid = $this->params->data['repid'];
        $csid = $this->params->data['csid'];
        $fileArray = $this->params->data['allFiles'];
        $count = $this->params->data['count'];

        $this->loadModel('CaseComment');
        $CaseComment['easycase_id'] = $repid;
        $CaseComment['comments'] = $comments;
        $CaseComment['user_id'] = SES_ID;
        $CaseComment['dt_created'] = GMT_DATETIME;
        $CaseComment['isactive'] = 1;
        $this->CaseComment->save($CaseComment);

        $cmntId = $this->CaseComment->getLastInsertID();

        $allfiles = "";
        if (is_array($fileArray) && count($fileArray)) {
            $allfiles = $this->Postcase->uploadAndInsertFile($fileArray, $repid, $cmntId);
        }
        if ($allfiles) {
            $caseDataArr = $this->Easycase->query("UPDATE easycases SET format='1' WHERE id=" . $csid);
        }
        $caseDataArr1 = $this->Easycase->query("UPDATE easycases SET dt_created='" . GMT_DATETIME . "' WHERE id=" . $csid);
        $caseDataArr = $this->Easycase->find('first', array('conditions' => array('Easycase.id' => $csid), 'fields' => array('Easycase.id', 'Easycase.case_no', 'Easycase.project_id', 'Easycase.type_id', 'Easycase.priority', 'Easycase.title', 'Easycase.uniq_id')));

        $caseStsId = $caseDataArr['Easycase']['id'];
        $caseStsNo = $caseDataArr['Easycase']['case_no'];
        $closeStsPid = $caseDataArr['Easycase']['project_id'];
        $closeStsTyp = $caseDataArr['Easycase']['type_id'];
        $closeStsPri = $caseDataArr['Easycase']['priority'];
        $closeStsTitle = $caseDataArr['Easycase']['title'];
        $caseuniqid = $caseDataArr['Easycase']['uniq_id'];

        $CaseActivity = ClassRegistry::init('CaseActivity');
        $CaseActivity->recursive = -1;
        $CaseAct['comment_id'] = $cmntId;
        $CaseAct['user_id'] = SES_ID;
        $CaseAct['project_id'] = $closeStsPid;
        $CaseAct['case_no'] = $caseStsNo;
        $CaseAct['type'] = 7;
        $CaseAct['dt_created'] = GMT_DATETIME;
        $CaseActivity->saveAll($CaseAct);

        $usrArr = array();
        $usr_names = "";
        $ids = "";
        $usrMem = array();


        $getEmailUser = $this->Format->getAllNotifyUser($closeStsPid, 'reply');
        $name_email = "";
        $usrArr = array();
        foreach ($getEmailUser as $usrMem) {
            if (isset($usrMem['User']['name']) && $usrMem['User']['name']) {
                array_push($usrArr, $usrMem['User']);
                $usr_names.= trim($usrMem['User']['name']) . ", ";
            }
        }
        $usr_names = trim(trim($usr_names), ",");
        if (count($usrArr)) {
            $emailType = "Comment";
            //$msg = "<font color='#737373' style='font-weight:bold'>Status:</font> <font color='#000' style='font:normal 12px verdana;'>Commented</font>";
            $msg = "";
            $emailbody = "<font color='#000000' style='font:normal 12px verdana;'>Commented</font> on the reply";

            //$usrArr = array_unique($usrArr);
            foreach ($usrArr as $usr) {
                $allfiles = "";
                $emailMsg = "";
                $assignTo = "";
                $this->Postcase->generateMsgAndSendMail($usr['id'], $allfiles, $caseStsNo, $closeStsTitle, $comments, $closeStsPid, $closeStsPri, $closeStsTyp, $msg, $emailbody, $assignTo, $usr_names, $caseuniqid, $emailType, $usr['email'], $usr['name']);
            }
        }

        $this->set('cmntId', $cmntId);
        $this->set('comments', $comments);
        $this->set('repid', $repid);
        $this->set('count', $count);
    }

    public function fileremove($oauth_arg = null)
    {
        $this->layout = 'ajax';
        $filename = (isset($oauth_arg) && trim($oauth_arg)) ? $oauth_arg : $this->params->data['filename'];
        if ($filename && strstr($filename, "|")) {
            $fl = explode("|", $filename);
            if (isset($fl['0'])) {
                $file = $fl['0'];
                $s3 = new S3(awsAccessKey, awsSecretKey);
                $folder_orig_Name = 'files/case_files/' . trim($file);
                //$info = $s3->getObjectInfo(BUCKET_NAME, $folder_orig_Name,S3::ACL_PRIVATE);
                // if ($info){
                if ($s3->deleteObject(BUCKET_NAME, $folder_orig_Name, S3::ACL_PRIVATE)) {
                    //							if(isset($fl[2])){
                    //								$CaseFile = ClassRegistry::init('CaseFile')->deleteAll(array('CaseFile.id'=>$fl[2],'CaseFile.company_id'=>SES_COMP));
                    //								if($CaseFile){
                    //									echo "File Removed From db ";
                    //								}else{
                    //									echo "Error in removing File From db ";
                    //								}
                    //							}
                    echo "success";
                } else {
                    echo 'Error';
                    exit;
                }
//                    }else{
//						echo "Failure";exit;
//					}
                /* if(file_exists(DIR_CASE_FILES.$file)) {
                  if(unlink(DIR_CASE_FILES.$file)) {
                  //echo "Success";
                  }

                  } */
            }
        }
        exit;
    }

    public function fileupload($oauth_arg = null)
    {
        ini_set('max_execution_time', 0);
        #set_time_limit(0);
        $this->layout = 'ajax';
        //sleep(20);
        $size = (isset($oauth_arg['case_files']['size'])) ? $oauth_arg['case_files']['size'] : $this->params->data['Easycase']['case_files']['size'];
        $sizeinkb = $size / 1024;

        $storageExceeds = 0;
        $storageExceeds_t = 0;
        $totalStorage = 0;
        if (isset($oauth_arg['usedstorage']) && isset($oauth_arg['allowusage'])) {
            $usedstorage = $oauth_arg['usedstorage'];
            $allowusage = $oauth_arg['allowusage'];
        } else {
            if (!$oauth_arg) {
                $usedstorage = $this->Easycase->usedSpace('', SES_COMP, 1);
                $allowusage = $GLOBALS['user_subscription']['storage'];
            }
        }
        if ($allowusage != 'Unlimited') {
            $usedstorageMb = $usedstorage + ($sizeinkb / 1024);
            if ($usedstorageMb > $allowusage) {
                $storageExceeds = round($usedstorageMb - $allowusage, 2);
                $storageExceeds_t = round($usedstorageMb - $allowusage, 2);
            }
            $totalStorage = round($usedstorageMb, 2);
        }

        $name = (isset($oauth_arg['case_files']['name'])) ? $oauth_arg['case_files']['name'] : $this->params->data['Easycase']['case_files']['name'];
        $tmp_name = (isset($oauth_arg['case_files']['tmp_name'])) ? $oauth_arg['case_files']['tmp_name'] : $this->params->data['Easycase']['case_files']['tmp_name'];
        $type = (isset($oauth_arg['case_files']['type'])) ? $oauth_arg['case_files']['type'] : $this->params->data['Easycase']['case_files']['type'];
        $file_path = WWW_ROOT . 'files/case_files/';

        $newFileName = "";
        $updateData = "";
        $message = "success";
        $displayname = "";
        $t_displayname = "";
        $allowedSize = MAX_FILE_SIZE * 1024;
        //if ($storageExceeds <= 0) {
        if ($storageExceeds_t <= 0) {
            if ($sizeinkb <= $allowedSize) {
                if ($name) {
                    $oldname = $this->Format->chnageUploadedFileName($name);
                    $t_displayname = $oldname;
                    $ext1 = substr(strrchr($oldname, "."), 1);
                    if (mb_detect_encoding($name, mb_detect_order(), true) == 'UTF-8') {
                        $n_num = $this->Format->generateUniqNumber();
                        $oldname = $n_num . '.' . $ext1;
                    }
                    #$ext1 = $ext1 == 'tif' ? 'png' : $ext1;
                    $message = $this->Format->validateFileExt($ext1);
                    if ($message == "success") {
                        $tot = strlen($oldname);
                        $extcnt = strlen($ext1);
                        $end = $tot - $extcnt - 1;
                        $onlyfile = substr($oldname, 0, $end);

                        $CaseFile = ClassRegistry::init('CaseFile');
                        $CaseFile->recursive = -1;
                        $checkFile = $CaseFile->query("SELECT id,count FROM case_files as CaseFile WHERE file='$oldname'");
                        $newFileName = $onlyfile . "-" . md5(mt_rand() . uniqid()) . "." . $ext1;
                        $updateData = "|" . $sizeinkb . "|" . $checkFile['0']['CaseFile']['id'] . "|" . $name;
                        try {
                            /* converting tif to png */
                            !is_dir(WWW_ROOT . "temp/") ? mkdir(WWW_ROOT . "temp/", 0777, true) : "";
                            // s3 bucket  start
                            if (defined('USE_S3') && USE_S3 == 1) {
                                $s3 = new S3(awsAccessKey, awsSecretKey);
                                $s3->putBucket(BUCKET_NAME, S3::ACL_PRIVATE);
                                $folder_orig_Name = DIR_CASE_FILES_S3_FOLDER_TEMP . trim($newFileName);
                                $returnvalue = $s3->putObjectFile($tmp_name, BUCKET_NAME, $folder_orig_Name, S3::ACL_PRIVATE);
                            } else {
                                $returnvalue = copy($tmp_name, DIR_CASE_FILES . 'temp/' . trim($newFileName));
                            }
                            if (trim($type) != '' && $this->Format->is_image($type)) {
                                //$temp_thumb_dir = WWW_ROOT . 'temp' . DS;
                                $temp_thumb_dir = WWW_ROOT . 'files' . DS . 'case_files' . DS . 'temp' . DS;

                                if ($type == 'image/gif') {
                                    $jpg_name = substr($oldname, 0, strrpos($oldname, '.')) . ".jpg";
                                    exec("convert " . $tmp_name . "[0] -coalesce -quality 100 " . $temp_thumb_dir . $jpg_name);
                                    exec("convert " . $temp_thumb_dir . $jpg_name . " -quality 100 " . $temp_thumb_dir . $oldname);
                                    $tmp_name = $temp_thumb_dir . $oldname;
                                }

                                $folder_orig_Name_thumb = DIR_CASE_FILES_S3_FOLDER_TEMP . "thumb_" . trim($newFileName);
                                $file_dimension = (getimagesize($tmp_name));

                                !is_dir($temp_thumb_dir) ? mkdir($temp_thumb_dir, 0777, true) : '';
                                $sizeX = 180;
                                $sizeY = 120;
                                $gravity = "Center";

                                $width = $file_dimension[0];
                                $height = $file_dimension[1];
                                if (($width * 2) < $height) {
                                    $gravity = "North";
                                }
                                $temp_thumb_name = $temp_thumb_dir . "thumb_" . $oldname;
                                if ($width > $height) {
                                    #print("convert " . $tmp_name . " -resize x" . $sizeX . " -quality 100 " . $tmp_name);
                                    exec("convert " . $tmp_name . " -resize x" . $sizeX . " -quality 100 " . $tmp_name);
                                } else {
                                    #print("convert " . $tmp_name . " -resize " . $sizeY . " -quality 100 " . $tmp_name);
                                    exec("convert " . $tmp_name . " -resize " . $sizeY . " -quality 100 " . $tmp_name);
                                }
                                #print("convert " . $tmp_name . " -gravity " . $gravity . " -crop " . $sizeX . "x" . $sizeY . "+0+0 " . $temp_thumb_name);

                                if ($type == 'image/gif') {
                                    $jpg_name = substr($oldname, 0, strrpos($oldname, '.')) . ".jpg";
                                    exec("convert " . $tmp_name . " -gravity " . $gravity . " -crop " . $sizeX . "x" . $sizeY . "+0+0 " . $temp_thumb_dir . "thumb_" . $jpg_name);

                                    $new_name = substr($oldname, 0, strrpos($oldname, '.')) . ".gif";
                                    exec("convert " . $temp_thumb_dir . "thumb_" . $jpg_name . " -quality 100 " . $temp_thumb_dir . "thumb_" . $new_name);
                                } else {
                                    exec("convert " . $tmp_name . " -gravity " . $gravity . " -crop " . $sizeX . "x" . $sizeY . "+0+0 " . $temp_thumb_name);
                                }
                                if (defined('USE_S3') && USE_S3 == 1) {
                                    $returnvalue_thumb = $s3->putObjectFile($temp_thumb_name, BUCKET_NAME, $folder_orig_Name_thumb, S3::ACL_PRIVATE);
                                } else {
                                    $returnvalue_thumb = copy($temp_thumb_name, DIR_CASE_FILES . 'temp/thumb_' . trim($newFileName));
                                }
                                if ($returnvalue_thumb) {
                                    @unlink($temp_thumb_name);
                                    @unlink($tmp_name);
                                    @unlink($temp_thumb_dir . "thumb_" . $jpg_name);
                                    @unlink($temp_thumb_dir . $jpg_name);
                                }
                            }
                            #exit;
                            if (!$returnvalue) {
                                $message = "s3_error ";
                                $subject = __('Error in uploading file to S3 bucket', true);
                                $this->loadModel('User');
                                $userdetails = $this->User->query('SELECT User.*,Company.name FROM users User,company_users AS CompanyUser,companies AS Company WHERE User.id=CompanyUser.user_id AND CompanyUser.company_id=Company.id AND CompanyUser.company_id=' . SES_COMP . ' AND User.id=' . SES_ID);
                                $this->Email->delivery = 'smtp';
                                $this->Email->to = TO_DEV_EMAIL;
                                $this->Email->subject = $subject;
                                $this->Email->from = FROM_EMAIL;
                                $this->Email->template = 'fileupload_error';
                                $this->set('f_size', $size);
                                $this->set('f_type', $type);
                                $this->set('f_name', $newFileName);
                                $this->set('u_storage', $usedstorage);
                                $this->set('allow_usage', $allowusage);
                                $this->set('userdetails', $userdetails[0]);
                                $this->Email->sendAs = 'html';
                                $this->Sendgrid->sendgridsmtp($this->Email);
                            }
                        } catch (Exception $e) {
                        }
                        //s3 bucket end
                        $displayname = $name;
                        if (strlen($name) >= 30) {
                            $displayname = substr($displayname, 0, 30);
                        }
                    }
                } else {
                    $message = "error";
                }
            } else {
                $message = "size";
            }
        } else {
            $message = "exceed";
        }
        if (mb_detect_encoding($name, mb_detect_order(), true) == 'UTF-8') {
            $newFileName = $t_displayname . '__utf__' . $newFileName;
        }
        echo '{"name":"' . $displayname . '","sizeinkb":"' . $sizeinkb . '","filename":"' . $newFileName . $updateData . '","message":"' . $message . '","storageExceeds":"' . $storageExceeds . '","totalStorage":"' . $totalStorage . '"}';
        exit;
    }

    public function dashboard()
    {

        #$this->Postcase->iotoserverlogout(array('channel' => SES_COMP, 'userId' => SES_ID));
        if (SES_TYPE <= 2) {
            $comp = $this->Company->find('first', array('conditions' => array('Company.id' => SES_COMP, 'Company.is_active' => 1), 'fields' => array('Company.is_skipped')));
            if (isset($comp) && empty($comp)) {
                $proje_ids = array_keys($GLOBALS['active_proj_list']);
                $this->Easycase->recursive = -1;
                $task_count = $this->Easycase->find('count', array('conditions' => array('project_id' => $proje_ids)));
                if (!$task_count) {
                    //$this->redirect(HTTP_ROOT . 'onbording');
                    //exit;
                }
            }
        }
        $arrLeftNav = array(0 => 'search', 1 => 'status', 2 => 'project', 3 => 'types', 4 => 'priority', 5 => 'members', 6 => 'top', 7 => 'statistics');
        if (isset($_GET['filter']) && $_GET['filter'] == "files") {
            $caseStatus = "attch";
            $this->Cookie->write('STATUS', "attch", '365 days');
        } elseif (isset($_GET['filter']) && $_GET['filter'] == "kanban") {
            $caseStatus = "kanban";
            $this->Cookie->write('STATUS', "kanban", '365 days');
        } elseif ($_COOKIE['STATUS']) {
            $caseStatus = $_COOKIE['STATUS'];
        } else {
            $caseStatus = "all";
        }
        if ($_COOKIE['CUSTOM_STATUS']) {
            $caseCustomStatus = $_COOKIE['CUSTOM_STATUS'];
        } else {
            $caseCustomStatus = "all";
        }
        if ($_COOKIE['PRIORITY']) {
            $priorityFil = $_COOKIE['PRIORITY'];
        } else {
            $priorityFil = "all";
        }
        if ($_COOKIE['CS_TYPES']) {
            $caseTypes = $_COOKIE['CS_TYPES'];
        } else {
            $caseTypes = "all";
        }
        if ($_COOKIE['MEMBERS']) {
            $caseUserId = $_COOKIE['MEMBERS'];
        } else {
            $caseUserId = "all";
        }
        if ($_COOKIE['COMMENTS']) {
            $casComment = $_COOKIE['COMMENTS'];
        } else {
            $caseComment = "all";
        }
        if ($_COOKIE['ASSIGNTO']) {
            $caseAssignTo = $_COOKIE['ASSIGNTO'];
        } else {
            $caseAssignTo = "all";
        }
        if ($this->Cookie->read('IS_SORT')) {
            $isSort = $this->Cookie->read('IS_SORT');
        } else {
            $isSort = 0;
        }
        $milestoneIds = "all";
        if ($_COOKIE['MILESTONES']) {
            $milestoneIds = $_COOKIE['MILESTONES'];
        }
        if ($_COOKIE['DATE']) {
            $caseDateFil = $_COOKIE['DATE'];
        } else {
            $caseDateFil = "";
        }
        if ($_COOKIE['DUE_DATE']) {
            $casedueDateFil = $_COOKIE['DUE_DATE'];
        } else {
            $casedueDateFil = "";
        }
        $caseDtlsSort = "";
        $caseDate = "";
        $caseTitle = "";
        $caseDueDate = "";
        $caseEstHours = "";
        $caseNum = "";
        $caseCreatedDate = "";
        if (isset($_GET['search']) && urldecode(trim($_GET['search']))) {
            $caseSearch = urldecode(trim(htmlentities(strip_tags($_GET['search']))));
            //$this->Cookie->write('SEARCH',$caseSearch,'365 days');
            setcookie('SEARCH', $caseSearch, COOKIE_REM, '/', DOMAIN_COOKIE, false, false);
        } elseif ($_COOKIE['SEARCH']) {
            $caseSearch = $_COOKIE['SEARCH'];
        } else {
            $caseSearch = "";
        }

        $caseMenuFilters = "";

        if ($_COOKIE['CURRENT_FILTER'] && SES_TYPE == '1') {
            $caseMenuFilters = $_COOKIE['CURRENT_FILTER'];
        }
        if (isset($_GET['filters'])) {
            $caseMenuFilters = $_GET['filters'];
        }
        $this->set('caseDtlsSort', $caseDtlsSort);
        $caseSrch = "";
        $casePage = 1;
        $caseUniqId = "";

        if (isset($this->request->query['first_login']) && $this->request->query['first_login'] == 1) {
            setcookie('FIRST_LOGIN_1', 1, time() + (86400 * 30), '/', DOMAIN_COOKIE, false, false);
            //$this->redirect("/getting_started?first_login=1");
            $this->redirect("/users/onBoard/?first_login=1");
            exit;
            $this->set('first_login', $this->request->query['first_login']);
        }
        $this->set('curProjId', PROJ_ID);
        $this->set('projUniq', PROJ_UNIQ_ID);
        $this->set('caseStatus', $caseStatus);
        $this->set('caseCustomStatus', $caseCustomStatus);
        $this->set('priorityFil', $priorityFil);
        $this->set('caseTypes', $caseTypes);
        $this->set('caseDate', $caseDate);
        $this->set('caseSearch', $caseSearch);
        $this->set('casePage', $casePage);
        $this->set('caseUniqId', $caseUniqId);
        $this->set('caseTitle', $caseTitle);
        $this->set('isSort', $isSort);
        $this->set('caseUserId', $caseUserId);
        $this->set('caseComment', $caseComment);
        $this->set('caseAssignTo', $caseAssignTo);
        $this->set('caseMenuFilters', $caseMenuFilters);
        $this->set('caseDueDate', $caseDueDate);
        $this->set('caseNum', $caseNum);
        $this->set('caseLegendsort', $caseLegendsort);
        $this->set('milestoneIds', $milestoneIds);
        $this->set('caseDateFil', $caseDateFil);
        $this->set('casedueDateFil', $casedueDateFil);
        $this->set('caseCreatedDate', $caseCreatedDate);

        setcookie('DEFAULT_PAGE', 'dashboard', COOKIE_REM, '/', DOMAIN_COOKIE, false, false);
    }

    public function case_files()
    {
        $this->layout = 'ajax';
        $page_limit = CASE_PAGE_LIMIT;
        $projUniq = $this->params->data['projFil']; // Project Uniq ID
        $casePage = $this->params->data['casePage']; // Project Uniq ID


        $caseFileId = $this->params->data['caseFileId'];
        $condnts = "";
        $file_srch = "";
        if (isset($caseFileId) && !empty($caseFileId)) {
            $condnts = "AND CaseFile.id='" . $caseFileId . "'";
            $file_srch = $this->params->data['file_srch'];
        } elseif (isset($this->params->data['file_srch']) && !empty($this->params->data['file_srch'])) {
            $file_srch = $this->params->data['file_srch'];
            $condnts = "AND CaseFile.file LIKE '%" . trim($file_srch) . "%' ";
        }
        // get project ID from project uniq-id
        $curProjId = null;
        $curProjShortName = null;
        if ($projUniq != 'all') {
            $this->loadModel('ProjectUser');
            $this->ProjectUser->bindModel(array('belongsTo' => array('Project')));
            $projArr = $this->ProjectUser->find('first', array('conditions' => array('Project.uniq_id' => $projUniq, 'ProjectUser.user_id' => SES_ID, 'Project.isactive' => 1, 'ProjectUser.company_id' => SES_COMP), 'fields' => array('Project.id', 'Project.short_name', 'ProjectUser.id')));
            if (count($projArr)) {
                $curProjId = $projArr['Project']['id'];
                $curProjShortName = $projArr['Project']['short_name'];
            }

            //Updating ProjectUser table to current date-time
            $projIsChange = $this->params->data['projIsChange']; // Project Uniq ID
            if ($projIsChange != $projUniq) {
                $ProjectUser['id'] = $projArr['ProjectUser']['id'];
                $ProjectUser['dt_visited'] = GMT_DATETIME;
                $this->ProjectUser->save($ProjectUser);
            }
        }

        $page = $casePage;
        $limit1 = $page * $page_limit - $page_limit;
        $limit2 = $page_limit;

        $clt_sql = 1;
        if ($this->Auth->user('is_client') == 1) {
            $clt_sql = "((Easycase.client_status = " . $this->Auth->user('is_client') . " AND Easycase.user_id = " . $this->Auth->user('id') . ") OR Easycase.client_status != " . $this->Auth->user('is_client') . ")";
        }

        if ($projUniq != 'all') {
            $caseAll = $this->Easycase->query("SELECT SQL_CALC_FOUND_ROWS Easycase.id,Easycase.uniq_id,Easycase.case_no,Easycase.user_id,Easycase.dt_created,Easycase.actual_dt_created,Easycase.istype,Easycase.project_id,Easycase.legend,CaseFile.*,Project.uniq_id FROM easycases as Easycase,case_files as CaseFile,projects as Project WHERE Easycase.id=CaseFile.easycase_id AND Easycase.project_id=Project.id AND Easycase.isactive='1' AND " . $clt_sql . " AND Easycase.project_id='$curProjId' AND Easycase.project_id!=0 AND CaseFile.isactive='1' " . $condnts . " ORDER BY Easycase.actual_dt_created DESC LIMIT $limit1,$limit2");
        }
        if ($projUniq == 'all') {
            $caseAll = $this->Easycase->query("SELECT SQL_CALC_FOUND_ROWS Easycase.id,Easycase.uniq_id,Easycase.case_no,Easycase.user_id,Easycase.dt_created,Easycase.actual_dt_created,Easycase.istype,Easycase.project_id,Easycase.legend,CaseFile.*,Project.uniq_id FROM easycases as Easycase,case_files as CaseFile,projects as Project WHERE Easycase.id=CaseFile.easycase_id AND Project.id=Easycase.project_id AND Easycase.isactive='1' AND " . $clt_sql . " AND Easycase.project_id!=0 AND CaseFile.isactive='1' AND Easycase.project_id IN (SELECT ProjectUser.project_id FROM project_users AS ProjectUser,projects as Project WHERE ProjectUser.user_id=" . SES_ID . " AND ProjectUser.project_id=Project.id AND Project.isactive='1' AND Project.company_id='" . SES_COMP . "') " . $condnts . " ORDER BY Easycase.actual_dt_created DESC LIMIT $limit1,$limit2");
        }
        $caseCount = $this->Easycase->query("SELECT FOUND_ROWS() as count");

        $view = new View($this);
        $tz = $view->loadHelper('Tmzone');
        $dt = $view->loadHelper('Datetime');
        $frmt = $view->loadHelper('Format');
        $cq = $view->loadHelper('Casequery');
        if (isset($caseAll) && !empty($caseAll)) {
            foreach ($caseAll as $key => $getdata) {
                if ($getdata['Easycase']['istype'] != 1) {
                    $caseAll[$key]['Easycase']['uniq_id'] = $this->Format->getParentTaskUnid($getdata['Easycase']['case_no'], $getdata['Easycase']['project_id'], $getdata['Easycase']['uniq_id']);
                }
                if (isset($getdata['CaseFile']['downloadurl']) && trim($getdata['CaseFile']['downloadurl'])) {
                    $caseAll[$key]['fileurl'] = '';
                    $caseAll[$key]['file_name'] = $getdata['CaseFile']['file'];
                    $caseAll[$key]['link_url'] = '';
                    $caseAll[$key]['download_url'] = $getdata['CaseFile']['downloadurl'];
                    $is_google = strpos($getdata['CaseFile']['downloadurl'], ".google.com");
                    if ($is_google !== false) {
                        $caseAll[$key]['file_type'] = "gd";
                    }
                    $is_dropbox = strpos($getdata['CaseFile']['downloadurl'], "https://www.dropbox.com");
                    if ($is_dropbox !== false) {
                        $caseAll[$key]['file_type'] = "db";
                    }
                } else {
                    $linkurl = $getdata['CaseFile']['upload_name'] != '' ? $getdata['CaseFile']['upload_name'] : $getdata['CaseFile']['file'];
                    if (defined('USE_S3') && USE_S3 == 1) {
                        $caseAll[$key]['fileurl'] = $frmt->generateTemporaryURL(DIR_CASE_FILES_S3 . $linkurl);
                    } else {
                        $caseAll[$key]['fileurl'] = HTTP_CASE_FILES . $linkurl;
                    }
                    if ($getdata['CaseFile']['display_name']) {
                        $caseAll[$key]['file_name'] = $getdata['CaseFile']['display_name'];
                    } else {
                        //$caseAll[$key]['file_name'] = $frmt->formatText($frmt->longstringwrap($this->Format->shortLength($getdata['CaseFile']['file'], 75)));
                        $caseAll[$key]['file_name'] = $getdata['CaseFile']['file'];
                    }
                    $caseAll[$key]['link_url'] = HTTP_ROOT . "easycases/download/" . $linkurl;
                    $caseAll[$key]['download_url'] = '';
                    $caseAll[$key]['file_type'] = substr(strrchr(strtolower($getdata['CaseFile']['file']), "."), 1);
                }
                $caseAll[$key]['is_image'] = $frmt->validateImgFileExt($linkurl);
                if ($getdata['CaseFile']['file_size'] !== '0.0') {
                    $caseAll[$key]['file_size'] = $frmt->getFileSize($getdata['CaseFile']['file_size']);
                }

                if ($getdata['Easycase']['user_id'] != SES_ID) {
                    $usrDtls = $cq->getUserDtls($getdata['Easycase']['user_id']);
                    $usrName = $frmt->formatText($usrDtls['User']['name']);
                } else {
                    $usrName = "me";
                }
                $caseAll[$key]['usrName'] = $frmt->formatText($usrName);

                $caseAll[$key]['is_archive'] = 0;
                if (SES_TYPE == 1 || SES_TYPE == 2 || ($getdata['Easycase']['legend'] == 1 && SES_ID == $getdata['Easycase']['user_id'])) {
                    $caseAll[$key]['is_archive'] = 1;
                }

                $caseAll[$key]['updatedCur'] = $updatedCur = $tz->GetDateTime(SES_TIMEZONE, TZ_GMT, TZ_DST, TZ_CODE, GMT_DATETIME, "date");
                $caseAll[$key]['inserted'] = $inserted = $tz->GetDateTime(SES_TIMEZONE, TZ_GMT, TZ_DST, TZ_CODE, $getdata['Easycase']['actual_dt_created'], "datetime");
                $caseAll[$key]['newUpdDt'] = $newUpdDt = date('Y-m-d', strtotime($inserted));
                $caseAll[$key]['newdt'] = $newdt = $dt->dateFormatOutputdateTime_day($newUpdDt, $updatedCur, 'date');
                $caseAll[$key]['activity'] = $dt->dateFormatOutputdateTime_day($inserted, $updatedCur, 'week');
                $caseAll[$key]['xct_activity'] = date('l, F d, Y', strtotime($inserted)) . " at " . date('h:i A', strtotime($inserted));
            }
        }

        $caseFiles['file_srch'] = $file_srch;
        $caseFiles['caseCount'] = $caseCount['0']['0']['count'];
        $caseFiles['caseAll'] = $caseAll;
        $caseFiles['page_limit'] = $page_limit;
        $caseFiles['casePage'] = $casePage;
        $caseFiles['total_files'] = $frmt->pagingShowRecords($caseCount['0']['0']['count'], $page_limit, $casePage);
        $this->set('caseFiles', json_encode($caseFiles));
    }

    public function setCustomStatus()
    {
        $customfilterid = (isset($this->params->data['customfilter'])) ? $this->params->data['customfilter'] : '';
        $filter = array();
        if ($customfilterid) {
            $this->loadModel('CustomFilter');
            $getcustomfilter = "SELECT SQL_CALC_FOUND_ROWS * FROM custom_filters AS CustomFilter WHERE CustomFilter.company_id = '" . SES_COMP . "' and CustomFilter.user_id =  '" . SES_ID . "' and CustomFilter.id='" . $customfilterid . "' ORDER BY CustomFilter.dt_created DESC ";
            $getfilter = $this->CustomFilter->query($getcustomfilter);
            $filter['status'] = $getfilter[0]['CustomFilter']['filter_status'];
            $filter['priority'] = $getfilter[0]['CustomFilter']['filter_priority'];
            $filter['type'] = $getfilter[0]['CustomFilter']['filter_type_id'];
            $filter['label'] = $getfilter[0]['CustomFilter']['filter_type_id'];
            $filter['member'] = $getfilter[0]['CustomFilter']['filter_member_id'];
            $filter['comment'] = $getfilter[0]['CustomFilter']['filter_comment'];
            $filter['assignto'] = $getfilter[0]['CustomFilter']['filter_assignto'];
            $filter['date'] = $getfilter[0]['CustomFilter']['filter_date'];
            $filter['duedate'] = (isset($getfilter[0]['CustomFilter']['filter_duedate']) && $getfilter[0]['CustomFilter']['filter_duedate'] !== '0000-00-00 00:00:00') ? $getfilter[0]['CustomFilter']['filter_duedate'] : '';
        }
        print json_encode($filter);
        exit;
    }

    public function case_project($inactiveFlag = '', $proUid = '')
    {
    }

    public function ajax_assignto_mem()
    {
        $this->layout = 'ajax';
        $project = $this->params->data['project'];
        $usrDtlsArr = $this->Easycase->getMemebers($project);
        $this->set('projUser', json_encode(array($project => $usrDtlsArr)));
    }

    public function case_details($oauth_arg = null, $inactiveFlag = '', $proId = '', $id = '', $inactivecaseUniqId = '')
    {
        $this->loadModel('Type');
        $this->layout = 'ajax';
        $details = 0;
        $oauth_return = 0;
        if (isset($oauth_arg) && !empty($oauth_arg)) {
            $oauth_return = 1;
        }
        $chkDetlRed = 1;
        if (isset($_SESSION['setredirectcasedetl']) && !$oauth_return) {
            unset($_SESSION['setredirectcasedetl']);
            $res_ret = $this->Project->updateDtVisited(trim($this->params->data['caseUniqId']), $this->Auth->user('id'));
            
            $this->loadModel("Company");
            $redirect_res = $this->Company->getCompanyFields(array("Company.id" => $res_ret['Project']['company_id']), array("Company.seo_url"));
            $this->set('caseDetail', json_encode(array('redirect'=>'dashboard','uid'=>trim($this->params->data['caseUniqId']),'proj_uid'=>$res_ret['Project']['uniq_id'],'proj_nm'=>$res_ret['Project']['name'],'redirect_url'=> (isset($_SERVER['HTTPS']) && $_SERVER['HTTPS'] == 'on') ? "https://".$redirect_res['Company']['seo_url'].'.'.strtolower(SITE_NAME).'/':"http://".$redirect_res['Company']['seo_url'].'.'.strtolower(SITE_NAME).'/')));
            $chkDetlRed = 0;
        }
        setcookie('REPLY_SORT_ORDER', 'ASC', COOKIE_REM, '/', DOMAIN_COOKIE, false, false);
        if ($chkDetlRed) {
            $caseUniqId = isset($oauth_arg['caseUniqId']) ? $oauth_arg['caseUniqId'] : $this->params->data['caseUniqId'];
            if (!empty($inactiveFlag)) {
                $caseUniqId = $inactivecaseUniqId;
            }

            if (isset($this->params->data['details'])) {
                $details = $this->params->data['details'];
            }
            if (isset($this->params->data['sorting'])) {
                $sorting = $this->params->data['sorting'];
                $this->Cookie->write('SORT_THREAD', $sorting, '365 days');
            } elseif ($_COOKIE['REPLY_SORT_ORDER']) {
                if ($_COOKIE['REPLY_SORT_ORDER'] == 'ASC') {
                    $sort_cookie = 1;
                }
                $sorting = $_COOKIE['REPLY_SORT_ORDER'] . " LIMIT 0,10";
            } else {
                $sorting = "DESC LIMIT 0,10";
            }

            $ProjId = null;
            $ProjName = null;
            $curCaseNo = null;
            $curCaseId = null;

            ######## get case number from case uniq ID ################
            $getCaseNoPjId = $this->Easycase->getEasycase($caseUniqId);
            if ($getCaseNoPjId) {
                $curCaseNo = $getCaseNoPjId['Easycase']['case_no'];
                $curCaseId = $getCaseNoPjId['Easycase']['id'];
                $curCaseUId = $getCaseNoPjId['Easycase']['uniq_id'];
                $prjid = $getCaseNoPjId['Easycase']['project_id'];
                $is_active = (intval($getCaseNoPjId['Easycase']['isactive'])) ? 1 : 0;
            } else {
                //No task with uniq_id $caseUniqId
                die;
            }

            ######## Checking user_project ################
            if (empty($inactiveFlag)) {
                $cond1 = array(
                'conditions' => array('ProjectUser.user_id' => SES_ID, 'ProjectUser.company_id' => SES_COMP, 'Project.isactive' => 1, 'Project.id' => $prjid),
                'fields' => array('DISTINCT Project.id', 'Project.uniq_id', 'Project.name', 'Project.project_methodology_id', 'Project.status_group_id')
            );
            } else {
                $cond1 = array(
                'conditions' => array('ProjectUser.user_id' => SES_ID, 'ProjectUser.company_id' => SES_COMP, 'Project.id' => $prjid),
                'fields' => array('DISTINCT Project.id', 'Project.uniq_id', 'Project.name', 'Project.project_methodology_id', 'Project.status_group_id')
            );
            }
            $this->ProjectUser->bindModel(array('belongsTo' => array('Project')));
            $getProjId = $this->ProjectUser->find('first', $cond1);
            if ($getProjId) {
                $ProjId = $getProjId['Project']['id'];
                $projUniqId = $getProjId['Project']['uniq_id'];
                $ProjName = $getProjId['Project']['name'];
                $ProjMethodology = $getProjId['Project']['project_methodology_id'];
            } else {
                //Session user not assigned the project $prjid
                die;
            }

            $sqlcasedata = array();
            $sqlcaseactivity = array();
            $getPostCase = array();
            if ($ProjId && $curCaseNo) {
                ######## get all cases
                $ord_reply = $sorting;
                if ($oauth_return) {
                    $ord_reply = 'ASC';
                }
                $cmnt_cond = '';
                if ($this->Auth->user('is_client') == 1) {
                    //$clt_sql =
                    $cmnt_cond = " AND Easycase.client_status !=1 ";
                }
                $sqlcasedata = $this->Easycase->query("SELECT SQL_CALC_FOUND_ROWS Easycase.* FROM easycases as Easycase  LEFT JOIN case_files as CaseFile ON CaseFile.easycase_id=Easycase.id WHERE Easycase.project_id='" . $ProjId . "' AND  Easycase.case_no=" . $curCaseNo . " AND Easycase.istype='2' AND Easycase.legend !='6' AND ((CaseFile.comment_id = 0 AND CaseFile.isactive = 1) OR Easycase.message != '')".$cmnt_cond." GROUP BY Easycase.id ORDER BY Easycase.dt_created " . $ord_reply);
                $countall = $this->Easycase->query("SELECT FOUND_ROWS() as total");
                if (($countall[0][0]['total'] > 10) && isset($sort_cookie) && !$oauth_return) {
                    $limit1 = $countall[0][0]['total'] - 10;
                    $sqlcasedata = $this->Easycase->query("SELECT  Easycase.* FROM easycases as Easycase  LEFT JOIN case_files as CaseFile ON CaseFile.easycase_id=Easycase.id WHERE Easycase.project_id='" . $ProjId . "' AND  Easycase.case_no=" . $curCaseNo . " AND Easycase.istype='2' AND Easycase.legend !='6' AND  ((CaseFile.comment_id = 0 AND CaseFile.isactive = 1) OR Easycase.message != '' )".$cmnt_cond." GROUP BY Easycase.id ORDER BY Easycase.dt_created ASC LIMIT " . $limit1 . ",10");
                }
                $sqlcaseactivity = $this->Easycase->query("SELECT SQL_CALC_FOUND_ROWS Easycase.* FROM easycases as Easycase  LEFT JOIN case_files as CaseFile ON CaseFile.easycase_id=Easycase.id WHERE Easycase.project_id='" . $ProjId . "' AND  Easycase.case_no=" . $curCaseNo . "  AND  ((CaseFile.id IS NULL AND (Easycase.message IS NULL || Easycase.message = '')) OR Easycase.legend ='6')  GROUP BY Easycase.id ORDER BY Easycase.id DESC"); //AND Easycase.istype='2'
                $activitycountall =count($sqlcaseactivity);
                if (($activitycountall > 10) && !$oauth_return) {
                    $alimit1 = 10;
                    $sqlcaseactivity = $this->Easycase->query("SELECT  Easycase.* FROM easycases as Easycase  LEFT JOIN case_files as CaseFile ON CaseFile.easycase_id=Easycase.id WHERE Easycase.project_id='" . $ProjId . "' AND  Easycase.case_no=" . $curCaseNo . " AND  ((CaseFile.id IS NULL AND (Easycase.message IS NULL || Easycase.message = ''))  OR Easycase.legend ='6')  GROUP BY Easycase.id ORDER BY Easycase.id DESC LIMIT 0,$alimit1"); //Easycase.istype='2'
                }
                //echo "SELECT  Easycase.* FROM easycases as Easycase WHERE project_id='" . $ProjId . "' AND case_no=" . $curCaseNo . " AND message !='' AND istype='2'  ORDER BY dt_created ASC LIMIT " . $limit1 . ",10";exit;
                ######## get users
                /* if($projUniqDtls != 'all'){
                  $allMems = $this->Easycase->getMemebers($projUniqDtls);
                  }else{
                  $allMems = $this->Easycase->getMemebersid($ProjId);
                  } */
                $allMemsArr = $this->Easycase->getMemebersid($ProjId);
                $allMems = array();
                foreach ($allMemsArr as $k => $getAllMems) {
                    if (intval($oauth_return)) {
                        $allMemsArr[$k]['User']['id'] = $allMemsArr[$k]['User']['uniq_id'];
                    }
                    $nm = $getAllMems['User']['name'];
                    if (!empty($getAllMems['User']['last_name'])) {
                        $nm .= ' '.$getAllMems['User']['last_name'];
                    }
                    $allMemsArr[$k]['User']['name'] = $nm;
                    //$allMemsArr[$k]['User']['name'] = $this->Format->formatText($nm,1);
                    //$allMemsArr[$k]['User']['name'] = $this->Format->formatText($getAllMems['User']['name']);
                    $allMemsArr[$k]['User']['is_client'] = $allMemsArr[$k]['CompanyUser']['is_client'];
                    unset(
                        //$allMemsArr[$k]['User']['email'],
                        $allMemsArr[$k]['User']['istype'], $allMemsArr[$k]['User']['short_name'], $allMemsArr[$k]['User']['uniq_id']
                );
                    $allMems[$getAllMems['User']['id']] = $allMemsArr[$k];
                }

                //$this->Easycase->query('SET CHARACTER SET utf8');
                $getPostCase = $this->Easycase->query("SELECT * FROM easycases as Easycase WHERE project_id='" . $ProjId . "' AND case_no=" . $curCaseNo . " AND istype='1' ");
                $estimated_hours = (isset($getPostCase['0']['Easycase']) && !empty($getPostCase['0']['Easycase'])) ? $getPostCase['0']['Easycase']['estimated_hours'] : '0';
                #$getHours = $this->Easycase->query("SELECT SUM(hours) as hours FROM easycases as Easycase WHERE project_id='" . $ProjId . "' AND case_no=" . $curCaseNo . " AND reply_type=0");
                #$hours = $getHours[0][0]['hours'];

                $getcompletedtask = $this->Easycase->query("SELECT completed_task  FROM easycases as Easycase WHERE project_id='" . $ProjId . "' AND case_no=" . $curCaseNo . "  and completed_task != 0 AND reply_type=6 ORDER BY id DESC LIMIT 1");
                $completedtask = $getcompletedtask[0]['Easycase']['completed_task'];
            } else {
                //$ProjId and $curCaseNo not found. This step should not, b'cos it handeled previously.
                die;
            }

            $getCurCase = $this->CaseRecent->find('first', array('conditions' => array('CaseRecent.easycase_id' => $curCaseId, 'CaseRecent.user_id' => SES_ID, 'CaseRecent.project_id' => $ProjId), 'fields' => array('CaseRecent.id')));
            if (isset($getCurCase['CaseRecent']) && count($getCurCase['CaseRecent'])) {
                $post_caserecent['CaseRecent']['id'] = $getCurCase['CaseRecent']['id'];
            }
            $post_caserecent['CaseRecent']['easycase_id'] = $curCaseId;
            $post_caserecent['CaseRecent']['user_id'] = SES_ID;
            $post_caserecent['CaseRecent']['project_id'] = $ProjId;
            $post_caserecent['CaseRecent']['company_id'] = SES_COMP;
            if ($details == "0") {
                $post_caserecent['CaseRecent']['dt_created'] = GMT_DATETIME;
            }
            $this->CaseRecent->save($post_caserecent);

            ######## get easycase case members ################
            $usrDtlsAll = $this->Easycase->getTaskUser($ProjId, $curCaseNo);
            $allUserArr = array();
            foreach ($usrDtlsAll as $ud) {
                $allUserArr[$ud['User']['id']] = $ud;
                $allUserArr[$ud['User']['id']]['User']['prflBg'] = $this->User->getProfileBgColr($ud['User']['id']);
            }
            ######## End get easycase case members ################

            $view = new View($this);
            $tz = $view->loadHelper('Tmzone');
            $dt = $view->loadHelper('Datetime');
            $cq = $view->loadHelper('Casequery');
            $frmt = $view->loadHelper('Format');
            $sqlcaseactivity1 = $this->Easycase->formatReplies($sqlcaseactivity, $allUserArr, $frmt, $cq, $tz, $dt, $completedtask);
            $sqlcaseactivity = $sqlcaseactivity1['sqlcasedata'];
            $sqlcasedata1 = $this->Easycase->formatReplies($sqlcasedata, $allUserArr, $frmt, $cq, $tz, $dt, $completedtask);
            $sqlcasedata = $sqlcasedata1['sqlcasedata'];
            if (intval($oauth_return)) {
                foreach ($sqlcasedata as $key => $csdata) {
                    $sqlcasedata[$key]['Easycase']['id'] = $sqlcasedata[$key]['Easycase']['uniq_id'];
                    unset(
                        $sqlcasedata[$key]['Easycase']['uniq_id'], $sqlcasedata[$key]['Easycase']['user_id'], $sqlcasedata[$key]['Easycase']['project_id']
                );
                }
            }

            //add mahavir
            $caseStatus = $getPostCase['0']['Easycase']['status'];
            $caseClientStatus = $getPostCase['0']['Easycase']['client_status'];
            $caseLegendRep = $getPostCase['0']['Easycase']['legend'];
            $caseAutoId = $getPostCase['0']['Easycase']['id'];
            $caseTypeRep = $getPostCase['0']['Easycase']['type_id'];
            $casePriRep = !empty($getPostCase['0']['Easycase']['priority'])?$getPostCase['0']['Easycase']['priority']:0;
            //$caseNoRep = $getPostCase['0']['Easycase']['case_no'];
            $caseTitleRep = $getPostCase['0']['Easycase']['title'];
            $caseStoryPoint = (isset($getPostCase['0']['Easycase']['story_point']))?$getPostCase['0']['Easycase']['story_point']:0;
            $caseUniqId = $getPostCase['0']['Easycase']['uniq_id'];
            $caseUserDtls = $getPostCase['0']['Easycase']['user_id'];
            $actualDt = $getPostCase['0']['Easycase']['actual_dt_created'];
            $dt_started = ($getPostCase['0']['Easycase']['gantt_start_date'] != "NULL" && $getPostCase['0']['Easycase']['gantt_start_date'] != "0000-00-00 00:00:00" && $getPostCase['0']['Easycase']['gantt_start_date'] != "" && $getPostCase['0']['Easycase']['gantt_start_date'] != "1970-01-01 00:00:00")?$getPostCase['0']['Easycase']['gantt_start_date']:'';
            $caseMsgRep = $getPostCase['0']['Easycase']['message'];
            $caseUserAsgn = $getPostCase['0']['Easycase']['assign_to'];
            $caseFormat = $getPostCase['0']['Easycase']['format'];
            $caseRecurring = $getPostCase['0']['Easycase']['is_recurring'];
            //$caseProjectIdRep = $getPostCase['0']['Easycase']['project_id'];
            $caseDtCreated = $getPostCase['0']['Easycase']['dt_created'];
            $caseId = $getPostCase['0']['Easycase']['id'];

            $caseGitSync = $getPostCase['0']['Easycase']['git_sync'];
            $caseGitIssueId = $getPostCase['0']['Easycase']['git_issue_id'];
            $caseRealGitIssueId = $getPostCase['0']['Easycase']['real_git_issue_id'];
            #$caseDuDate = $getPostCase['0']['Easycase']['due_date'];
            $caseDuDate = $this->Tmzone->GetDateTime(SES_TIMEZONE, TZ_GMT, TZ_DST, TZ_CODE, $getPostCase['0']['Easycase']['due_date'], "datetime");

            $caseUpdBy = $getPostCase['0']['Easycase']['updated_by'];

            $curDateTz = $tz->GetDateTime(SES_TIMEZONE, TZ_GMT, TZ_DST, TZ_CODE, GMT_DATETIME, "datetime");
            $curdtT = $tz->GetDateTime(SES_TIMEZONE, TZ_GMT, TZ_DST, TZ_CODE, GMT_DATETIME, "date");
            $locDT1 = $tz->GetDateTime(SES_TIMEZONE, TZ_GMT, TZ_DST, TZ_CODE, $actualDt, "datetime");
            $created_on = $dt->facebook_style_date_time($locDT1, $curDateTz);
            $created_on_ttl = $dt->facebook_datetimestyle($locDT1);
            /* start date */
            $dt_startedTZ = $tz->GetDateTime(SES_TIMEZONE, TZ_GMT, TZ_DST, TZ_CODE, $dt_started, "datetime");
            $started_on = $dt->dateFormatOutputdateTime_day($dt_startedTZ, $curDateTz, 'week');
            $started_onT = $dt->facebook_datestyle($dt_startedTZ);
            $updTzDate = $tz->GetDateTime(SES_TIMEZONE, TZ_GMT, TZ_DST, TZ_CODE, $caseDtCreated, "datetime");
            //$last_updated = $dt->facebook_style_date_time($updTzDate,$curDateTz);
            $last_upddtm = $dt->dateFormatOutputdateTime_day($updTzDate, $curDateTz);
            $last_updated_ttl = $dt->facebook_datetimestyle($updTzDate);

            $getMlstnFromCsId = $this->Easycase->getMilestoneName($caseId, $ProjId);
            $getMlstnIdFromCsId = $this->Easycase->getMilestoneId($caseId, $ProjId);
            if ($getMlstnFromCsId) {
                $milestone = $getMlstnFromCsId;
            } else {
                $milestone = '';
            }
            if ($getMlstnIdFromCsId) {
                $milestoneId = $getMlstnIdFromCsId;
            } else {
                $milestoneId = '';
            }

            $protyCls = '';
            $protyTtl = '';
            if ($casePriRep == 0) {
                $protyCls = 'high_priority';
                $protyTtl = 'High';
            } elseif ($casePriRep == 1) {
                $protyCls = 'medium_priority';
                $protyTtl = 'Medium';
            } elseif ($casePriRep == 2) {
                $protyCls = 'low_priority';
                $protyTtl = 'Low';
            }

            //getting case_by
            $postuserArr = $cq->getUserDtlsArr($caseUserDtls, $allUserArr);
            $post_id = $postuserArr['User']['id'];
            $post_name = $postuserArr['User']['name'];
            $post_photo = $postuserArr['User']['photo'];
            $short_name = $postuserArr['User']['short_name'];

            if ($post_name && $caseUserDtls != SES_ID) {
                $case_by = $this->Format->shortLength($post_name, 20);
            } else {
                $case_by = "me";
            }

            //getting assignTo
            $assignTo = "";
            $assignUid = 0;
            if ($caseUserAsgn == SES_ID) {
                $assignUid = SES_ID;
            } else {
                $assignUid = $caseUserAsgn;
            }
            if ($caseUserAsgn == 0) {
                $assigned = "";
                $assignTo = "Unassigned";
                $asgnPic = "";
                $asgnEmail = "";
                $asgnPicBg = 'unassign';
            } else {
                $assigned = $cq->getUserDtlsArr($assignUid, $allUserArr);
                $assignTo = ucwords($frmt->formatText($assigned['User']['name'] . ' ' . $assigned['User']['last_name']));
                $asgnPic = $assigned['User']['photo'];
                $asgnPicBg = $this->User->getProfileBgColr($assigned['User']['id']);
                $asgnEmail = $assigned['User']['email'];
            }
            /* if($assignUid == SES_ID) {
              $assignTo = "me";
              }
              else {
              $assignTo = $this->Format->shortLength($assignTo,20);
              } */

            $csDuDtFmtT = $csDuDtFmt = $csDuDtFmt1 = '';
            $user_can_change = 0;
            if ($is_active == 1 && (($caseLegendRep == 1 || $caseLegendRep == 2 || $caseLegendRep == 4) || SES_TYPE == 1 || SES_TYPE == 2 || ($caseUserDtls == SES_ID))) {
                $user_can_change = 1;
            }
            if ($caseDuDate != "NULL" && $caseDuDate != "0000-00-00 00:00:00" && $caseDuDate != "" && $caseDuDate != "1970-01-01 00:00:00") {
                if ($caseTypeRep == 10) {
                    //$caseDueDate = $getdata['Easycase']['due_date'];
                    $csDuDtFmtT = $dt->facebook_datestyle($caseDuDate);
                    $csDuDtFmt = $dt->dateFormatOutputdateTime_day($caseDuDate, $curDateTz, 'week');
                    $csDuDtFmt1 = $dt->dateFormatOutputdateTime_day($caseDuDate, $curDateTz, 'week');
                    if ($user_can_change) {
                        $csDuDtFmt = '<div class="duedrp" style="cursor:pointer;" data-toggle="dropdown">' . $csDuDtFmt . '<i class="tsk-dtail-drop material-icons">&#xE5C5;</i></div>';
                    } else {
                        $csDuDtFmt = '<div style="">' . $csDuDtFmt . '</div>';
                    }
                    /* if (strpos($csDuDtFmt, 'Today'))
                      $csDuDtFmt = $csDuDtFmt;
                      else
                      $csDuDtFmt = $csDuDtFmt; */
                } else {
                    //$caseDueDate = $getdata['Easycase']['due_date'];
                    if ($caseDuDate < $curdtT) {
                        $csDuDtFmtT = $dt->facebook_datestyle($caseDuDate);
                        if ($user_can_change) {
                            $csDuDtFmt = '<div class="duedrp" style="cursor:pointer;" data-toggle="dropdown">' . $dt->dateFormatOutputdateTime_day($caseDuDate, $curDateTz, 'week') . '<i class="tsk-dtail-drop material-icons">&#xE5C5;</i></div>';
                            $csDuDtFmt1 = $dt->dateFormatOutputdateTime_day($caseDuDate, $curDateTz, 'week');
                        } else {
                            $csDuDtFmt = '<div style="">' . $dt->dateFormatOutputdateTime_day($caseDuDate, $curDateTz, 'week') . '</div>';
                            $csDuDtFmt1 = $dt->dateFormatOutputdateTime_day($caseDuDate, $curDateTz, 'week');
                        }
                    } else {
                        $csDuDtFmtT = $dt->facebook_datestyle($caseDuDate);
                        $csDuDtFmt = $dt->dateFormatOutputdateTime_day($caseDuDate, $curDateTz, 'week');
                        $csDuDtFmt1 = $dt->dateFormatOutputdateTime_day($caseDuDate, $curDateTz, 'week');
                        if (strpos($csDuDtFmt, 'Today') !== false) {
                            if ($user_can_change) {
                                $csDuDtFmt = '<div class="duedrp fl" data-toggle="dropdown">' . $csDuDtFmt . '<i class="tsk-dtail-drop material-icons">&#xE5C5;</i></div>';
                            } else {
                                $csDuDtFmt = '<div class="fl">' . $csDuDtFmt . '</div>';
                            }
                        } else {
                            if ($user_can_change) {
                                $csDuDtFmt = '<div class="duedrp fl" data-toggle="dropdown">' . $csDuDtFmt . '<i class="tsk-dtail-drop material-icons">&#xE5C5;</i></div>';
                            } else {
                                $csDuDtFmt = '<div class="fl">' . $csDuDtFmt . '</div>';
                            }
                        }
                    }
                }
            } else {
                $csDuDtFmtT = '';
                $csDuDtFmt = '';
                $csDuDtFmt1 = '';
            }
            $frmtduedt = date("D M d", strtotime($caseDuDate));
            //for mobile api
            $csGantDtFmt = '';
            if (isset($getPostCase['0']['Easycase']['gantt_start_date'])) {
                if ($getPostCase['0']['Easycase']['gantt_start_date'] != "NULL" && $getPostCase['0']['Easycase']['gantt_start_date'] != "0000-00-00" && $getPostCase['0']['Easycase']['gantt_start_date'] != "" && $getPostCase['0']['Easycase']['gantt_start_date'] != "1970-01-01") {
                    $csGantDtFmt = $dt->facebook_datestyle($getPostCase['0']['Easycase']['gantt_start_date']);
                } else {
                    $csGantDtFmt = '';
                }
            }
            //Title Caption start
            if ($caseUpdBy) {
                $getlastUid = $caseUpdBy;
            } else {
                $getlastUid = $caseUserDtls;
            }

            if ($getlastUid && $getlastUid != SES_ID) {
                $usrDtls = $cq->getUserDtlsArr($getlastUid, $allUserArr);
                $lstUpdBy = ucwords($frmt->formatText($usrDtls['User']['name'] . ' ' . $usrDtls['User']['last_name']));
            } else {
                $lstUpdBy = "me";
            }

            //getting case type image
            #$sql = "SELECT Type.* FROM types AS Type WHERE Type.company_id = 0 OR Type.company_id =" . SES_COMP;
            #$typeArr = $this->Type->query($sql);
            $typeArr = $this->Type->find('all', array('conditions' => array('Type.company_id' => array('0', SES_COMP)), 'order' => array('seq_order ASC', 'name ASC')));
            //$prjtype_name = $cq->getTypeArr($caseTypeRep,$GLOBALS['TYPE']);
            $prjtype_name = $cq->getTypeArr($caseTypeRep, $typeArr);

            //$name = $prjtype_name['Type']['name'];
            //$sname = $prjtype_name['Type']['short_name'];
            //$typImage = $this->Format->todo_typ($sname,$name);
            //getting case desc, img
            $countdata = count($sqlcaseactivity);
            $details = 0;
            if (trim(strip_tags(str_replace("&nbsp;", "", $caseMsgRep), '<img>')) != "") {
                $details = 1;
            }
            $caseFiles = 0;
            if ($caseFormat != 2) {
                $filesArr = $this->Easycase->getCaseFiles($caseAutoId);
                if (count($filesArr)) {
                    $caseFiles = 1;
                    foreach ($filesArr as $fkey => $getFiles) {
                        $caseFileName = $getFiles['CaseFile']['file'];
                        $caseFileUName = $getFiles['CaseFile']['upload_name'] != '' ? $getFiles['CaseFile']['upload_name'] : $getFiles['CaseFile']['file'];
                        $filesArr[$fkey]['CaseFile']['is_exist'] = 0;
                        if (trim($caseFileName)) {
                            $filesArr[$fkey]['CaseFile']['is_exist'] = 1; //$frmt->pub_file_exists(DIR_CASE_FILES_S3_FOLDER,$caseFileName);
                        }

                        //$filesArr[$fkey]['CaseFile']['file_shname'] = $frmt->shortLength($caseFileName,37);
                        //By Sunil
                        $downloadurl = $getFiles['CaseFile']['downloadurl'];
                        if (isset($downloadurl) && trim($downloadurl)) {
                            if (stristr($downloadurl, 'www.dropbox.com')) {
                                $filesArr[$fkey]['CaseFile']['format_file'] = 'db'; //'<img src="'.HTTP_IMAGES.'images/db16x16.png" alt="Dropbox" title="'.$caseFileName.'" width="16" height="16" border="0" style="border:0px solid #C3C3C3" />';//str_replace(array('"','\''), array('\'','"'), $frmt->imageType($caseFileName,25,10,1,$downloadurl));
                            } else {
                                $filesArr[$fkey]['CaseFile']['format_file'] = 'gd'; //'<img src="'.HTTP_IMAGES.'images/gd16x16.png" alt="Google" title="'.$caseFileName.'" width="16" height="16" border="0" style="border:0px solid #C3C3C3" />';//str_replace(array('"','\''), array('\'','"'), $frmt->imageType($caseFileName,25,10,1,$downloadurl));
                            }
                            //$filesArr[$fkey]['CaseFile']['fileurl'] = $downloadurl;
                        //$filesArr[$fkey]['CaseFile']['downloadurl'] = 1;
                        } else {
                            $filesArr[$fkey]['CaseFile']['format_file'] = substr(strrchr(strtolower($caseFileName), "."), 1); //str_replace(array('"','\''), array('\'','"'), $frmt->imageType($caseFileName,25,10,1));
                            $filesArr[$fkey]['CaseFile']['is_ImgFileExt'] = $frmt->validateImgFileExt($caseFileUName);
                            if ($filesArr[$fkey]['CaseFile']['is_ImgFileExt']) {
                                if (defined('USE_S3') && USE_S3 == 1) {
                                    $filesArr[$fkey]['CaseFile']['fileurl'] = $frmt->generateTemporaryURL(DIR_CASE_FILES_S3 . $caseFileUName);
                                    $s3 = new S3(awsAccessKey, awsSecretKey);
                                    $info = $s3->getObjectInfo(BUCKET_NAME, DIR_CASE_FILES_S3_FOLDER_THUMB . $caseFileUName, S3::ACL_PRIVATE);
                                } else {
                                    $filesArr[$fkey]['CaseFile']['fileurl'] = HTTP_CASE_FILES . $caseFileUName;
                                    if (file_exists(HTTP_CASE_FILES . 'thumb_' . $caseFileUName)) {
                                        $info = 1;
                                    }
                                }
                                if ($info) {
                                    if (defined('USE_S3') && USE_S3 == 1) {
                                        $filesArr[$fkey]['CaseFile']['fileurl_thumb'] = $frmt->generateTemporaryURL(DIR_CASE_FILES_S3 . "thumb/" . $caseFileUName);
                                    } else {
                                        $filesArr[$fkey]['CaseFile']['fileurl_thumb'] = HTTP_CASE_FILES . 'thumb_' . $caseFileUName;
                                    }
                                } else {
                                    $filesArr[$fkey]['CaseFile']['fileurl_thumb'] = $filesArr[$fkey]['CaseFile']['fileurl'];
                                }
                            } else {
                                $filesArr[$fkey]['CaseFile']['is_PdfFileExt'] = $frmt->validatePdfFileExt($caseFileUName);
                                if ($filesArr[$fkey]['CaseFile']['is_PdfFileExt']) {
                                    if (defined('USE_S3') && USE_S3 == 1) {
                                        $filesArr[$fkey]['CaseFile']['fileurl'] = $frmt->generateTemporaryURL(DIR_CASE_FILES_S3 . $caseFileUName);
                                    } else {
                                        $filesArr[$fkey]['CaseFile']['fileurl'] = HTTP_CASE_FILES . $caseFileUName;
                                    }
                                } else {
                                    if (defined('USE_S3') && USE_S3 == 1) {
                                        $filesArr[$fkey]['CaseFile']['fileurl'] = $frmt->generateTemporaryURL(DIR_CASE_FILES_S3 . $caseFileUName);
                                    } else {
                                        $filesArr[$fkey]['CaseFile']['fileurl'] = HTTP_CASE_FILES . $caseFileUName;
                                    }
                                }
                            }
                            $filesArr[$fkey]['CaseFile']['file_size'] = $frmt->getFileSize($getFiles['CaseFile']['file_size']);
                        }
                    }
                }
            }
            #pr($filesArr);exit;
            $allCaseFiles = $this->Easycase->getAllCaseFiles($ProjId, $curCaseNo);
            $allCaseFiles = $this->Easycase->formatFiles($allCaseFiles, $frmt, $tz, $dt);

            $allMilestones = $this->Easycase->getAllMilestones($ProjId);
            $displaySection = 1;
            if (!$details && !$caseFiles) { //!$details && !$caseFiles && !$countdata
                $displaySection = 0;
            }

            $displayCreated = 1;
            if (!$countdata) {
                $displayCreated = 0;
            }

            $pstFileExst = 0;
            if (trim($post_photo)) {
                $pstFileExst = 1; //$frmt->pub_file_exists(DIR_USER_PHOTOS_S3_FOLDER,$post_photo);
            }

            //get case message
            $caseMsgRep = $frmt->formatCms($caseMsgRep);
            $caseMsgRep = preg_replace('/<script.*>.*<\/script>/ims', '', $frmt->html_wordwrap($caseMsgRep, 80));

            //$locDT1 = $tz->GetDateTime(SES_TIMEZONE,TZ_GMT,TZ_DST,TZ_CODE,$actualDt,"datetime");
            if ($post_id == SES_ID) {
                $usrName = "me";
            } else {
                $usrName = $post_name;
            }
            $crtdBy = $this->Format->formatText($usrName);
            $frmtCrtdDt = $dt->dateFormatOutputdateTime_day($locDT1, $curDateTz);

            //get cases sort order
            $thread_sortorder = isset($_COOKIE['REPLY_SORT_ORDER']) ? trim($_COOKIE['REPLY_SORT_ORDER']) : 'DESC';

            if (isset($_COOKIE['REPLY_SORT_ORDER']) && (trim($_COOKIE['REPLY_SORT_ORDER']) == 'ASC')) {
                $ascStyle = 'style="display:inline"';
                $descStyle = 'style="display:none"';
            } else {
                $ascStyle = 'style="display:none"';
                $descStyle = 'style="display:inline"';
            }

            $usrCurArr = $cq->getUserDtlsArr(SES_ID, $allUserArr);
            if (!$usrCurArr) {
                $usrCurArr = $cq->getUserDtlsArr(SES_ID, $allMems);
            }
            $userPhoto = $usrCurArr['User']['photo'];
            //$usershort_name = $usrCurArr['User']['short_name'];
            $user_name = $usrCurArr['User']['name'] . ' ' . $usrCurArr['User']['last_name'];

            $usrFileExst = 0;
            if (trim($userPhoto)) {
                $usrFileExst = 1; //$frmt->pub_file_exists(DIR_USER_PHOTOS_S3_FOLDER,$userPhoto);
            }

            $userIds = $this->Easycase->getUserEmail($caseAutoId);
            $usrArr = array();
            if (count($userIds)) {
                foreach ($userIds as $usId) {
                    array_push($usrArr, $usId['CaseUserEmail']['user_id']);
                }
            }

            //get assign option
            if ($caseUserAsgn) {
                if ($caseUserAsgn == SES_ID) {
                    $checkAsgn = "me";
                } else {
                    $checkAsgn = "other";
                }
            }
            if (!$caseUserAsgn && $caseUserDtls == SES_ID) {
                $checkAsgn = "me";
            } elseif (!$caseUserAsgn) {
                $checkAsgn = "me";
            }

            //get last resolved
            $last_resolved = $last_resolved_ttl = '';
            if ($caseTypeRep != 10) { // Checks for easycase type update
                $lastResDT = $this->Easycase->getLastResolved($ProjId, $curCaseNo);
                if ($lastResDT) {
                    $resDT = $tz->GetDateTime(SES_TIMEZONE, TZ_GMT, TZ_DST, TZ_CODE, $lastResDT['Easycase']['dt_created'], "datetime");
                    //$last_resolved = $dt->facebook_style_date_time($resDT,$curDateTz);
                    $last_resolved = $dt->dateFormatOutputdateTime_day($resDT, $curDateTz);
                    $last_resolved_ttl = $dt->facebook_datetimestyle($resDT);
                }
            }

            $last_closed = $last_closed_ttl = '';
            if ($caseTypeRep != 10) { // Checks for easycase type update
                $lastClsDT = $this->Easycase->getLastClosed($ProjId, $curCaseNo);
                if ($lastClsDT) {
                    $clsDT = $tz->GetDateTime(SES_TIMEZONE, TZ_GMT, TZ_DST, TZ_CODE, $lastClsDT['Easycase']['dt_created'], "datetime");
                    //$last_resolved = $dt->facebook_style_date_time($resDT,$curDateTz);
                    $last_closed = $dt->dateFormatOutputdateTime_day($clsDT, $curDateTz);
                    $last_closed_ttl = $dt->facebook_datetimestyle($clsDT);
                }
            }

            //For due date selection
            $friday = date('Y-m-d', strtotime($curDateTz . "next Friday"));
            $monday = date('Y-m-d', strtotime($curDateTz . "next Monday"));
            $tomorrow = date('Y-m-d', strtotime($curDateTz . "+1 day"));

            $parent_task_id = !empty($getPostCase['0']['Easycase']['parent_task_id']) ? array($getPostCase['0']['Easycase']['id'] => $getPostCase['0']['Easycase']['parent_task_id']) : array();
            $related_tasks = !empty($parent_task_id) ? $this->Easycase->getSubTasks($parent_task_id, $curCaseId) : array();
            $fields = "LogTime.*,"
                . " DATE_FORMAT(LogTime.start_datetime,'%M %d %Y %H:%i:%s') AS start_datetime_v1, Project.uniq_id,"
                . "(SELECT CONCAT_WS(' ',User.name,User.last_name) FROM users AS `User` WHERE `User`.id=LogTime.user_id) AS user_name,"
                #. "(SELECT title FROM easycases AS `Easycase` WHERE `Easycase`.id=LogTime.task_id  LIMIT 1) AS task_name,"
                . "(SELECT `Type`.`name` FROM `types` AS `Type` WHERE `Type`.id=(SELECT type_id FROM easycases AS `Easycase` WHERE `Easycase`.id=LogTime.task_id  LIMIT 1) LIMIT 1) AS type_name";
            $this->LogTime->bindModel(array('belongsTo' => array('Project' => array('className' => 'Project','foreignKey' => 'project_id',))));
            if (SES_TYPE < 3 || $this->Format->isAllowed('View All Timelog', $roleAccess)) {
                $logtimes = $this->LogTime->find('all', array('conditions' => array("LogTime.project_id" => $prjid, "LogTime.task_id" => $curCaseId),
                'fields' => $fields,
                'order' => 'created DESC'
            ));
            } elseif (SES_TYPE == 3) {
                $logtimes = $this->LogTime->find('all', array('conditions' => array("LogTime.project_id" => $prjid, "LogTime.task_id" => $curCaseId, "LogTime.user_id" => SES_ID),
                'fields' => $fields,
                'order' => 'created DESC'
            ));
            }
            if (is_array($logtimes) && count($logtimes) > 0) {
                foreach ($logtimes as $key => $val) {
                    $logtimes[$key]['LogTime']['description'] = preg_replace('/<script.*>.*<\/script>/ims', '', $logtimes[$key]['LogTime']['description']);
                    $logtimes[$key]['LogTime']['description'] = $frmt->formatCms($logtimes[$key]['LogTime']['description']);
                    $logtimes[$key]['LogTime']['start_datetime'] = $this->Tmzone->GetDateTime(SES_TIMEZONE, TZ_GMT, TZ_DST, TZ_CODE, $logtimes[$key]['LogTime']['start_datetime'], "datetime");
                    $logtimes[$key]['LogTime']['end_datetime'] = $this->Tmzone->GetDateTime(SES_TIMEZONE, TZ_GMT, TZ_DST, TZ_CODE, $logtimes[$key]['LogTime']['end_datetime'], "datetime");

                    $logtimes[$key][0]['start_datetime_v1'] = date('M d Y H:i:s', strtotime($logtimes[$key]['LogTime']['start_datetime']));
                    $logtimes[$key]['LogTime']['start_time'] = date('H:i:s', strtotime($logtimes[$key]['LogTime']['start_datetime']));
                    $logtimes[$key]['LogTime']['end_time'] = date('H:i:s', strtotime($logtimes[$key]['LogTime']['end_datetime']));
                
                    if ($logtimes[$key]['LogTime']['timesheet_flag'] == 1) {
                        $logtimes[$key]['LogTime']['start_time'] = '--';
                        $logtimes[$key]['LogTime']['end_time'] = '--';
                    }
                }
            }
            #pr($logtimes);exit;
            $usrCndn = '';
            if (SES_TYPE == 3 && !$this->Format->isAllowed('View All Timelog', $roleAccess)) {
                $usrCndn = " AND user_id = " . SES_ID;
            }
            $cntlog = $this->LogTime->query('SELECT sum(total_hours) as secds,is_billable FROM log_times WHERE is_billable = 1 and project_id = "' . $prjid . '" ' . $usid . $st_dt . " AND task_id='" . $curCaseId . "'" . $usrCndn . " GROUP BY project_id  "
                . 'UNION '
                . 'SELECT sum(total_hours) as secds, is_billable FROM log_times WHERE is_billable = 0 and project_id ="' . $prjid . '" ' . $usid . $st_dt . " AND task_id='" . $curCaseId . "'" . $usrCndn . " GROUP BY project_id ");

            $thoursbillable = $cntlog[0][0]['is_billable'] == "1" ? $cntlog[0][0]['secds'] : 0;
            $thours = ($cntlog[0][0]['secds'] + $cntlog[1][0]['secds']);
            $totalHrs = ($thours);
            $hours = $thours;
            $nonbillableHrs = $totalHrs - $thoursbillable;

            $cntestmhrs = $this->Easycase->query("SELECT sum(estimated_hours) as hrs FROM easycases WHERE project_id = '" . $prjid . "' AND id='" . $curCaseId . "'");

            $sub_cnd = array('parent_task_id' => $curCaseId, 'project_id' => $prjid);
            if ($this->Auth->user('is_client') == 1) {
                $sub_cnd = array('parent_task_id' => $curCaseId, 'project_id' => $prjid, 'client_status !=' => 1);
            }
            // $subtasks = $this->Easycase->find('all', array(
            //     'fields' => array("Easycase.*", "IF((Easycase.assign_to =" . SES_ID . "),'Me',User.short_name) AS Assigned", "Project.uniq_id"),
            //     'conditions' => $sub_cnd,
            //     'joins' => array(
            //         array('table' => 'users', 'alias' => 'User', 'type' => 'LEFT', 'conditions' => array('Easycase.assign_to = User.id')),
            //         array('table' => 'projects', 'alias' => 'Project', 'type' => 'LEFT', 'conditions' => array('Project.id = Easycase.project_id')),
            //     ),
            //     'order' => 'Easycase.due_date DESC'
            // ));
            //. "LEFT JOIN projects AS Project ON Project.id=Easycase.project_id "
            //details file
            $customStatusByProject = array();
            $allCSByProj = $this->Format->getStatusByProject($prjid);
            if (isset($allCSByProj)) {
                foreach ($allCSByProj as $k=>$v) {
                    if (isset($v['StatusGroup']['CustomStatus'])) {
                        $customStatusByProject[$v['Project']['id']] = $v['StatusGroup']['CustomStatus'];
                    }
                }
            }
            // if (!empty($subtasks)) {
            // 	if($getCaseNoPjId['Easycase']['custom_status_id']){
            // 		$allCSByProj = $this->Format->getStatusByProject($prjid);
            // 		if(isset($allCSByProj)){
            // 			foreach($allCSByProj as $k=>$v){
            // 				if(isset($v['StatusGroup']['CustomStatus'])){
            // 				$customStatusByProject[$v['Project']['id']] = $v['StatusGroup']['CustomStatus'];
            // 				}
            // 			}
            // 		}
            // 		$Csts = ClassRegistry::init('CustomStatus');
            // 		//ref for other pages
            // 		$csts_arr = array();
            // 		$sts_ids = array_unique(Hash::extract($subtasks, '{n}.Easycase.custom_status_id'));
            // 		$csts_arr = $Csts->find('all',array('conditions'=>array('CustomStatus.id'=>$sts_ids)));
            // 		if($csts_arr){
            // 			$csts_arr = Hash::combine($csts_arr, '{n}.CustomStatus.id', '{n}.CustomStatus');
            // 		}
            // 	}
            //     foreach ($subtasks as $key => $val) {
            // 		if($val['Easycase']['custom_status_id']){
            // 			$subtasks[$key]['Easycase']['CustomStatus'] = $csts_arr[$val['Easycase']['custom_status_id']];
            // 		}
            //         $empty_dt_arr = array('0000-00-00 00:00:00', '0000-00-00', '1970-01-01 00:00:00', '1970-01-01', '');
            //         $subtasks[$key]['Easycase']['gantt_start_date'] = !in_array($val['Easycase']['gantt_start_date'], $empty_dt_arr) ? $this->Tmzone->GetDateTime(SES_TIMEZONE, TZ_GMT, TZ_DST, TZ_CODE, $val['Easycase']['gantt_start_date'], "datetime") : '';
            //         $subtasks[$key]['Easycase']['due_date'] = !in_array($val['Easycase']['due_date'], $empty_dt_arr) ? $this->Tmzone->GetDateTime(SES_TIMEZONE, TZ_GMT, TZ_DST, TZ_CODE, $val['Easycase']['due_date'], "datetime") : '';
            //         $subtasks[$key]['Easycase']['Assigned'] = $val[0]['Assigned'];
            //         $subtasks[$key]['Easycase']['proj_uniq_to'] = $val['Project']['uniq_id'];
            // 		$subtasks[$key]['Easycase']['title'] = $frmt->formatTitle($val['Easycase']['title']);
            //     }
            // }
            $logtimesArr = array('logs' => $logtimes,
            'task_id' => $curCaseId,
            'task_title' => $caseTitleRep,
            'task_uniqId' => $caseUniqId,
            'project_uniqId' => $projUniqId,
            'project_name' => $ProjName,
            'pgShLbl' => $pgShLbl,
            'csPage' => $csPage,
            'page_limit' => $page_limit,
            'caseCount' => $caseCount,
            'page' => 'taskdetails',
            'details' => array(
                'totalHrs' => $totalHrs,
                'billableHrs' => $thoursbillable,
                'nonbillableHrs' => $nonbillableHrs,
                'estimatedHrs' => $cntestmhrs[0][0]['hrs'],
        ));
            $allMems_num = $allMems;
            if (!empty($allMems)) {
                $allMems_num = array_values($allMems);
            }
            // Fetch custom field values of task
            $caseId = $getCaseNoPjId['Easycase']['id'];
            $this->loadModel('CustomFieldValue');
            $customFieldValues = $this->CustomFieldValue->getCaseCustomFields($caseId);
        
            // Fetch Advanced custom field values of task
            if ($caseId) {
                $getAllCustomFields = $this->CustomFieldValue->getAllCustomFieldByTaskIds((array)$caseId, SES_COMP);
            }
            //Fetch all advanced custome field
            $this->loadModel('CustomField');
            $resCaseProj['allCustomFields'] = $this->CustomField->getAllActiveCustomFields();
            $advCustomFieldValues = $this->CustomFieldValue->getAdvancedCustomFields($caseId);
            if ($advCustomFieldValues != []) {
                foreach ($advCustomFieldValues as $key => $value) {
                    if ($value['CustomField']['placeholder'] == 'taskDuration') {
                        $case_detail = [
                        'due_date' => $getCaseNoPjId['Easycase']['due_date'],
                        'gantt_start_date' => $getCaseNoPjId['Easycase']['gantt_start_date'],
                        'actual_dt_created' => $getCaseNoPjId['Easycase']['actual_dt_created']
                    ];
                        $advCustomFieldValues[$key]['CustomFieldValue']['value'] = $this->Easycase->getDurationOfTask($case_detail, $resCaseProj['allCustomFields'])[1]== 0 ? '--' : $this->Easycase->getDurationOfTask($case_detail, $resCaseProj['allCustomFields'])[1];
                    }
                    if ($value['CustomField']['placeholder'] == 'timeBalance') {
                        $case_detail = [
                        'due_date' => $getCaseNoPjId['Easycase']['due_date'],
                        'gantt_start_date' => $getCaseNoPjId['Easycase']['gantt_start_date'],
                        'actual_dt_created' => $getCaseNoPjId['Easycase']['actual_dt_created'],
                        'legend' => $getCaseNoPjId['Easycase']['legend']
                    ];
                        $advCustomFieldValues[$key]['CustomFieldValue']['value'] = $this->Easycase->getTimeBalance($case_detail, $resCaseProj['allCustomFields'])[1] == 0 ? '--' : $this->Easycase->getTimeBalance($case_detail, $resCaseProj['allCustomFields'])[1];
                    }
                }
            } else {
                $fetchActiveAdvCustomField = $this->CustomField->fetchActiveAdvCustomFieldAll(SES_COMP);
                // pr($fetchActiveAdvCustomField[0]['CustomField']);exit;
                $advCustomFieldValues = [];
                // pr($getCaseNoPjId);exit;
                foreach ($fetchActiveAdvCustomField as $key => $value) {
                    $advCustomFieldValues[$key]['CustomField'] = $value['CustomField'];
                    if ($value['CustomField']['placeholder'] == 'taskDuration') {
                        $case_detail = [
                        'due_date' => $getCaseNoPjId['Easycase']['due_date'],
                        'gantt_start_date' => $getCaseNoPjId['Easycase']['gantt_start_date'],
                        'actual_dt_created' => $getCaseNoPjId['Easycase']['actual_dt_created']
                    ];
                        $advCustomFieldValues[$key]['CustomFieldValue']['value'] = $this->Easycase->getDurationOfTask($case_detail, $resCaseProj['allCustomFields'])[1]== 0 ? '--' : $this->Easycase->getDurationOfTask($case_detail, $resCaseProj['allCustomFields'])[1];
                    }
                    if ($value['CustomField']['placeholder'] == 'timeBalance') {
                        $case_detail = [
                        'due_date' => $getCaseNoPjId['Easycase']['due_date'],
                        'gantt_start_date' => $getCaseNoPjId['Easycase']['gantt_start_date'],
                        'actual_dt_created' => $getCaseNoPjId['Easycase']['actual_dt_created'],
                        'legend' => $getCaseNoPjId['Easycase']['legend']
                    ];
                        $advCustomFieldValues[$key]['CustomFieldValue']['value'] = $this->Easycase->getTimeBalance($case_detail, $resCaseProj['allCustomFields'])[1] == 0 ? '--' : $this->Easycase->getTimeBalance($case_detail, $resCaseProj['allCustomFields'])[1];
                    }
                    if ($value['CustomField']['placeholder'] != 'timeBalance' && $value['CustomField']['placeholder'] != 'taskDuration') {
                        $advCustomFieldValues[$key]['CustomFieldValue']['value'] = '--';
                    }
                }
            }
            foreach ($advCustomFieldValues as $key => $val) {
                if ($advCustomFieldValues != []) {
                    if ($val['CustomField']['placeholder'] == 'taskCmplDate') {
                        $currdtT = $tz->GetDateTime(SES_TIMEZONE, TZ_GMT, TZ_DST, TZ_CODE, GMT_DATETIME, "date");
                        $locDT11 = $tz->GetDateTime(SES_TIMEZONE, TZ_GMT, TZ_DST, TZ_CODE, $val['CustomFieldValue']['value'], "datetime");
                        $advCustomFieldValues[$key]['CustomFieldValue']['value'] = ($dt->facebook_style_date_time($locDT11, $currdtT) != "") ?$dt->facebook_style_date_time($locDT11, $currdtT) : '--' ;
                    }
                }
            }
            // End
            
            $caseDetail = array();
            //$caseDetail['caseTitle'] = $this->Format->showlink($frmt->formatTitle($caseTitleRep));
            $caseDetail = array();
            $caseDetail['cmnt_count'] = $countall[0][0]['total'];
            $caseDetail['is_inactive_case'] = 0;
            $caseDetail['pageName'] = PAGE_NAME;
            $caseDetail['customStatusByProject'] = $customStatusByProject;
            $caseDetail['caseTitle'] = $frmt->formatTitle($caseTitleRep);
            $caseDetail['caseDataTitle'] = $frmt->formatTitle($caseTitleRep);
            $caseDetail['caseMobTitle'] = $caseTitleRep;
            $caseDetail['logtimes'] = $logtimesArr;
            $caseDetail['real_git_issue_id'] = $caseRealGitIssueId;
            $caseDetail['estimated_hours'] = $estimated_hours;
            $caseDetail['hours'] = $hours;
            $caseDetail['story_point'] = $getPostCase['0']['Easycase']['story_point'];
            $caseDetail['completedtask'] = $completedtask;
            $caseDetail['sqlcasedata'] = $sqlcasedata;
            $caseDetail['sqlcaseactivity'] = $sqlcaseactivity;
            $caseDetail['activitycountall'] = $activitycountall;
            $caseDetail['CSrepcount'] = $sqlcasedata1['CSrepcount'];
            //$caseDetail['projectid'] = $ProjId;
            $caseDetail['projUniqId'] = $projUniqId;
            $caseDetail['projId'] = $ProjId;
            $caseDetail['projName'] = $ProjName;
            $caseDetail['project_mothodology'] = $ProjMethodology;
            //$caseDetail['caseNo'] = $curCaseNo;
            //$caseDetail['allMems'] = $allMems; //commented due to json_encode sorting issue
            $caseDetail['allMems'] = $allMems_num;
            $caseDetail['isRecurring'] = $caseRecurring;
            //$caseDetail['spnajx'] = $spnajx;
            //$caseDetail['sorting'] = $sorting;
            //$caseDetail['details'] = $details;
            //$caseDetail['getPostCase'] = $getPostCase;
            //$caseDetail['count'] = $count;
            $caseDetail['total'] = $countall['0']['0']['total'];
            //$caseDetail['allUserArr'] = $userArr;
            $caseDetail['taskUsrs'] = $allUserArr;
            //$caseDetail['caseTypeArr'] = $GLOBALS['TYPE'];
            $caseDetail['srtdt'] = $started_on;
            $caseDetail['srtdtT'] = $started_onT;
            $caseDetail['crtdt'] = $created_on;
            $caseDetail['crtdtTtl'] = $created_on_ttl;
            //$caseDetail['lupdt'] = $last_updated;
            $caseDetail['lupdtTtl'] = $last_updated_ttl;
            $caseDetail['lupdtm'] = $last_upddtm;
            $caseDetail['mistn'] = ucfirst($milestone);
            $caseDetail['mistnId'] = $milestoneId;
            $caseDetail['protyCls'] = $protyCls;
            $caseDetail['protyTtl'] = $protyTtl;
            $caseDetail['pstNm'] = $post_name;
            $caseDetail['pstPic'] = $post_photo;
            $caseDetail['pstPicBg'] = $this->User->getProfileBgColr($postuserArr['User']['id']);
            $caseDetail['shtNm'] = $short_name;
            $caseDetail['csby'] = $case_by;
            $caseDetail['csAtId'] = $caseAutoId;
            $caseDetail['asgnUid'] = $assignUid;
            $caseDetail['asgnTo'] = $assignTo;
            $caseDetail['asgnPic'] = $asgnPic;
            $caseDetail['asgnPicBg'] = $asgnPicBg;
            $caseDetail['asgnEmail'] = $asgnEmail;
            //$caseDetail['csDuDt'] = $csDuDt;
            $caseDetail['csDuDtFmtT'] = $csDuDtFmtT;
            $caseDetail['csDuDtFmt'] = $csDuDtFmt;
            $caseDetail['csDuDtFmt1'] = $csDuDtFmt1;
            $caseDueDateInintial = $tz->GetDateTime(SES_TIMEZONE, TZ_GMT, TZ_DST, TZ_CODE, $getPostCase['0']['Easycase']['initial_due_date'], "datetime");
            if ($caseDueDateInintial != "NULL" && $caseDueDateInintial != "0000-00-00 00:00:00" && $caseDueDateInintial != "" && $caseDueDateInintial != "1970-01-01 00:00:00") {
                $csDuDtFmtInitial = $dt->dateFormatOutputdateTime_day($caseDueDateInintial, $curDateTz, 'week');
            } else {
                $csDuDtFmtInitial = '--';
            }
            $caseDetail['csDuDtFmtInitial'] = $csDuDtFmtInitial;
            if (intval($oauth_return)) {
                $caseDetail['gantt_start_date'] = $csGantDtFmt;
            }
            $caseDetail['taskTyp'] = $prjtype_name['Type'];
            $caseDetail['csLgndRep'] = $caseLegendRep;
            $caseDetail['dispSec'] = $displaySection;
            $caseDetail['dispCrtd'] = $displayCreated;
            $caseDetail['pstFileExst'] = $pstFileExst;
            $caseDetail['csUsrDtls'] = $caseUserDtls;
            $caseDetail['csUsrDtlsLog'] = SES_ID;
            $caseDetail['dtls'] = $details;
            $caseDetail['csFiles'] = $caseFiles;
            $caseDetail['filesArr'] = $filesArr;
            $caseDetail['cntdta'] = (count($sqlcasedata))? 2 : $countdata;
            $caseDetail['csMsgRep'] = $caseMsgRep;
            $caseDetail['csProjIdRep'] = $ProjId;
            $caseDetail['crtdBy'] = $crtdBy;
            $caseDetail['frmtCrtdDt'] = $frmtCrtdDt;
            $caseDetail['thrdStOrd'] = $thread_sortorder;
            $caseDetail['ascStyle'] = $ascStyle;
            $caseDetail['descStyle'] = $descStyle;
            $caseDetail['csUniqId'] = $caseUniqId;
            $caseDetail['usrPhoto'] = $userPhoto;
            $caseDetail['usrPhotoBg'] = $this->User->getProfileBgColr(SES_ID);
            //$caseDetail['usrShrtNm'] = $usershort_name;
            $caseDetail['usrName'] = $user_name;
            $caseDetail['usrFileExst'] = $usrFileExst;
            $caseDetail['duedate'] = $dt->due_dateDiff($caseDuDate, $curDateTz);
            $caseDetail['frmtdDuedt'] = $frmtduedt;
            $caseDetail['caseStatus'] = $caseStatus;

            //Custom field Values
            $caseDetail['customFieldDetails'] = array();
            if ($customFieldValues) {
                $caseDetail['customFieldDetails'] = $customFieldValues;
            }
            //Advanced Custom field Values
            $caseDetail['advancedCustomFields'] = array();
            if ($advCustomFieldValues) {
                $caseDetail['advancedCustomFields'] = $advCustomFieldValues;
            }
            $caseDetail['timeBalancRemainingValue'] = $timeBalanceRemaining;

            //Git Sync details
            $caseDetail['git_sync'] = $caseGitSync;
            $caseDetail['sync_name']='';
            // if($fetchGitData){
            //     $caseDetail['pull_requests']= $fetchGitData['pull_requests'];
            //     $caseDetail['sync_name']= $fetchGitData['sync_name'];
            //     $caseDetail['repo_name']= $fetchGitData['repo_name'];
            //     if($fetchGitData['git_commits']){
            //         $caseDetail['git_commits']= $fetchGitData['git_commits'];
            //     }
            //     if($fetchGitData['git_branches']){
            //         $caseDetail['git_branches']= $fetchGitData['git_branches'];
            //     }
            //     if($fetchGitData['issue_details']){
            //         $caseDetail['issue_details']= $fetchGitData['issue_details'];
            //     }
            //     if($fetchGitData['issue_events']){
            //         $caseDetail['issue_events']= $fetchGitData['issue_events'];
            //     }
            //     if($fetchGitData['git_repoDetails']){
            //         $caseDetail['git_repoDetails']= $fetchGitData['git_repoDetails'];
            //     }
            // }
            //hidden fields value
            $caseDetail['csNoRep'] = $curCaseNo;
            $caseDetail['csTypRep'] = $caseTypeRep;
            $caseDetail['csPriRep'] = $casePriRep;

            $caseDetail['usrArr'] = $usrArr;
            $caseDetail['checkAsgn'] = $checkAsgn;
            $caseDetail['csUsrAsgn'] = $caseUserAsgn;
            $caseDetail['lstUpdBy'] = $lstUpdBy;
            $caseDetail['lstRes'] = $last_resolved;
            $caseDetail['lstRes_ttl'] = $last_resolved_ttl;
            $caseDetail['lstCls'] = $last_closed;
            $caseDetail['lstCls_ttl'] = $last_closed_ttl;
            // $caseDetail['all_files'] = $allCaseFiles;
            $caseDetail['all_milestones'] = $allMilestones;
            $caseDetail['is_active'] = $is_active;
            $caseDetail['client_status'] = $caseClientStatus;
            $caseDetail['link_parent'] = $curCaseId;

            $getLinkParentDetails = $this->getParentLinkTasks($curCaseId, $projUniqId, $usrArr);
            $caseDetail['link_parent_details'] = $getLinkParentDetails;
        
            $caseDetail['link_parent_title_dtl'] = $this->getLinkParentTitle($getLinkParentDetails['parentEasycaseId'], $frmt);
            //For due date selection
            $caseDetail['mdyCurCrtd'] = date('m/d/Y', strtotime($curDateTz));
            $caseDetail['mdyFriday'] = date('m/d/Y', strtotime($friday));
            $caseDetail['mdyMonday'] = date('m/d/Y', strtotime($monday));
            $caseDetail['mdyTomorrow'] = date('m/d/Y', strtotime($tomorrow));

            /**Get task milestone history**/
            //for setting assign to
            $last = $caseDetail['sqlcasedata'][0];
            $record = end($allUserArr);
            if (SES_ID == $caseDetail['csUsrDtls'] && empty($caseDetail['sqlcasedata'])) {
                $caseDetail['Assign_to_user'] = $getPostCase['0']['Easycase']['assign_to'];
            } else {
                $caseDetail['Assign_to_user'] = isset($last['Easycase']['user_id']) ? $last['Easycase']['user_id'] : $record['User']['id'];
            }
            // Start fetch the Favourite Task in EasycaseFavourite table
            $EasycaseFavourite = ClassRegistry::init('EasycaseFavourite');
            $favouriteconditions = array('EasycaseFavourite.easycase_id'=>$getPostCase['0']['Easycase']['id'],'EasycaseFavourite.project_id'=>$getPostCase['0']['Easycase']['project_id'],'EasycaseFavourite.company_id'=>SES_COMP,'EasycaseFavourite.user_id'=>SES_ID);
            $easycase_favourite = $EasycaseFavourite->find('first', array('fields'=>array('EasycaseFavourite.id'),'conditions'=>$favouriteconditions));
            if (!empty($easycase_favourite['EasycaseFavourite']['id'])) {
                $caseDetail['isFavourite'] = 1;
                $caseDetail['favouriteColor'] = '#FFDC77';
            } else {
                $caseDetail['isFavourite'] = 0;
                $caseDetail['favouriteColor'] = '#888888';
            }
            // End fetch the Favourite Task in EasycaseFavourite table
            $caseDetail['Case_mislestone_id'] = '';
            $caseDetail['csid'] = $getPostCase['0']['Easycase']['id'];
            $caseDetail['depends'] = $getPostCase['0']['Easycase']['depends'];
            $caseDetail['children'] = $getPostCase['0']['Easycase']['children'];
            #$caseDetail['action_allowed'] = $this->task_dependency($getPostCase['0']['Easycase']['id']);
            $caseDetail['related_tasks'] = $related_tasks;
            // $caseDetail['subtasks'] = $subtasks;

            #$mls_cases = $this->Easycase->query("select uniq_id from milestones where id IN (select milestone_id from easycase_milestones where easycase_id =(select id from easycases where uniq_id = '" . $caseUniqId . "' and istype=1))");
            $mls_cases = $this->Easycase->query("SELECT uniq_id FROM milestones WHERE id IN (SELECT milestone_id FROM easycase_milestones WHERE easycase_id =$curCaseId)");
            if ($mls_cases) {
                $caseDetail['Case_mislestone_id'] = $mls_cases[0]['milestones']['uniq_id'];
            }
            #pr($getPostCase['0']['Easycase']);exit;
            $cust_sts_list = array();
            if ($getPostCase['0']['Easycase']['custom_status_id']) {
                $cust_sts_list = $this->Format->getCustomTaskStatus($getProjId['Project']['status_group_id']);
            }
            $caseDetail['cust_sts_list'] = $cust_sts_list;
            $caseDetail['custom_status_id'] = $getPostCase['0']['Easycase']['custom_status_id'];
            $caseDetail['is_zoom_set'] = 0;
            $caseDetail['is_zoom_connect'] = 0;
            //get all reminders
            // $caseDetail['reminders'] = array();
            // if($curCaseId){
            // 	$this->loadModel('CaseReminder');
            // 	$AllremDtl = $this->CaseReminder->find('all', array('conditions' => array('CaseReminder.company_id' => SES_COMP, 'CaseReminder.easycase_id' => $curCaseId, 'CaseReminder.project_id' => $prjid)));
            // 	if (!empty($AllremDtl)) {
            // 		foreach ($AllremDtl as $key => $val) {
            // 			$caseDetail['reminders'][$key]['CaseReminder']['id'] = $val['CaseReminder']['id'];
            // 			$empty_dt_arr = array('0000-00-00 00:00:00', '0000-00-00', '1970-01-01 00:00:00', '1970-01-01', '');
            //             $caseDetail['reminders'][$key]['CaseReminder']['reminder_datetime'] = !in_array($val['CaseReminder']['reminder_datetime'], $empty_dt_arr) ? $this->Tmzone->GetDateTime(SES_TIMEZONE, TZ_GMT, TZ_DST, TZ_CODE, $val['CaseReminder']['reminder_datetime'], "datetime") : '';
                        
            // 			if($caseDetail['reminders'][$key]['CaseReminder']['reminder_datetime'] != ''){
            // 			$caseDetail['reminders'][$key]['CaseReminder']['reminder_datetime'] = date("M jS Y, g:i a", strtotime($caseDetail['reminders'][$key]['CaseReminder']['reminder_datetime']));
            //             }
            //             if($caseDetail['reminders'][$key]['CaseReminder']['reminder_datetime'] != ''){
            //                 $caseDetail['reminders'][$key]['CaseReminder']['reminder_datetime'] = date("M jS Y, g:i a", strtotime($caseDetail['reminders'][$key]['CaseReminder']['reminder_datetime']));
            //                 $pr = explode(',', $caseDetail['reminders'][$key]['CaseReminder']['reminder_datetime']);
            //                 $caseDetail['reminders'][$key]['CaseReminder']['date'] = $pr[0];
            //                 $caseDetail['reminders'][$key]['CaseReminder']['time'] = $pr[1];
            //                 }else{
            //                     $caseDetail['reminders'][$key]['CaseReminder']['date'] = '';
            //                     $caseDetail['reminders'][$key]['CaseReminder']['time'] = '';
            //                 }
            // 			$caseDetail['reminders'][$key]['CaseReminder']['comment'] = $frmt->formatCms($val['CaseReminder']['comment']);
            //             $caseDetail['reminders'][$key]['CaseReminder']['user_ids'] = $this->Format->getUserTags($val['CaseReminder']['user_ids']);
            //             $caseDetail['reminders'][$key]['CaseReminder']['user_id'] = $this->Format->getUserTag($val['CaseReminder']['user_ids']);
            // 		}
            //     }
                
            // 	//$response['projUniqId'] = $projUniqId;
            //     //$response['csUniqId'] = $caseUniqId;
            //      /* Set condition whether the user is allowed to see Advanced custom fields */
            //     $allowAdvancedCustomField = $this->Format->isAllowedAdvancedCustomFields();
            //     $caseDetail['allowAdvancedCustomField']= $allowAdvancedCustomField;
                
            //     /* end */
            // 	//get all checklists
            // 	$caseDetail['checklists'] = array();
            //     $this->loadModel('CheckList');
                
            //     $AllchklstDtl = $this->CheckList->find('all', array('conditions' => array('CheckList.company_id' => SES_COMP, 'CheckList.easycase_id' => $curCaseId, 'CheckList.project_id' => $prjid),'order'=>array('CheckList.id'=>'DESC')));
            // 	if (!empty($AllchklstDtl)) {
            // 		foreach ($AllchklstDtl as $key => $val) {
            // 			$caseDetail['checklists'][$key] = $val;
            // 			$caseDetail['checklists'][$key]['CheckList']['title'] = $frmt->formatTitle($val['CheckList']['title']);
            // 			//$caseDetail['checklists'][$key]['CheckList']['title'] = $val['CheckList']['title'];
            // 		}
            // 	}
            // }
            // $caseDetail['checklists'] = array();
            //     $this->loadModel('CheckList');
                
            //     $AllchklstDtl = $this->CheckList->find('all', array('conditions' => array('CheckList.company_id' => SES_COMP, 'CheckList.easycase_id' => $curCaseId, 'CheckList.project_id' => $prjid),'order'=>array('CheckList.id'=>'DESC')));
            // 	if (!empty($AllchklstDtl)) {
            // 		foreach ($AllchklstDtl as $key => $val) {
            // 			$caseDetail['checklists'][$key] = $val;
            // 			$caseDetail['checklists'][$key]['CheckList']['title'] = $frmt->formatTitle($val['CheckList']['title']);
            // 			//$caseDetail['checklists'][$key]['CheckList']['title'] = $val['CheckList']['title'];
            // 		}
            // 	}
            $allowAdvancedCustomField = $this->Format->isAllowedAdvancedCustomFields();
            $caseDetail['allowAdvancedCustomField']= $allowAdvancedCustomField;
                
            // $caseDetail['Defects'] = $this->ajaXGetTaskDefects($curCaseId);
            $checkd_all = $this->Easycase->getCountofChecklist($getPostCase['0']['Easycase']['id'], $ProjId);
            $caseDetail['allCheckList'] = $checkd_all['all'];
            $caseDetail['allCheckedChecklist'] = $checkd_all['checked'];
            if (intval($oauth_return)) {
                return $caseDetail;
            } elseif (!empty($inactiveFlag)) {
                return $caseDetail;
            } else {
                $this->set('caseDetail', json_encode($caseDetail));
            }
        }
    }
    
        
    public function ajaXFetchAllActivity()
    {
        $ProjId = null;
        $ProjName = null;
        $curCaseNo = null;
        $curCaseId = null;
        $view = new View($this);
        $frmt = $view->loadHelper('Format');
        $caseUniqId = $this->params->data['caseUniqId'];
        $limit = $this->params->data['limit'];
        ######## get case number from case uniq ID ################
        $getCaseNoPjId = $this->Easycase->getEasycase($caseUniqId);
        if ($getCaseNoPjId) {
            $curCaseNo = $getCaseNoPjId['Easycase']['case_no'];
            $curCaseId = $getCaseNoPjId['Easycase']['id'];
            $curCaseUId = $getCaseNoPjId['Easycase']['uniq_id'];
            $prjid = $getCaseNoPjId['Easycase']['project_id'];
            $is_active = (intval($getCaseNoPjId['Easycase']['isactive'])) ? 1 : 0;
        } else {
            //No task with uniq_id $caseUniqId
            die;
        }
        $cond1 = array(
            'conditions' => array('ProjectUser.user_id' => SES_ID, 'ProjectUser.company_id' => SES_COMP, 'Project.id' => $prjid),
            'fields' => array('DISTINCT Project.id', 'Project.uniq_id', 'Project.name', 'Project.project_methodology_id', 'Project.status_group_id')
        );
        $this->ProjectUser->bindModel(array('belongsTo' => array('Project')));
        $getProjId = $this->ProjectUser->find('first', $cond1);
        if ($getProjId) {
            $ProjId = $getProjId['Project']['id'];
            $projUniqId = $getProjId['Project']['uniq_id'];
            $ProjName = $getProjId['Project']['name'];
            $ProjMethodology = $getProjId['Project']['project_methodology_id'];
        } else {
            //Session user not assigned the project $prjid
            die;
        }
        $sqlcaseactivity = array();
        
        $sqlcaseactivity = $this->Easycase->query("SELECT SQL_CALC_FOUND_ROWS Easycase.* FROM easycases as Easycase  LEFT JOIN case_files as CaseFile ON CaseFile.easycase_id=Easycase.id WHERE Easycase.project_id='" . $ProjId . "' AND  Easycase.case_no=" . $curCaseNo . "  AND  ((CaseFile.id IS NULL AND (Easycase.message IS NULL || Easycase.message = '')) OR Easycase.legend ='6')  GROUP BY Easycase.id ORDER BY Easycase.id DESC"); //AND Easycase.istype='2'
        $activitycountall =count($sqlcaseactivity);
           
        if ($activitycountall > 10) {
            $alimit1 = 10;
            $sqlcaseactivity = $this->Easycase->query("SELECT  Easycase.* FROM easycases as Easycase  LEFT JOIN case_files as CaseFile ON CaseFile.easycase_id=Easycase.id WHERE Easycase.project_id='" . $ProjId . "' AND  Easycase.case_no=" . $curCaseNo . " AND  ((CaseFile.id IS NULL AND (Easycase.message IS NULL || Easycase.message = ''))  OR Easycase.legend ='6')  GROUP BY Easycase.id ORDER BY Easycase.id DESC LIMIT 0,$alimit1"); //Easycase.istype='2'
            if (isset($limit) && $limit == "more") {
                $sqlcaseactivity = $this->Easycase->query("SELECT SQL_CALC_FOUND_ROWS Easycase.* FROM easycases as Easycase  LEFT JOIN case_files as CaseFile ON CaseFile.easycase_id=Easycase.id WHERE Easycase.project_id='" . $ProjId . "' AND  Easycase.case_no=" . $curCaseNo . "  AND  ((CaseFile.id IS NULL AND (Easycase.message IS NULL || Easycase.message = '')) OR Easycase.legend ='6')  GROUP BY Easycase.id ORDER BY Easycase.id DESC"); //AND Easycase.istype='2'
            } elseif (isset($limit) && $limit == "less") {
                $sqlcaseactivity = $this->Easycase->query("SELECT  Easycase.* FROM easycases as Easycase  LEFT JOIN case_files as CaseFile ON CaseFile.easycase_id=Easycase.id WHERE Easycase.project_id='" . $ProjId . "' AND  Easycase.case_no=" . $curCaseNo . " AND  ((CaseFile.id IS NULL AND (Easycase.message IS NULL || Easycase.message = ''))  OR Easycase.legend ='6')  GROUP BY Easycase.id ORDER BY Easycase.id DESC LIMIT 0,$alimit1"); //Easycase.istype='2'
            }
        }
            

        $view = new View($this);
        $tz = $view->loadHelper('Tmzone');
        $dt = $view->loadHelper('Datetime');
        $cq = $view->loadHelper('Casequery');
        $frmt = $view->loadHelper('Format');
        $getcompletedtask = $this->Easycase->query("SELECT completed_task  FROM easycases as Easycase WHERE project_id='" . $ProjId . "' AND case_no=" . $curCaseNo . "  and completed_task != 0 AND reply_type=6 ORDER BY id DESC LIMIT 1");
        $completedtask = $getcompletedtask[0]['Easycase']['completed_task'];
        //pr($completedtask); exit;
        $usrDtlsAll = $this->Easycase->getTaskUser($ProjId, $curCaseNo);
        $allUserArr = array();
        foreach ($usrDtlsAll as $ud) {
            $allUserArr[$ud['User']['id']] = $ud;
            $allUserArr[$ud['User']['id']]['User']['prflBg'] = $this->User->getProfileBgColr($ud['User']['id']);
        }
        
        $sqlcaseactivity1 = $this->Easycase->formatReplies($sqlcaseactivity, $allUserArr, $frmt, $cq, $tz, $dt, $completedtask);
        $sqlcaseactivity = $sqlcaseactivity1['sqlcasedata'];
        
        $caseDetail = array();
        $caseDetail['sqlcaseactivity'] = $sqlcaseactivity;
        $caseDetail['activitycountall'] = $activitycountall;
        $caseDetail['csUniqId'] = $caseUniqId;
        // pr($caseUniqId); exit;
        echo json_encode($caseDetail);
        exit;
    }
    
    public function ajaXFetchAllFiles()
    {
        $is_active_case = 0;
        $ProjId = null;
        $ProjName = null;
        $curCaseNo = null;
        $curCaseId = null;
        $caseUniqId = $this->params->data['caseUniqId'];
        $is_active_case = $this->params->data['is_active_case'];
        ######## get case number from case uniq ID ################
        $getCaseNoPjId = $this->Easycase->getEasycase($caseUniqId);
        if ($getCaseNoPjId) {
            $curCaseNo = $getCaseNoPjId['Easycase']['case_no'];
            $curCaseId = $getCaseNoPjId['Easycase']['id'];
            $curCaseUId = $getCaseNoPjId['Easycase']['uniq_id'];
            $prjid = $getCaseNoPjId['Easycase']['project_id'];
            $is_active = (intval($getCaseNoPjId['Easycase']['isactive'])) ? 1 : 0;
        } else {
            //No task with uniq_id $caseUniqId
            die;
        }
        $cond1 = array(
            'conditions' => array('ProjectUser.user_id' => SES_ID, 'ProjectUser.company_id' => SES_COMP, 'Project.id' => $prjid),
            'fields' => array('DISTINCT Project.id', 'Project.uniq_id', 'Project.name', 'Project.project_methodology_id', 'Project.status_group_id')
        );
        $this->ProjectUser->bindModel(array('belongsTo' => array('Project')));
        $getProjId = $this->ProjectUser->find('first', $cond1);
        if ($getProjId) {
            $ProjId = $getProjId['Project']['id'];
            $projUniqId = $getProjId['Project']['uniq_id'];
            $ProjName = $getProjId['Project']['name'];
            $ProjMethodology = $getProjId['Project']['project_methodology_id'];
        } else {
            //Session user not assigned the project $prjid
            die;
        }
        $view = new View($this);
        $tz = $view->loadHelper('Tmzone');
        $dt = $view->loadHelper('Datetime');
        $cq = $view->loadHelper('Casequery');
        $frmt = $view->loadHelper('Format');
        //getting case_by

        $getPostCase = array();
        $getPostCase = $this->Easycase->query("SELECT * FROM easycases as Easycase WHERE project_id='" . $ProjId . "' AND case_no=" . $curCaseNo . " AND istype='1' ");
        $caseAutoId = $getPostCase['0']['Easycase']['id'];
        $caseUserDtls = $getPostCase['0']['Easycase']['user_id'];
        ######## get easycase case members ################
        $usrDtlsAll = $this->Easycase->getTaskUser($ProjId, $curCaseNo);
        $allUserArr = array();
        foreach ($usrDtlsAll as $ud) {
            $allUserArr[$ud['User']['id']] = $ud;
            $allUserArr[$ud['User']['id']]['User']['prflBg'] = $this->User->getProfileBgColr($ud['User']['id']);
        }
        ######## End get easycase case members ################
        $postuserArr = $cq->getUserDtlsArr($caseUserDtls, $allUserArr);
        $post_id = $postuserArr['User']['id'];
        $post_name = $postuserArr['User']['name'];
        $post_photo = $postuserArr['User']['photo'];
        $short_name = $postuserArr['User']['short_name'];

        if ($post_name && $caseUserDtls != SES_ID) {
            $case_by = $this->Format->shortLength($post_name, 20);
        } else {
            $case_by = "me";
        }
        $allCaseFiles = $this->Easycase->getAllCaseFiles($ProjId, $curCaseNo);
        $allCaseFiles = $this->Easycase->formatFiles($allCaseFiles, $frmt, $tz, $dt);
        $filesArr = $this->Easycase->getCaseFiles($caseAutoId);
        if (count($filesArr)) {
            $caseFiles = 1;
            foreach ($filesArr as $fkey => $getFiles) {
                $caseFileName = $getFiles['CaseFile']['file'];
                $caseFileUName = $getFiles['CaseFile']['upload_name'] != '' ? $getFiles['CaseFile']['upload_name'] : $getFiles['CaseFile']['file'];
                $filesArr[$fkey]['CaseFile']['is_exist'] = 0;
                if (trim($caseFileName)) {
                    $filesArr[$fkey]['CaseFile']['is_exist'] = 1; //$frmt->pub_file_exists(DIR_CASE_FILES_S3_FOLDER,$caseFileName);
                }

                //$filesArr[$fkey]['CaseFile']['file_shname'] = $frmt->shortLength($caseFileName,37);
                //By Sunil
                $downloadurl = $getFiles['CaseFile']['downloadurl'];
                if (isset($downloadurl) && trim($downloadurl)) {
                    if (stristr($downloadurl, 'www.dropbox.com')) {
                        $filesArr[$fkey]['CaseFile']['format_file'] = 'db'; //'<img src="'.HTTP_IMAGES.'images/db16x16.png" alt="Dropbox" title="'.$caseFileName.'" width="16" height="16" border="0" style="border:0px solid #C3C3C3" />';//str_replace(array('"','\''), array('\'','"'), $frmt->imageType($caseFileName,25,10,1,$downloadurl));
                    } else {
                        $filesArr[$fkey]['CaseFile']['format_file'] = 'gd'; //'<img src="'.HTTP_IMAGES.'images/gd16x16.png" alt="Google" title="'.$caseFileName.'" width="16" height="16" border="0" style="border:0px solid #C3C3C3" />';//str_replace(array('"','\''), array('\'','"'), $frmt->imageType($caseFileName,25,10,1,$downloadurl));
                    }
                    //$filesArr[$fkey]['CaseFile']['fileurl'] = $downloadurl;
                    //$filesArr[$fkey]['CaseFile']['downloadurl'] = 1;
                } else {
                    $filesArr[$fkey]['CaseFile']['format_file'] = substr(strrchr(strtolower($caseFileName), "."), 1); //str_replace(array('"','\''), array('\'','"'), $frmt->imageType($caseFileName,25,10,1));
                    $filesArr[$fkey]['CaseFile']['is_ImgFileExt'] = $frmt->validateImgFileExt($caseFileUName);
                    if ($filesArr[$fkey]['CaseFile']['is_ImgFileExt']) {
                        if (defined('USE_S3') && USE_S3 == 1) {
                            $filesArr[$fkey]['CaseFile']['fileurl'] = $frmt->generateTemporaryURL(DIR_CASE_FILES_S3 . $caseFileUName);
                            $s3 = new S3(awsAccessKey, awsSecretKey);
                            $info = $s3->getObjectInfo(BUCKET_NAME, DIR_CASE_FILES_S3_FOLDER_THUMB . $caseFileUName, S3::ACL_PRIVATE);
                        } else {
                            $filesArr[$fkey]['CaseFile']['fileurl'] = HTTP_CASE_FILES . $caseFileUName;
                            if (file_exists(HTTP_CASE_FILES . 'thumb_' . $caseFileUName)) {
                                $info = 1;
                            }
                        }
                        if ($info) {
                            if (defined('USE_S3') && USE_S3 == 1) {
                                $filesArr[$fkey]['CaseFile']['fileurl_thumb'] = $frmt->generateTemporaryURL(DIR_CASE_FILES_S3 . "thumb/" . $caseFileUName);
                            } else {
                                $filesArr[$fkey]['CaseFile']['fileurl_thumb'] = HTTP_CASE_FILES . 'thumb_' . $caseFileUName;
                            }
                        } else {
                            $filesArr[$fkey]['CaseFile']['fileurl_thumb'] = $filesArr[$fkey]['CaseFile']['fileurl'];
                        }
                    } else {
                        $filesArr[$fkey]['CaseFile']['is_PdfFileExt'] = $frmt->validatePdfFileExt($caseFileUName);
                        if ($filesArr[$fkey]['CaseFile']['is_PdfFileExt']) {
                            if (defined('USE_S3') && USE_S3 == 1) {
                                $filesArr[$fkey]['CaseFile']['fileurl'] = $frmt->generateTemporaryURL(DIR_CASE_FILES_S3 . $caseFileUName);
                            } else {
                                $filesArr[$fkey]['CaseFile']['fileurl'] = HTTP_CASE_FILES . $caseFileUName;
                            }
                        }
                    }
                    $filesArr[$fkey]['CaseFile']['file_size'] = $frmt->getFileSize($getFiles['CaseFile']['file_size']);
                }
            }
        }
        $caseDetail = array();
        $caseDetail['all_new_files'] = $allCaseFiles;
        $caseDetail['csNoRep'] = $curCaseNo;
        $caseDetail['csby'] = $case_by;
        $caseDetail['csAtId'] = $caseAutoId;
        $caseDetail['filesArr'] = $filesArr;
        $caseDetail["is_inactive_case"] = $is_active_case;
        $caseDetail["is_active"] = $is_active;
        
        echo json_encode($caseDetail);
        exit;
        // $this->set('caseDetail', json_encode($caseDetail));
    }
    public function ajaxGetGithubData()
    {
        $this->Github = $this->Components->load('Github');
        $fetchGitData = $this->Github->getGitDetails(SES_ID, SES_COMP, $this->params->data['git_issue_id'], $this->params->data['project_id']);
        
        if ($fetchGitData) {
            $last_update = date("Y-m-d H:i:s", strtotime($fetchGitData['git_repoDetails']['updated_at']));
            $view = new View($this);
            $tz = $view->loadHelper('Tmzone');
            $dt = $view->loadHelper('Datetime');
            $curDateTz = $tz->GetDateTime(SES_TIMEZONE, TZ_GMT, TZ_DST, TZ_CODE, GMT_DATETIME, "datetime");
            $updTzDate = $tz->GetDateTime(SES_TIMEZONE, TZ_GMT, TZ_DST, TZ_CODE, $last_update, "datetime");
            $last_upddtm = $dt->dateFormatOutputdateTime_day($updTzDate, $curDateTz);
            $fetchGitData['git_repoDetails']['updated_at'] = $last_upddtm;
            if ($fetchGitData['git_commits'][0]['commit']) {
                foreach ($fetchGitData['git_commits'] as $key => $val) {
                    $last_commit_update = date("Y-m-d H:i:s", strtotime($fetchGitData['git_commits'][$key]['commit']['committer']['date']));
                    $updTzDateCommit = $tz->GetDateTime(SES_TIMEZONE, TZ_GMT, TZ_DST, TZ_CODE, $last_commit_update, "datetime");
                    $last_upddtm_commit = $dt->dateFormatOutputdateTime_day($updTzDateCommit, $curDateTz);
                    $fetchGitData['git_commits'][$key]['commit']['committer']['date'] = $last_upddtm_commit;
                }
            }
            if ($fetchGitData['pull_requests'][0]['updated_at']) {
                foreach ($fetchGitData['pull_requests'] as $key => $val) {
                    $last_pull_update = date("Y-m-d H:i:s", strtotime($fetchGitData['pull_requests'][$key]['updated_at']));
                    $updTzDatePull = $tz->GetDateTime(SES_TIMEZONE, TZ_GMT, TZ_DST, TZ_CODE, $last_pull_update, "datetime");
                    $last_upddtm_pull = $dt->dateFormatOutputdateTime_day($updTzDatePull, $curDateTz);
                    $fetchGitData['pull_requests'][$key]['updated_at'] = $last_upddtm_pull;
                }
            }
            $gitDetail['pull_requests']= $fetchGitData['pull_requests'];
            $gitDetail['sync_name']= $fetchGitData['sync_name'];
            $gitDetail['repo_name']= $fetchGitData['repo_name'];
            if ($fetchGitData['git_commits']) {
                $gitDetail['git_commits']= $fetchGitData['git_commits'];
            }
            if ($fetchGitData['git_branches']) {
                $gitDetail['git_branches']= $fetchGitData['git_branches'];
            }
            if ($fetchGitData['issue_details']) {
                $gitDetail['issue_details']= $fetchGitData['issue_details'];
            }
            if ($fetchGitData['issue_events']) {
                $gitDetail['issue_events']= $fetchGitData['issue_events'];
            }
            if ($fetchGitData['git_repoDetails']) {
                $gitDetail['git_repoDetails']= $fetchGitData['git_repoDetails'];
            }
        }
        echo json_encode($gitDetail);
        exit;
    }
    public function ajaXGetTaskDefects($task_id)
    {
        $defect_dtls = $this->Easycase->getTaskDefect($task_id);
        return  $defect_dtls;
    }
    public function ajaXGetTaskDefectsCount($task_id)
    {
        $defect_dtls = $this->Easycase->getTotalCloseDefectCount($task_id);
        return  $defect_dtls;
    }
    public function case_reply()
    {
        $this->layout = 'ajax';
        $details = 0;
        $caseId = $this->params->data['id'];
        $type = $this->params->data['type'];
        if (isset($this->params->data['sortorder'])) {
            $sort_order = $this->params->data['sortorder'];
        } elseif (isset($_COOKIE['REPLY_SORT_ORDER'])) {
            $sort_order = $_COOKIE['REPLY_SORT_ORDER'];
        } else {
            $sort_order = 'DESC';
        }
        if (isset($this->params->data['sortorder'])) {
            setcookie('REPLY_SORT_ORDER', $sort_order, COOKIE_REM, '/', DOMAIN_COOKIE, false, false);
        }
        $limit1 = isset($this->params->data['rem_cases']) ? $this->params->data['rem_cases'] : 0;
        if ($type == "post") {
            if ($sort_order == 'ASC') {
                $sorting = $sort_order . " LIMIT " . $limit1 . ",10";
            } else {
                $sorting = $sort_order . " LIMIT 0,10";
            }
        } else {
            $sorting = $sort_order;
        }
        ######## get case number from case uniq ID ################
        $cond2 = array(
            'conditions' => array('Easycase.isactive' => 1, 'Easycase.id' => $caseId),
            'fields' => array('DISTINCT Easycase.case_no', 'Easycase.uniq_id', 'Easycase.project_id', 'Easycase.isactive')
        );
        $getCaseNo = $this->Easycase->find('first', $cond2);
        if (count($getCaseNo)) {
            $curCaseNo = $getCaseNo['Easycase']['case_no'];
            $caseUniqId = $getCaseNo['Easycase']['uniq_id'];
            $ProjId = $getCaseNo['Easycase']['project_id'];
            $is_active = (intval($getCaseNo['Easycase']['isactive'])) ? 1 : 0;
        }

        $sqlcasedata = array();
        $getPostCase = array();
        if ($ProjId && $curCaseNo) {
            ######## get all cases
            $query = "SELECT * FROM easycases as Easycase LEFT JOIN case_files as CaseFile ON CaseFile.easycase_id=Easycase.id  WHERE Easycase.project_id='" . $ProjId . "' AND Easycase.case_no=" . $curCaseNo . " AND Easycase.istype='2' AND Easycase.legend !='6' AND ((CaseFile.comment_id = 0 AND CaseFile.isactive = 1) OR Easycase.message != '') GROUP BY Easycase.id ORDER BY Easycase.dt_created " . $sorting;
            $sqlcasedata = $this->Easycase->query($query);
        }

        ######## get easycase case members ################
        //$usrDtlsAll = $this->Easycase->query("SELECT DISTINCT User.id, User.name, User.email, User.istype,User.email,User.short_name,User.photo FROM users as User,easycases as Easycase WHERE (Easycase.user_id=User.id || Easycase.updated_by=User.id || Easycase.assign_to=User.id) AND Easycase.project_id='".$ProjId."' AND Easycase.case_no='".$curCaseNo."' AND Easycase.isactive='1' AND Easycase.istype IN('1','2') ORDER BY User.short_name");

        $usrDtlsAll = $this->Easycase->getTaskUser($ProjId, $curCaseNo);
        $userArr = array();
        foreach ($usrDtlsAll as $ud) {
            $userArr[$ud['User']['id']] = $ud;
        }
        ######## End get easycase case members ################
        //For json Feed
        $view = new View($this);
        $tz = $view->loadHelper('Tmzone');
        $dt = $view->loadHelper('Datetime');
        $cq = $view->loadHelper('Casequery');
        $frmt = $view->loadHelper('Format');
        $sqlcasedata = $this->Easycase->formatReplies($sqlcasedata, $userArr, $frmt, $cq, $tz, $dt);

        $replyDetail = array();
        $replyDetail['sqlcasedata'] = $sqlcasedata['sqlcasedata'];
        $replyDetail['csAtId'] = $caseId;
        $replyDetail['is_active'] = $is_active;
        $this->set('replyDetail', json_encode($replyDetail));
    }

    
		public function ajax_case_menu()
    {
        $this->layout = 'ajax';
        $proj_id = null;
        $pageload = 0;
        $prjUniqIdCsMenu = $this->params->data['projUniq'];
        $pageload = $this->params->data['pageload'];
        $page = $this->params->data['page'];

        //if(!$prjUniqIdCsMenu)die;

        if ($_COOKIE['CURRENT_FILTER']) {
            $filters = $_COOKIE['CURRENT_FILTER'];
        } else {
            $filters = '';
        }
        if (isset($this->params->data['filters']) && $this->params->data['filters'] == "files") {
            $filters = $this->params->data['filters'];
        } elseif (isset($this->params->data['filters']) && $this->params->data['filters'] == "cases") {
            $filters = $this->params->data['filters'];
        }
        if (isset($this->params->data['case'])) {
            $case = $this->params->data['case'];
        } else {
            $case = "";
        }
        $qry = '';
        $searchcase = '';
        $sf = array();
        //Filter Condition added in Menu filters counters
        if ($page == 'dashboard') {
            $projUniq = $this->params->data['projUniq'];
            $curProjId = $this->params->data['priFil'];
            $caseMenuFilters = $this->params->data['caseMenuFilters'];
            $caseStatus = $this->params->data['caseStatus']; // Filter by Status(legend)
            $priorityFil = $this->params->data['priFil']; // Filter by Priority
            $caseTypes = $this->params->data['caseTypes']; // Filter by case Types
            $caseUserId = $this->params->data['caseMember']; // Filter by Member
            $caseComment = $this->params->data['caseComment']; // Filter by Member
            $caseAssignTo = $this->params->data['caseAssignTo']; // Filter by AssignTo
            $caseSrch = $this->params->data['caseSearch']; // Search by keyword
            @$case_srch = $this->params->data['case_srch'];
            @$case_date = urldecode($this->params->data['case_date']);
            @$case_duedate = $this->params->data['case_due_date'];
            $milestoneIds = $this->params->data['milestoneIds'];
            $checktype = $this->params->data['checktype'];
            ######### Filter by Case Types ##########
            if ($caseTypes && $caseTypes != "all") {
                $qry.= $this->Format->typeFilter($caseTypes);
            }
            ######### Filter by Priority ##########
            if ($priorityFil && $priorityFil != "all") {
                $qry.= $this->Format->priorityFilter($priorityFil, $caseTypes);
            }
            ######### Filter by Status ##########
            if ($caseStatus && $caseStatus != 'all') {
                $qry.= $this->Format->statusFilter($caseStatus);
            }

            ######### Filter by Member ##########
            if ($caseUserId && $caseUserId != "all") {
                $qry.= $this->Format->memberFilter($caseUserId);
            }
            ######### Filter by Member ##########
            if ($caseComment && $caseComment != "all") {
                $qry.= $this->Format->commentFilter($caseComment, $curProjId, $case_date);
            }
            ######### Filter by AssignTo ##########		/* Added by smruti on 08082013*/
            if ($caseAssignTo && $caseAssignTo != "all" && $caseAssignTo != 'unassigned') {
                $qry.= $this->Format->assigntoFilter($caseAssignTo);
            } elseif ($caseAssignTo && $caseAssignTo == 'unassigned') {
                $qry.= " AND Easycase.assign_to=0";
            }
            ######### Search by KeyWord ##########
            $searchcase = "";
            if (trim(urldecode($caseSrch)) && (trim($case_srch) == "")) {
                $qry = "";
                $searchcase = $this->Format->caseKeywordSearch($caseSrch, 'full');
            }
            if (trim(urldecode($case_srch)) != "") {
                $qry = "";
                $searchcase = "AND (Easycase.case_no = '$case_srch')";
            }

            if (trim(urldecode($caseSrch))) {
                if ((substr($caseSrch, 0, 1)) == '#') {
                    $qry = "";
                    $tmp = explode("#", $caseSrch);
                    $casno = trim($tmp['1']);
                    $searchcase = " AND (Easycase.case_no = '" . $casno . "')";
                }
            }

            if (trim($case_date) != "") {
                $frmTz = '+00:00';
                $toTz = $this->Tmzone->getGmtTz(TZ_GMT, TZ_DST);
                $GMT_DATE =$this->Tmzone->GetDateTime(SES_TIMEZONE, TZ_GMT, TZ_DST, TZ_CODE, GMT_DATETIME, "datetime");
                
                if (trim($case_date) == 'one') {
                    $one_date = date('Y-m-d H:i:s', strtotime($GMT_DATE) - 3600);
                    $qry.= " AND CONVERT_TZ(Easycase.dt_created,'".$frmTz."','".$toTz."') >='" . $one_date . "'";
                } elseif (trim($case_date) == '24') {
                    $day_date = date("Y-m-d H:i:s", strtotime($GMT_DATE. " -1 day"));
                    $qry.= " AND CONVERT_TZ(Easycase.dt_created,'".$frmTz."','".$toTz."') >='" . $day_date . "'";
                } elseif (trim($case_date) == 'week') {
                    $week_date = date("Y-m-d H:i:s", strtotime($GMT_DATE . " -1 week"));
                    $qry.= " AND CONVERT_TZ(Easycase.dt_created,'".$frmTz."','".$toTz."') >='" . $week_date . "'";
                } elseif (trim($case_date) == 'month') {
                    $month_date = date("Y-m-d H:i:s", strtotime($GMT_DATE . " -1 month"));
                    $qry.= " AND CONVERT_TZ(Easycase.dt_created,'".$frmTz."','".$toTz."') >='" . $month_date . "'";
                } elseif (trim($case_date) == 'year') {
                    $year_date = date("Y-m-d H:i:s", strtotime($GMT_DATE . " -1 year"));
                    $qry.= " AND CONVERT_TZ(Easycase.dt_created,'".$frmTz."','".$toTz."') >='" . $year_date . "'";
                } elseif (strstr(trim($case_date), ":")) {
                    //echo $case_date;exit;
                    $ar_dt = explode(":", trim($case_date));
                    $frm_dt = $ar_dt['0'];
                    $to_dt = $ar_dt['1'];
                    //$qry.= " AND DATE(Easycase.dt_created) >= '" . date('Y-m-d H:i:s', strtotime($frm_dt)) . "' AND DATE(Easycase.dt_created) <= '" . date('Y-m-d H:i:s', strtotime($to_dt)) . "'";
                    $qry.= " AND DATE(CONVERT_TZ(Easycase.dt_created,'".$frmTz."','".$toTz."')) >= '" . date('Y-m-d', strtotime($frm_dt)) . "' AND DATE(CONVERT_TZ(Easycase.dt_created,'".$frmTz."','".$toTz."')) <= '" . date('Y-m-d', strtotime($to_dt)) . "'";
                }
            }
            if (trim($case_duedate) != "") {
                $frmTz = '+00:00';
                $toTz = $this->Tmzone->getGmtTz(TZ_GMT, TZ_DST);
                $GMT_DATE =$this->Tmzone->GetDateTime(SES_TIMEZONE, TZ_GMT, TZ_DST, TZ_CODE, GMT_DATETIME, "date");
                if (trim($case_duedate) == '24') {
                    $day_date = date("Y-m-d H:i:s", strtotime(date("Y-m-d H:i:s", strtotime(date("Y-m-d H:i:s"))) . " +1 day"));
                    $qry.= " AND (DATE(CONVERT_TZ(Easycase.due_date,'".$frmTz."','".$toTz."')) ='" . $GMT_DATE . "')";
                } elseif (trim($case_duedate) == 'overdue') {
                    $week_date = date("Y-m-d H:i:s", strtotime(date("Y-m-d H:i:s", strtotime(date("Y-m-d H:i:s"))) . " +1 week"));
                    $qry .= " AND ( DATE(CONVERT_TZ(Easycase.due_date,'".$frmTz."','".$toTz."')) <'" . $GMT_DATE . "') AND (Easycase.legend !=3)";
                } elseif (strstr(trim($case_duedate), ":")) {
                    //echo $case_duedate;exit;
                    $ar_dt = explode(":", trim($case_duedate));
                    $frm_dt = $ar_dt['0'];
                    $to_dt = $ar_dt['1'];
                    $qry.= " AND DATE(CONVERT_TZ(Easycase.due_date,'".$frmTz."','".$toTz."')) >= '" . date('Y-m-d', strtotime($frm_dt)) . "' AND DATE(CONVERT_TZ(Easycase.due_date,'".$frmTz."','".$toTz."')) <= '" . date('Y-m-d', strtotime($to_dt)) . "'";
                }
            }
            /*             * * Call search filter controller **** */
            $this->loadModel("SearchFilter");
            $sf = $this->SearchFilter->getFiltersWithCounts($this->params->data);
            $checkDefault = $this->SearchFilter->getDefault();
            /*             * **END******* */
        }
        //End

        $assignToMe = 0;
        $delegateTo = 0;
        $caseNew = 0;
        $caseFiles = 0;
        $caseHighPri = 0; // $latest = 0;

        $clt_sql = 1;
        if ($this->Auth->user('is_client') == 1) {
            $clt_sql = "((Easycase.client_status = " . $this->Auth->user('is_client') . " AND Easycase.user_id = " . $this->Auth->user('id') . ") OR Easycase.client_status != " . $this->Auth->user('is_client') . ")";
        }

        //echo $prjUniqIdCsMenu;
        if ($prjUniqIdCsMenu != 'all' && trim($prjUniqIdCsMenu)) {
            $this->loadModel('Project');
            $this->Project->recursive = -1;
            $projArr = $this->Project->find('first', array('conditions' => array('Project.uniq_id' => $prjUniqIdCsMenu, 'Project.isactive' => 1, 'Project.company_id' => SES_COMP), 'fields' => array('Project.id')));
            if (count($projArr)) {
                $proj_id = $projArr['Project']['id'];
            }
            if (!$proj_id) {
                die;
            }
            //AssigntoMe
            //$assignToMe = $this->Easycase->query('SELECT COUNT(DISTINCT Easycase.id) AS asigntocnt FROM easycases AS Easycase WHERE Easycase.isactive=1 AND Easycase.istype=1 AND ' . $clt_sql . ' AND Easycase.project_id=' . $proj_id . ' AND (Easycase.assign_to=' . SES_ID . ' OR ( Easycase.assign_to=0 AND Easycase.user_id=' . SES_ID . ')) ' . $qry . ' ' . $searchcase);
            $assignToMe = $this->Easycase->query('SELECT COUNT(DISTINCT Easycase.id) AS asigntocnt FROM easycases AS Easycase WHERE Easycase.isactive=1 AND Easycase.istype=1 AND ' . $clt_sql . ' AND Easycase.project_id=' . $proj_id . ' AND (Easycase.assign_to=' . SES_ID . ' ) ' . $qry . ' ' . $searchcase);
            $assignToMeOrg = $this->Easycase->query('SELECT COUNT(DISTINCT Easycase.id) AS asigntocnt FROM easycases AS Easycase WHERE Easycase.isactive=1 AND Easycase.istype=1 AND ' . $clt_sql . ' AND Easycase.project_id=' . $proj_id . ' AND (Easycase.assign_to=' . SES_ID . ' ) ' . ' ' . $searchcase);
            $openedTasksArr = $this->Easycase->query('SELECT COUNT(DISTINCT Easycase.id) AS openedcnt FROM easycases AS Easycase WHERE Easycase.isactive=1 AND ' . $clt_sql . ' AND Easycase.istype=1 AND Easycase.project_id=' . $proj_id . ' AND (Easycase.legend=1 OR Easycase.legend=2 OR Easycase.legend=5 OR Easycase.legend=4) AND Easycase.type_id !=10 ' . $qry . ' ' . $searchcase);
            $openedTasksArrOrg = $this->Easycase->query('SELECT COUNT(DISTINCT Easycase.id) AS openedcnt FROM easycases AS Easycase WHERE Easycase.isactive=1 AND ' . $clt_sql . ' AND Easycase.istype=1 AND Easycase.project_id=' . $proj_id . ' AND (Easycase.legend=1 OR Easycase.legend=2 OR Easycase.legend=5 OR Easycase.legend=4) AND Easycase.type_id !=10 ' . ' ' . $searchcase);
            $closedTasksArr = $this->Easycase->query('SELECT COUNT(DISTINCT Easycase.id) AS closedcnt FROM easycases AS Easycase WHERE Easycase.isactive=1 AND ' . $clt_sql . ' AND Easycase.istype=1 AND Easycase.project_id=' . $proj_id . ' AND Easycase.legend=3 AND Easycase.type_id !=10 ' . $qry . ' ' . $searchcase);
            $closedTasksArrOrg = $this->Easycase->query('SELECT COUNT(DISTINCT Easycase.id) AS closedcnt FROM easycases AS Easycase WHERE Easycase.isactive=1 AND ' . $clt_sql . ' AND Easycase.istype=1 AND Easycase.project_id=' . $proj_id . ' AND Easycase.legend=3 AND Easycase.type_id !=10 ' . ' ' . $searchcase);
            $openedTasks = $openedTasksArr[0][0]['openedcnt'];
            $closedTasks = $closedTasksArr[0][0]['closedcnt'];
            $openedTasksOrg = $openedTasksArrOrg[0][0]['openedcnt'];
            $closedTasksOrg = $closedTasksArrOrg[0][0]['closedcnt'];
            //			$assignToMe = $this->Easycase->find('count', array('conditions' => array(
            //			"OR" => array(
            //			'AND' => array(
            //			'Easycase.isactive'   => 1,
            //			'Easycase.istype'     => 1,
            //			'Easycase.project_id' => $proj_id,
            //			'Easycase.assign_to' =>SES_ID
            //			),
            //			array(
            //			'Easycase.isactive'  => 1,
            //			'Easycase.istype'    => 1,
            //			'Easycase.project_id' => $proj_id,
            //			'Easycase.assign_to' => '0',
            //			'Easycase.user_id' => SES_ID))
            //			),'fields' => 'DISTINCT Easycase.id'));
//
            $delegateToArr = $this->Easycase->query("SELECT COUNT(DISTINCT Easycase.id) as total FROM `easycases` AS `Easycase` WHERE Easycase.isactive='1' AND " . $clt_sql . " AND Easycase.istype='1' AND Easycase.project_id='$proj_id' AND Easycase.assign_to!='0' AND Easycase.assign_to!='" . SES_ID . "' AND Easycase.user_id='" . SES_ID . "' " . $qry . " " . $searchcase);
            $delegateTo = $delegateToArr[0][0]['total'];
            $delegateToArrOrg = $this->Easycase->query("SELECT COUNT(DISTINCT Easycase.id) as total FROM `easycases` AS `Easycase` WHERE Easycase.isactive='1' AND " . $clt_sql . " AND Easycase.istype='1' AND Easycase.project_id='$proj_id' AND Easycase.assign_to!='0' AND Easycase.assign_to!='" . SES_ID . "' AND Easycase.user_id='" . SES_ID . "' " . " " . $searchcase);
            $delegateToOrg = $delegateToArrOrg[0][0]['total'];

            //$before = date('Y-m-d H:i:s',strtotime(GMT_DATETIME."-2 day"));
            //$latest = $this->Easycase->find('count', array('conditions'=>array('Easycase.isactive' => 1,'Easycase.istype' => 1,'Easycase.project_id' => $proj_id,'Easycase.dt_created >'=> $before,'Easycase.dt_created <='=> GMT_DATETIME),'fields' => 'DISTINCT Easycase.id'));

            /* if($latest == 0){
              $rest=$this->Easycase->query("SELECT dt_created FROM easycases WHERE project_id ='".$proj_id."' ORDER BY dt_created DESC LIMIT 0 , 1");
              @$sdate=explode(" ",@$rest[0]['easycases']['dt_created']);
              $before=@$sdate[0];
              $latest = $this->Easycase->find('count', array('conditions'=>array('Easycase.isactive' => 1,'Easycase.istype' => 1,'Easycase.project_id' => $proj_id,'Easycase.dt_created >='=> $before,'Easycase.dt_created <='=> GMT_DATETIME),'fields' => 'DISTINCT Easycase.id'));
              } */
            $caseCount = $this->Easycase->query("SELECT COUNT(CaseFile.id) as count FROM easycases as Easycase,case_files as CaseFile WHERE Easycase.id=CaseFile.easycase_id AND Easycase.isactive='1' AND " . $clt_sql . " AND Easycase.project_id='" . $proj_id . "' AND CaseFile.isactive='1'");
            $caseFiles = $caseCount[0][0]['count'];

            //$caseNew = $this->Easycase->find('count', array('conditions'=>array('Easycase.isactive' => 1,'Easycase.istype' => 1,'Easycase.project_id' => $proj_id),'fields' => 'DISTINCT Easycase.id'));
            $caseNew = $this->Easycase->query('SELECT COUNT(DISTINCT Easycase.id) AS newcount FROM easycases Easycase WHERE Easycase.isactive=1 AND ' . $clt_sql . ' AND Easycase.istype= 1 AND Easycase.project_id =' . $proj_id . ' ' . $qry . $searchcase);
            $caseNewOrg = $this->Easycase->query('SELECT COUNT(DISTINCT Easycase.id) AS newcount FROM easycases Easycase WHERE Easycase.isactive=1 AND ' . $clt_sql . ' AND Easycase.istype= 1 AND Easycase.project_id =' . $proj_id . ' ' . $searchcase);
            //$closeCase = $this->Easycase->find('count', array('conditions'=>array('Easycase.isactive' => 1,'Easycase.legend' => 3,'Easycase.type_id !=' => 10,'Easycase.istype' => 1,'Easycase.project_id' => $proj_id),'fields' => 'DISTINCT Easycase.id'));
            //$bugCase = $this->Easycase->find('count', array('conditions'=>array('Easycase.isactive' => 1,'Easycase.type_id' => 1,'Easycase.istype' => 1,'Easycase.project_id' => $proj_id),'fields' => 'DISTINCT Easycase.id'));
            //$cur_dt = date('Y-m-d', strtotime(GMT_DATETIME));
            $cur_dt = date('Y-m-d H:i:s', strtotime(GMT_DATETIME));
            $ovrdueCase = $this->Easycase->query('SELECT COUNT(DISTINCT Easycase.id) as ovrduecount FROM easycases Easycase '
                    . 'WHERE Easycase.isactive=1 AND ' . $clt_sql . ' '
                    . 'AND Easycase.due_date !="" AND Easycase.due_date != "0000-00-00 00:00:00" AND Easycase.due_date !="1970-01-01 00:00:00" AND DATE(Easycase.due_date) < "' . GMT_DATE . '" '
                    . 'AND (Easycase.legend !=3) AND Easycase.istype= 1 AND Easycase.project_id=' . $proj_id . " " . $qry . $searchcase);
            $ovrdueCaseOrg = $this->Easycase->query('SELECT COUNT(DISTINCT Easycase.id) as ovrduecount FROM easycases Easycase '
                    . 'WHERE Easycase.isactive=1 AND ' . $clt_sql . ' '
                    . 'AND Easycase.due_date !="" AND Easycase.due_date != "0000-00-00 00:00:00" AND Easycase.due_date !="1970-01-01 00:00:00" AND DATE(Easycase.due_date) < "' . GMT_DATE . '" '
                    . 'AND (Easycase.legend !=3) AND Easycase.istype= 1 AND Easycase.project_id=' . $proj_id . " " . $searchcase);
            //$caseHighPri = $this->Easycase->find('count', array('conditions'=>array('Easycase.isactive' => 1,'Easycase.istype' => 1,'Easycase.project_id' => $proj_id,'Easycase.priority 	' => 0),'fields' => 'DISTINCT Easycase.id'));
            $caseHighPri = $this->Easycase->find('count', array('conditions' => array('Easycase.isactive' => 1, 'Easycase.istype' => 1, 'Easycase.project_id' => $proj_id, 'Easycase.priority 	' => 0), 'fields' => 'DISTINCT Easycase.id'));
            $caseHighPri = $this->Easycase->query('SELECT COUNT(DISTINCT Easycase.id) as hpcount FROM easycases Easycase WHERE Easycase.isactive = 1 AND ' . $clt_sql . ' AND Easycase.istype= 1 AND Easycase.project_id =' . $proj_id . ' AND Easycase.priority = 0 AND Easycase.type_id != 10 ' . $qry . $searchcase);
            $caseHighPriOrg = $this->Easycase->query('SELECT COUNT(DISTINCT Easycase.id) as hpcount FROM easycases Easycase WHERE Easycase.isactive = 1 AND ' . $clt_sql . ' AND Easycase.istype= 1 AND Easycase.project_id =' . $proj_id . ' AND Easycase.priority = 0 AND Easycase.type_id != 10 ' . $searchcase);

            //$this->loadModel('Milestone');
            //$milestone = $this->Milestone->query("SELECT COUNT(DISTINCT m.id) AS total FROM milestones AS m,easycase_milestones AS em WHERE m.project_id='".$proj_id."' and em.milestone_id=m.id and em.project_id='".$proj_id."' and m.company_id='".SES_COMP."' and m.isactive='1' order by m.end_date ASC,m.title ASC");
        }

        if ($prjUniqIdCsMenu == 'all') {
            $cond = array('conditions' => array('ProjectUser.user_id' => SES_ID, 'Project.isactive' => 1, 'Project.company_id' => SES_COMP), 'fields' => array('DISTINCT Project.id'), 'order' => array('ProjectUser.dt_visited DESC'));

            $ProjectUser = ClassRegistry::init('ProjectUser');
            $ProjectUser->unbindModel(array('belongsTo' => array('User')));
            $ProjectUser->bindModel(array('belongsTo' => array('Project')));
            $allProjArr = $ProjectUser->find('all', $cond);

            $ids = array();
            $idlist = '';
            foreach ($allProjArr as $csid) {
                $idlist .='\'' . $csid['Project']['id'] . '\',';
                array_push($ids, $csid['Project']['id']);
            }
            $idlist = trim($idlist, ',');
            $n_pid_cond = 1;
            $n_pid_cond_t = 1;
            if ($idlist != '') {
                $n_pid_cond = 'Easycase.project_id IN(' . $idlist . ')';
                $n_pid_cond_t = "Easycase.project_id IN(" . $idlist . ")";
            }
            //print $idlist;exit;
            $cur_dt = date('Y-m-d', strtotime(GMT_DATETIME));
            //$assignToMe = $this->Easycase->query('SELECT COUNT(DISTINCT Easycase.id) AS asigntocnt FROM easycases AS Easycase WHERE Easycase.isactive=1 AND ' . $clt_sql . ' AND Easycase.istype=1 AND Easycase.due_date !="" AND Easycase.due_date !="0000-00-00" AND Easycase.due_date !="1970-01-01" AND Easycase.due_date < "' . $cur_dt . '" AND (Easycase.legend =1 || Easycase.legend=2)  AND Easycase.project_id IN(' . $idlist . ') AND (Easycase.assign_to=' . SES_ID . ' OR ( Easycase.assign_to=0 AND Easycase.user_id=' . SES_ID . ')) ' . $qry . ' ' . $searchcase);


            $assignToMe = $this->Easycase->query('SELECT COUNT(DISTINCT Easycase.id) AS asigntocnt FROM easycases AS Easycase WHERE Easycase.isactive=1 AND ' . $clt_sql . ' AND Easycase.istype=1 AND ' . $n_pid_cond . ' AND (Easycase.assign_to=' . SES_ID . ' ) ' . $qry . ' ' . $searchcase);
            $assignToMeOrg = $this->Easycase->query('SELECT COUNT(DISTINCT Easycase.id) AS asigntocnt FROM easycases AS Easycase WHERE Easycase.isactive=1 AND ' . $clt_sql . ' AND Easycase.istype=1 AND ' . $n_pid_cond . ' AND (Easycase.assign_to=' . SES_ID . ' )  ' . $searchcase);
            $openedTasksArr = $this->Easycase->query('SELECT COUNT(DISTINCT Easycase.id) AS openedcnt FROM easycases AS Easycase WHERE Easycase.isactive=1 AND ' . $clt_sql . ' AND Easycase.istype=1 AND ' . $n_pid_cond . ' AND (Easycase.legend=1 OR Easycase.legend=2 OR Easycase.legend=5 OR Easycase.legend=4) AND Easycase.type_id !=10 ' . $qry . ' ' . $searchcase);
            $closedTasksArr = $this->Easycase->query('SELECT COUNT(DISTINCT Easycase.id) AS closedcnt FROM easycases AS Easycase WHERE Easycase.isactive=1 AND ' . $clt_sql . ' AND Easycase.istype=1 AND ' . $n_pid_cond . ' AND Easycase.legend=3 AND Easycase.type_id !=10 ' . $qry . ' ' . $searchcase);
            $openedTasks = $openedTasksArr[0][0]['openedcnt'];
            $closedTasks = $closedTasksArr[0][0]['closedcnt'];
            $openedTasksArrOrg = $this->Easycase->query('SELECT COUNT(DISTINCT Easycase.id) AS openedcnt FROM easycases AS Easycase WHERE Easycase.isactive=1 AND ' . $clt_sql . ' AND Easycase.istype=1 AND ' . $n_pid_cond . ' AND (Easycase.legend=1 OR Easycase.legend=2 OR Easycase.legend=5 OR Easycase.legend=4) AND Easycase.type_id !=10  ' . $searchcase);
            $closedTasksArrOrg = $this->Easycase->query('SELECT COUNT(DISTINCT Easycase.id) AS closedcnt FROM easycases AS Easycase WHERE Easycase.isactive=1 AND ' . $clt_sql . ' AND Easycase.istype=1 AND ' . $n_pid_cond . ' AND Easycase.legend=3 AND Easycase.type_id !=10  ' . $searchcase);
            $openedTasksOrg = $openedTasksArrOrg[0][0]['openedcnt'];
            $closedTasksOrg = $closedTasksArrOrg[0][0]['closedcnt'];
            //			$assignToMe = $this->Easycase->find('count', array('conditions' => array(
            //			"OR" => array(
            //			'AND' => array(
            //			'Easycase.isactive'   => 1,
            //			'Easycase.istype'     => 1,
            //			'Easycase.project_id' => $ids,
            //			'Easycase.assign_to' =>SES_ID
            //			),
            //			array(
            //			'Easycase.isactive'  => 1,
            //			'Easycase.istype'    => 1,
            //			'Easycase.project_id' => $ids,
            //			'Easycase.assign_to' => '0',
            //			'Easycase.user_id' => SES_ID))
            //			),'fields' => 'DISTINCT Easycase.id'));

            if (count($ids)) {
                //$delegateToArr = $this->Easycase->query("SELECT COUNT(id) as total FROM `easycases` AS `Easycase` WHERE Easycase.isactive='1' AND Easycase.istype='1' AND Easycase.project_id IN (".implode(",",$ids).") AND Easycase.assign_to!='0' AND Easycase.assign_to!='".SES_ID."' AND Easycase.user_id='".SES_ID."'");
                $delegateToArr = $this->Easycase->query("SELECT COUNT(DISTINCT Easycase.id) as total FROM `easycases` AS `Easycase` WHERE Easycase.isactive='1' AND " . $clt_sql . " AND Easycase.istype='1' AND " . $n_pid_cond_t . " AND Easycase.assign_to!='0' AND Easycase.assign_to!='" . SES_ID . "' AND Easycase.user_id='" . SES_ID . "' " . $qry . " " . $searchcase);
                $delegateTo = $delegateToArr[0][0]['total'];
                $delegateToArrOrg = $this->Easycase->query("SELECT COUNT(DISTINCT Easycase.id) as total FROM `easycases` AS `Easycase` WHERE Easycase.isactive='1' AND " . $clt_sql . " AND Easycase.istype='1' AND " . $n_pid_cond_t . " AND Easycase.assign_to!='0' AND Easycase.assign_to!='" . SES_ID . "' AND Easycase.user_id='" . SES_ID . "'  " . $searchcase);
                $delegateToOrg = $delegateToArrOrg[0][0]['total'];

                $caseCount = $this->Easycase->query("SELECT COUNT(CaseFile.id) as count FROM easycases as Easycase,case_files as CaseFile WHERE Easycase.id=CaseFile.easycase_id AND Easycase.isactive='1' AND " . $clt_sql . " AND Easycase.project_id IN (" . implode(",", $ids) . ") AND Easycase.project_id!=0 AND CaseFile.isactive='1'");
                $caseFiles = $caseCount[0][0]['count'];

                //$this->loadModel('Milestone');
                //$milestone = $this->Milestone->query("SELECT COUNT(DISTINCT m.id) AS total FROM milestones AS m,easycase_milestones AS em WHERE m.project_id IN (".implode(",",$ids).") and em.milestone_id=m.id and em.project_id IN (".implode(",",$ids).") and m.company_id='".SES_COMP."' and m.isactive='1' order by m.end_date ASC,m.title ASC");
            }

            //$caseNew = $this->Easycase->find('count', array('conditions'=>array('Easycase.isactive' => 1,'Easycase.istype' => 1,'Easycase.project_id' => $ids),'fields' => 'DISTINCT Easycase.id'));
            $caseNew = $this->Easycase->query('SELECT COUNT(DISTINCT Easycase.id) AS newcount FROM easycases Easycase WHERE Easycase.isactive=1 AND Easycase.istype= 1 AND ' . $clt_sql . ' AND ' . $n_pid_cond . ' ' . $qry . $searchcase);
            $caseNewOrg = $this->Easycase->query('SELECT COUNT(DISTINCT Easycase.id) AS newcount FROM easycases Easycase WHERE Easycase.isactive=1 AND Easycase.istype= 1 AND ' . $clt_sql . ' AND ' . $n_pid_cond . ' ' . $searchcase);

            //$before = date('Y-m-d H:i:s',strtotime(GMT_DATETIME."-2 day"));
            //$latest = $this->Easycase->find('count', array('conditions'=>array('Easycase.isactive' => 1,'Easycase.istype' => 1,'Easycase.project_id' => $ids,'Easycase.dt_created >'=> $before,'Easycase.dt_created <='=> GMT_DATETIME),'fields' => 'DISTINCT Easycase.id'));
            //$closeCase = $this->Easycase->find('count', array('conditions'=>array('Easycase.isactive' => 1,'Easycase.legend' => 3,'Easycase.type_id !=' => 10,'Easycase.istype' => 1,'Easycase.project_id' => $ids),'fields' => 'DISTINCT Easycase.id'));
            //$bugCase = $this->Easycase->find('count', array('conditions'=>array('Easycase.isactive' => 1,'Easycase.type_id' => 1,'Easycase.istype' => 1,'Easycase.project_id' => $ids),'fields' => 'DISTINCT Easycase.id'));
            $cur_dt = date('Y-m-d H:i:s', strtotime(GMT_DATETIME));
            $sql = 'SELECT COUNT(DISTINCT Easycase.id) as ovrduecount '
                    . 'FROM easycases Easycase '
                    . 'WHERE Easycase.isactive=1 AND ' . $clt_sql . ' AND Easycase.due_date !="" '
                    . 'AND Easycase.due_date !="0000-00-00 00:00:00" AND Easycase.due_date !="1970-01-01 00:00:00" AND Easycase.due_date < "' . $cur_dt . '" '
                    . 'AND (Easycase.legend !=3) AND Easycase.istype= 1 '
                    . ' AND ' . $n_pid_cond . ' ' . $qry . $searchcase; #AND Easycase.project_id=' . $proj_id . '
            $sqlOrg = 'SELECT COUNT(DISTINCT Easycase.id) as ovrduecount '
                    . 'FROM easycases Easycase '
                    . 'WHERE Easycase.isactive=1 AND ' . $clt_sql . ' AND Easycase.due_date !="" '
                    . 'AND Easycase.due_date !="0000-00-00 00:00:00" AND Easycase.due_date !="1970-01-01 00:00:00" AND Easycase.due_date < "' . $cur_dt . '" '
                    . 'AND (Easycase.legend !=3) AND Easycase.istype= 1 '
                    . ' AND ' . $n_pid_cond . ' ' . $searchcase; #AND Easycase.project_id=' . $proj_id . '

            $ovrdueCase = $this->Easycase->query($sql);
            $ovrdueCaseOrg = $this->Easycase->query($sqlOrg);

            //$caseHighPri = $this->Easycase->find('count', array('conditions'=>array('Easycase.isactive' => 1,'Easycase.istype' => 1,'Easycase.project_id' => $ids,'Easycase.priority 	' => 0),'fields' => 'DISTINCT Easycase.id'));
            $caseHighPri = $this->Easycase->query('SELECT COUNT(DISTINCT Easycase.id) as hpcount FROM easycases Easycase WHERE Easycase.isactive = 1 AND ' . $clt_sql . ' AND Easycase.istype= 1 AND ' . $n_pid_cond . ' AND Easycase.priority = 0 AND Easycase.type_id != 10 ' . $qry . $searchcase);
            $caseHighPriOrg = $this->Easycase->query('SELECT COUNT(DISTINCT Easycase.id) as hpcount FROM easycases Easycase WHERE Easycase.isactive = 1 AND ' . $clt_sql . ' AND Easycase.istype= 1 AND ' . $n_pid_cond . ' AND Easycase.priority = 0 AND Easycase.type_id != 10 ' . $searchcase);
        }
        $resCaseMenu = array();
        //$resCaseMenu['page'] = $page;
        $resCaseMenu['assignToMe'] = (isset($assignToMe[0][0]['asigntocnt'])) ? $assignToMe[0][0]['asigntocnt'] : 0;
        $resCaseMenu['assignToMeOrg'] = (isset($assignToMeOrg[0][0]['asigntocnt'])) ? $assignToMeOrg[0][0]['asigntocnt'] : 0;
        $resCaseMenu['delegateTo'] = (isset($delegateTo)) ? $delegateTo : 0;
        $resCaseMenu['delegateToOrg'] = (isset($delegateToOrg)) ? $delegateToOrg : 0;
        $resCaseMenu['openedtasks'] = (isset($openedTasks)) ? $openedTasks : 0;
        $resCaseMenu['openedtasksOrg'] = (isset($openedTasksOrg)) ? $openedTasksOrg : 0;
        $resCaseMenu['closedtasks'] = (isset($closedTasks)) ? $closedTasks : 0;
        $resCaseMenu['closedtasksOrg'] = (isset($closedTasksOrg)) ? $closedTasksOrg : 0;
        //$resCaseMenu['latest'] = $latest;
        $resCaseMenu['caseFiles'] = (isset($caseFiles)) ? $caseFiles : 0;
        $resCaseMenu['caseFilesOrg'] = (isset($caseFilesOrg)) ? $caseFilesOrg : 0;
        $resCaseMenu['caseNew'] = (isset($caseNew[0][0]['newcount'])) ? $caseNew[0][0]['newcount'] : 0;
        $resCaseMenu['caseNewOrg'] = (isset($caseNewOrg[0][0]['newcount'])) ? $caseNewOrg[0][0]['newcount'] : 0;
        //$resCaseMenu['closeCase'] = $closeCase;
        //$resCaseMenu['filters'] = $filters;
        //$resCaseMenu['cs'] = $case;
        $resCaseMenu['overdue'] = (isset($ovrdueCase[0][0]['ovrduecount'])) ? $ovrdueCase[0][0]['ovrduecount'] : 0;
        $resCaseMenu['overdueOrg'] = (isset($ovrdueCaseOrg[0][0]['ovrduecount'])) ? $ovrdueCaseOrg[0][0]['ovrduecount'] : 0;
        $resCaseMenu['highPri'] = (isset($caseHighPri[0][0]['hpcount'])) ? $caseHighPri[0][0]['hpcount'] : 0;
        $resCaseMenu['highPriOrg'] = (isset($caseHighPriOrg[0][0]['hpcount'])) ? $caseHighPriOrg[0][0]['hpcount'] : 0;
        $resCaseMenu['sf'] = $sf;
        $resCaseMenu['checkDefault'] = (!empty($checkDefault)) ? $checkDefault : 0;
        $resCaseMenu['showDetails'] = (!empty($qry)) ? 1 : 0;

        //$resCaseMenu['total_milestone'] = $milestone['0']['0']['total'];
        $this->set('resCaseMenu', json_encode($resCaseMenu));
    }

    /* Optimized Code */

    public function ajax_case_status($args= null)
    {
        if (isset($args) && !empty($args)) {
            $this->params->data = $args;
        }
        $this->layout = 'ajax';
        $proj_id = null;
        $pageload = 0;
        if (isset($this->params->data['projUniq'])) {
            $proj_uniq_id = $this->params->data['projUniq'];
        }
        $pageload = $this->params->data['pageload'];

        if ($proj_uniq_id != 'all') {
            $proj_id = 0;
            $projArr = $this->Project->find('first', array('conditions' => array('Project.uniq_id' => $proj_uniq_id, 'Project.isactive' => 1), 'fields' => array('Project.id')));
            if (count($projArr)) {
                $proj_id = $projArr['Project']['id'];
            }
        }

        $projUniq = $proj_uniq_id;
        $curProjId = $proj_id;
        $caseMenuFilters = $this->params->data['caseMenuFilters'];

        $caseStatus = $this->params->data['caseStatus']; // Filter by Status(legend)
        $priorityFil = $this->params->data['priFil']; // Filter by Priority
        $caseTypes = $this->params->data['caseTypes']; // Filter by case Types
        $caseUserId = $this->params->data['caseMember']; // Filter by Member
        $caseComment = $this->params->data['caseComment']; // Filter by Member
        $caseAssignTo = $this->params->data['caseAssignTo']; // Filter by AssignTo
        $caseSrch = $this->params->data['caseSearch']; // Search by keyword
        @$case_srch = $this->params->data['case_srch'];
        @$case_date = urldecode($this->params->data['case_date']);
        @$case_duedate = $this->params->data['case_due_date'];
        $milestoneIds = $this->params->data['milestoneIds'];
        $checktype = $this->params->data['checktype'];
        $milestoneId = isset($this->data['milestoneId']) ? $this->data['milestoneId'] : '';
        $qry = "";

        ######### Filter by Status ##########
        //Commented by GK as per the requirement of PG sir on dt:-04th Apr 2013 -- starts
        /* if($caseStatus != "all" && $this->params->data['page_type'] != 'ajax_status') {

          $qry.= $this->Format->statusFilter($caseStatus);
          $stsLegArr = $caseStatus."-"."";
          $expStsLeg = explode("-",$stsLegArr);
          if(!in_array("upd",$expStsLeg))
          {
          $qry.= " AND Easycase.type_id !=10";
          }

          } */
        //Ends
        /* elseif($caseMenuFilters != "closecase") {
          $qry.= " AND (Easycase.legend !='3' OR Easycase.type_id ='10')";
          } */

        if (!$milestoneId) {
            ######### Filter by Case Types ##########
            //if (trim($caseTypes) && $caseTypes != "all" && $this->params->data['page_type'] != 'ajax_types') {
            if (trim($caseTypes) && $caseTypes != "all") {
                $qry.= $this->Format->typeFilter($caseTypes);
            }
            ######### Filter by Priority ##########
            //if (trim($priorityFil) && $priorityFil != "all" && $this->params->data['page_type'] != 'ajax_priority') {
            if (trim($priorityFil) && $priorityFil != "all") {
                $qry.= $this->Format->priorityFilter($priorityFil, $caseTypes);
            }
            ######### Filter by Member ##########
            //if (trim($caseUserId) && $caseUserId != "all" && $this->params->data['page_type'] != 'ajax_members') {
            if (trim($caseUserId) && $caseUserId != "all") {
                $qry.= $this->Format->memberFilter($caseUserId);
            }
            ######### Filter by Member ##########
            //if (trim($caseUserId) && $caseUserId != "all" && $this->params->data['page_type'] != 'ajax_members') {
            if (trim($caseComment) && $caseComment != "all") {
                $qry.= $this->Format->commentFilter($caseComment, $curProjId, $case_date);
            }
            ######### Filter by Status ##########
            if (trim($caseStatus) && $caseStatus != "all") {
                $qry.= $this->Format->statusFilter($caseStatus);
            }
            ######### Filter by AssignTo ##########		/* Added by smruti on 08082013*/
            //if (trim($caseAssignTo) && $caseAssignTo != "all" && $caseAssignTo != "unassigned" && $this->params->data['page_type'] != 'ajax_assignto') {
            if (trim($caseAssignTo) && $caseAssignTo != "all" && $caseAssignTo != "unassigned") {
                $qry.= $this->Format->assigntoFilter($caseAssignTo);
            } elseif (trim($caseAssignTo) == "unassigned") {
                $qry.= " AND Easycase.assign_to='0'";
            }
            ######### Search by KeyWord ##########
            $searchcase = "";
            if (trim(urldecode($caseSrch)) && (trim($case_srch) == "")) {
                $qry = "";
                $searchcase = $this->Format->caseKeywordSearch($caseSrch, 'full');
            }
            if (trim(urldecode($case_srch)) != "") {
                $qry = "";
                $searchcase = "AND (Easycase.case_no = '$case_srch')";
            }

            if (trim(urldecode($caseSrch))) {
                if ((substr($caseSrch, 0, 1)) == '#') {
                    $qry = "";
                    $tmp = explode("#", $caseSrch);
                    $casno = trim($tmp['1']);
                    $searchcase = " AND (Easycase.case_no = '" . $casno . "')";
                }
            }

            if (trim($case_date) != "") {
                $frmTz = '+00:00';
                $toTz = $this->Tmzone->getGmtTz(TZ_GMT, TZ_DST);
                $GMT_DATE =$this->Tmzone->GetDateTime(SES_TIMEZONE, TZ_GMT, TZ_DST, TZ_CODE, GMT_DATETIME, "datetime");
                
                if (trim($case_date) == 'one') {
                    $one_date = date('Y-m-d H:i:s', strtotime($GMT_DATE) - 3600);
                    $qry.= " AND CONVERT_TZ(Easycase.dt_created,'".$frmTz."','".$toTz."') >='" . $one_date . "'";
                } elseif (trim($case_date) == '24') {
                    $day_date = date("Y-m-d H:i:s", strtotime($GMT_DATE. " -1 day"));
                    $qry.= " AND CONVERT_TZ(Easycase.dt_created,'".$frmTz."','".$toTz."') >='" . $day_date . "'";
                } elseif (trim($case_date) == 'week') {
                    $week_date = date("Y-m-d H:i:s", strtotime($GMT_DATE . " -1 week"));
                    $qry.= " AND CONVERT_TZ(Easycase.dt_created,'".$frmTz."','".$toTz."') >='" . $week_date . "'";
                } elseif (trim($case_date) == 'month') {
                    $month_date = date("Y-m-d H:i:s", strtotime($GMT_DATE . " -1 month"));
                    $qry.= " AND CONVERT_TZ(Easycase.dt_created,'".$frmTz."','".$toTz."') >='" . $month_date . "'";
                } elseif (trim($case_date) == 'year') {
                    $year_date = date("Y-m-d H:i:s", strtotime($GMT_DATE . " -1 year"));
                    $qry.= " AND CONVERT_TZ(Easycase.dt_created,'".$frmTz."','".$toTz."') >='" . $year_date . "'";
                } elseif (strstr(trim($case_date), ":")) {
                    //echo $case_date;exit;
                    $ar_dt = explode(":", trim($case_date));
                    $frm_dt = $ar_dt['0'];
                    $to_dt = $ar_dt['1'];
                    //$qry.= " AND DATE(Easycase.dt_created) >= '" . date('Y-m-d H:i:s', strtotime($frm_dt)) . "' AND DATE(Easycase.dt_created) <= '" . date('Y-m-d H:i:s', strtotime($to_dt)) . "'";
                    $qry.= " AND DATE(CONVERT_TZ(Easycase.dt_created,'".$frmTz."','".$toTz."')) >= '" . date('Y-m-d', strtotime($frm_dt)) . "' AND DATE(CONVERT_TZ(Easycase.dt_created,'".$frmTz."','".$toTz."')) <= '" . date('Y-m-d', strtotime($to_dt)) . "'";
                }
            }

            if (trim($case_duedate) != "") {
                $frmTz = '+00:00';
                $toTz = $this->Tmzone->getGmtTz(TZ_GMT, TZ_DST);
                $GMT_DATE =$this->Tmzone->GetDateTime(SES_TIMEZONE, TZ_GMT, TZ_DST, TZ_CODE, GMT_DATETIME, "date");
                if (trim($case_duedate) == '24') {
                    $day_date = date("Y-m-d H:i:s", strtotime(date("Y-m-d H:i:s", strtotime(date("Y-m-d H:i:s"))) . " +1 day"));
                    $qry.= " AND (DATE(CONVERT_TZ(Easycase.due_date,'".$frmTz."','".$toTz."')) ='" . $GMT_DATE . "')";
                } elseif (trim($case_duedate) == 'overdue') {
                    $week_date = date("Y-m-d H:i:s", strtotime(date("Y-m-d H:i:s", strtotime(date("Y-m-d H:i:s"))) . " +1 week"));
                    $qry .= " AND ( DATE(CONVERT_TZ(Easycase.due_date,'".$frmTz."','".$toTz."')) <'" . $GMT_DATE . "') AND (Easycase.legend !=3)";
                } elseif (strstr(trim($case_duedate), ":")) {
                    //echo $case_duedate;exit;
                    $ar_dt = explode(":", trim($case_duedate));
                    $frm_dt = $ar_dt['0'];
                    $to_dt = $ar_dt['1'];
                    $qry.= " AND DATE(CONVERT_TZ(Easycase.due_date,'".$frmTz."','".$toTz."')) >= '" . date('Y-m-d', strtotime($frm_dt)) . "' AND DATE(CONVERT_TZ(Easycase.due_date,'".$frmTz."','".$toTz."')) <= '" . date('Y-m-d', strtotime($to_dt)) . "'";
                }
            }
        }
        $qry1 = "";

        ######### Filter by Case Title in archive case list page##########
        if ($this->params->data['page_type'] == 'ajax_case_title') {
            $this->layout = 'ajax';
            $getAllProj = $this->ProjectUser->find('all', array('conditions' => array('ProjectUser.user_id' => SES_ID, 'ProjectUser.company_id' => SES_COMP), 'fields' => 'ProjectUser.project_id'));
            if (!empty($getAllProj)) {
                $qry = '';
                $projIds = array();
                if (!empty($getAllProj)) {
                    foreach ($getAllProj as $pj) {
                        $projIds[] = $pj['ProjectUser']['project_id'];
                    }
                    $getUsers = array();
                    if (count($projIds)) {
                        $pjids = "(" . implode(",", $projIds) . ")";
                        $qry = "AND Easycase.project_id IN " . $pjids . "";
                    }
                }

                $clt_sql = 1;
                if ($this->Auth->user('is_client') == 1) {
                    $clt_sql = "((Easycase.client_status = " . $this->Auth->user('is_client') . " AND Easycase.user_id = " . $this->Auth->user('id') . ") OR Easycase.client_status != " . $this->Auth->user('is_client') . ")";
                }
                $caseCount1 = $this->Easycase->query("SELECT Easycase.id,Easycase.title,Easycase.uniq_id,Easycase.format,Easycase.case_no,Easycase.type_id,Easycase.legend,Easycase.user_id,Easycase.dt_created,Easycase.istype,Easycase.project_id,Archive.dt_created, User.name, User.last_name, User.short_name FROM easycases as Easycase,archives as Archive, users as User WHERE Easycase.id=Archive.easycase_id AND Easycase.user_id=User.id AND " . $clt_sql . " AND Archive.type = '1' AND Archive.company_id ='" . SES_COMP . "' " . $qry . " AND Easycase.project_id != '0';");

                //pr($caseCount1);exit;

                $caseCount = count($caseCount1);
                $this->set('caseCount', $caseCount);
                $cse = $this->Easycase->query("SELECT Easycase.id,Easycase.title,Easycase.uniq_id,Easycase.format,Easycase.case_no,Easycase.type_id,Easycase.legend,Easycase.user_id,Easycase.dt_created,Easycase.istype,Easycase.project_id,Archive.dt_created, User.name, User.last_name, User.short_name FROM easycases as Easycase,archives as Archive, users as User WHERE Easycase.id=Archive.easycase_id AND Easycase.user_id=User.id AND Archive.type = '1' AND Archive.company_id ='" . SES_COMP . "' " . $qry . " AND Easycase.project_id != '0' AND " . $clt_sql . " ORDER BY Archive.dt_created DESC");

                $this->set('list', $cse);
                $this->set('pjid', 'all');
            }
            $this->render('ajax_case_title', 'ajax');
        }

        if ($this->params->data['page_type'] == 'ajax_archive_project' || $this->params->data['page_type'] == 'ajax_utilization_project') {
            $this->layout = 'ajax';
            $arc_prj_qry = "SELECT Project.id,  Project.name, Project.short_name FROM projects AS Project where Project.company_id = '" . SES_COMP . "'";
            $caseCount = $this->Easycase->query($arc_prj_qry);
            //pr($caseCount);exit;
            $this->set('prjlist', $caseCount);
            if ($this->params->data['page_type'] == 'ajax_utilization_project') {
                $this->render('ajax_utilization_project', 'ajax');
            } else {
                $this->render('ajax_archive_project', 'ajax');
            }
        }

        if ($this->params->data['page_type'] == 'ajax_archivedby' || $this->params->data['page_type'] == 'ajax_utilization_resource') {
            $this->layout = 'ajax';
            $qry = "SELECT DISTINCT User.id, User.name, User.last_name, User.short_name FROM users as User, company_users As CompanyUser WHERE CompanyUser.user_id=User.id AND CompanyUser.company_id =" . SES_COMP . " AND CompanyUser.is_active =1 ORDER BY User.id DESC";
            $cse = $this->Easycase->query($qry);
            $this->set('list', $cse);
            if ($this->params->data['page_type'] == 'ajax_utilization_resource') {
                $this->render('ajax_utilization_resource', 'ajax');
            } else {
                $this->render('ajax_archivedby', 'ajax');
            }
        }

        if ($this->params->data['page_type'] == 'ajax_archive_assign') {
            $this->layout = 'ajax';
            $qry = "SELECT DISTINCT User.id, User.name, User.email, User.istype,User.email,User.short_name,User.dt_last_login,  (select count(Easycase.id) from easycases as Easycase where Easycase.assign_to = User.id and Easycase.istype='1' AND User.isactive='1' and Easycase.isactive!='1') as cases FROM users as User,project_users as ProjectUser,company_users as CompanyUser,projects as Project WHERE CompanyUser.user_id=ProjectUser.user_id AND CompanyUser.is_active='1' AND CompanyUser.company_id='" . SES_COMP . "' AND Project.id=ProjectUser.project_id AND User.isactive='1' AND ProjectUser.user_id=User.id ORDER BY User.short_name";
            $cse = $this->Easycase->query($qry);
            $this->set('list', $cse);
            $this->render('ajax_archive_assign', 'ajax');
        }

        ######### Filter by Assign To ##########
        if ($caseMenuFilters == "assigntome") {
            $qry.= " AND ((Easycase.assign_to=" . SES_ID . ") OR (Easycase.assign_to=0 AND Easycase.user_id=" . SES_ID . "))";
            $qry1.= " AND ((Easycase.assign_to=" . SES_ID . ") OR (Easycase.assign_to=0 AND Easycase.user_id=" . SES_ID . "))";
        } elseif ($caseMenuFilters == "newwip") {
            $qry.= " AND (Easycase.legend='1' OR Easycase.legend='2') AND Easycase.type_id !='10' ";
            $qry1.= " AND (Easycase.legend='1' OR Easycase.legend='2') AND Easycase.type_id !='10' ";
        } elseif ($caseMenuFilters == "openedtasks") {
            $qry.= " AND (Easycase.legend='1' OR Easycase.legend='2' OR Easycase.legend='4' OR Easycase.legend='5') AND Easycase.type_id !='10' ";
            $qry1.= " AND (Easycase.legend='1' OR Easycase.legend='2' OR Easycase.legend='4' OR Easycase.legend='5') AND Easycase.type_id !='10' ";
        } elseif ($caseMenuFilters == "highpriority") {
            $qry.= " AND Easycase.priority='0'  ";
            $qry1.= " AND Easycase.priority='0'  ";
        }
        ######### Filter by Delegate To ##########
        elseif ($caseMenuFilters == "delegateto") {
            $qry.= " AND Easycase.assign_to!=0 AND Easycase.assign_to!=" . SES_ID . " AND Easycase.user_id=" . SES_ID;
            $qry1.= " AND Easycase.assign_to!=0 AND Easycase.assign_to!=" . SES_ID . " AND Easycase.user_id=" . SES_ID;
        }
        ######### Filter by Close case ##########
        elseif ($caseMenuFilters == "closecase") {
            $qry.= " AND Easycase.legend='3' AND Easycase.type_id !='10'";
            $qry1.= " AND Easycase.legend='3' AND Easycase.type_id !='10'";
        } elseif ($caseMenuFilters == "closedtasks") {
            $qry.= " AND Easycase.legend='3' AND Easycase.type_id !='10'";
            $qry1.= " AND Easycase.legend='3' AND Easycase.type_id !='10'";
        }
        ######### Filter by Bug case ##########
        elseif ($caseMenuFilters == "overdue") { /* By OSDEV 0201 */
            $cur_dt = date('Y-m-d H:i:s', strtotime(GMT_DATETIME));
            /* $qry.= " AND Easycase.due_date !='' AND Easycase.due_date !='0000-00-00 00:00:00' AND Easycase.due_date !='1970-01-01 00:00:00' AND Easycase.due_date < '" . $cur_dt . "' "
              . "AND (Easycase.legend !=3) ";
              $qry1.= " AND Easycase.due_date !='' AND Easycase.due_date !='0000-00-00 00:00:00' AND Easycase.due_date !='1970-01-01 00:00:00' AND Easycase.due_date < '" . $cur_dt . "' "
              . "AND (Easycase.legend !=3) "; */
            $qry.= " AND Easycase.due_date !='' AND Easycase.due_date !='0000-00-00 00:00:00' AND Easycase.due_date !='1970-01-01 00:00:00' AND DATE(Easycase.due_date) < '" . GMT_DATE . "' "
                    . "AND (Easycase.legend !=3) ";
            $qry1.= " AND Easycase.due_date !='' AND Easycase.due_date !='0000-00-00 00:00:00' AND Easycase.due_date !='1970-01-01 00:00:00' AND DATE(Easycase.due_date) < '" . GMT_DATE . "' "
                    . "AND (Easycase.legend !=3) ";
        }
        ######### Filter by Latest ##########
        elseif ($caseMenuFilters == "latest") {
            $qry_rest = $qry;
            $before = date('Y-m-d H:i:s', strtotime(GMT_DATETIME . "-2 day"));
            $all_rest = " AND Easycase.dt_created > '" . $before . "' AND Easycase.dt_created <= '" . GMT_DATETIME . "'";
            $qry_rest.= " AND Easycase.dt_created > '" . $before . "' AND Easycase.dt_created <= '" . GMT_DATETIME . "'";
        }

        if ($caseMenuFilters == "latest" && $projUniq != 'all') {
            $CaseCount3 = $this->Easycase->query("SELECT COUNT(Easycase.id) as count FROM easycases as Easycase WHERE istype='1' AND Easycase.isactive='1' AND Easycase.project_id='$curProjId' AND Easycase.project_id!=0  " . $searchcase . " " . trim($qry_rest));
            $CaseCount = $CaseCount3['0']['0']['count'];

            if ($CaseCount == 0) {
                $rest = $this->Easycase->query("SELECT dt_created FROM easycases WHERE project_id ='" . $curProjId . "' ORDER BY dt_created DESC LIMIT 0 , 1");
                @$sdate = explode(" ", @$rest[0]['easycases']['dt_created']);
                $qry.= " AND Easycase.dt_created >= '" . @$sdate[0] . "' AND Easycase.dt_created <= '" . GMT_DATETIME . "'";

                $qry1.= " AND Easycase.dt_created >= '" . @$sdate[0] . "' AND Easycase.dt_created <= '" . GMT_DATETIME . "'";
            } else {
                $qry = $qry . $all_rest;
                $qry1.= $all_rest;
            }
        } elseif ($caseMenuFilters == "latest" && $projUniq == 'all') {
            $qry = $qry . $all_rest;
            $qry1.= $all_rest;
        }

        $mlstnQ1 = "";
        $mlstnQ2 = "";
        if ($caseMenuFilters == 'kanban' && $milestoneId) {
            $mlstnQ1 = ",easycase_milestones as em,milestones as m ";
            $mlstnQ2 = " AND em.easycase_id=Easycase.id AND em.milestone_id=m.id  AND em.milestone_id=" . $milestoneId . " ";
        } elseif ($caseMenuFilters == "milestone") {
            $mstIds = array();
            if ($milestoneIds != "all" && strstr($milestoneIds, "-")) {
                $expMilestoneIds = explode("-", $milestoneIds);
                foreach ($expMilestoneIds as $msid) {
                    if ($msid) {
                        $mstIds[] = $msid;
                    }
                }
                if (count($mstIds)) {
                    $mlstFilter = " AND em.milestone_id IN (" . implode(",", $mstIds) . ") ";
                }
            }
            $mlstnQ1 = ",easycase_milestones as em,milestones as m ";
            if ($checktype != 'completed') {
                $mlst = " AND m.isactive='1' ";
            } else {
                $mlst = " AND m.isactive='0' ";
            }
            $mlstnQ2 = " AND em.easycase_id=Easycase.id AND em.milestone_id=m.id " . trim($mlst . $mlstFilter);
        }

        $Easycase = ClassRegistry::init('Easycase');
        $Easycase->recursive = -1;


        if ($proj_uniq_id == 'all') {
            $projQry = "AND Easycase.project_id IN (SELECT ProjectUser.project_id FROM project_users AS ProjectUser,projects as Project WHERE ProjectUser.user_id=" . SES_ID . " AND ProjectUser.company_id=" . SES_COMP . " AND ProjectUser.project_id=Project.id AND Project.isactive='1')";

            $projQryMem = "";
        } else {
            $projQry = "AND Easycase.project_id='" . $proj_id . "'";

            $projQryMem = "AND ProjectUser.project_id='" . $proj_id . "'";
        }

        $clt_sql = 1;
        if ($this->Auth->user('is_client') == 1) {
            $clt_sql = "((Easycase.client_status = " . $this->Auth->user('is_client') . " AND Easycase.user_id = " . $this->Auth->user('id') . ") OR Easycase.client_status != " . $this->Auth->user('is_client') . ")";
        }

        if ($this->params->data['page_type'] == 'ajax_priority') {
            $query_pri_high1 = $this->Easycase->query("SELECT COUNT(Easycase.id) as count FROM easycases as Easycase" . $mlstnQ1 . " WHERE Easycase.istype='1' AND  Easycase.isactive='1' AND " . $clt_sql . " AND priority='0' AND Easycase.project_id!=0 " . $mlstnQ2 . $projQry . " " . trim($qry) . "");
            $query_pri_high = $query_pri_high1['0']['0']['count'];

            $query_pri_medium1 = $this->Easycase->query("SELECT COUNT(Easycase.id) as count FROM easycases as Easycase" . $mlstnQ1 . " WHERE Easycase.istype='1' AND  Easycase.isactive='1' AND " . $clt_sql . " AND priority='1' AND Easycase.project_id!=0 " . $mlstnQ2 . $projQry . " " . trim($qry) . "");
            $query_pri_medium = $query_pri_medium1['0']['0']['count'];

            $query_pri_low1 = $this->Easycase->query("SELECT COUNT(Easycase.id) as count FROM easycases as Easycase" . $mlstnQ1 . " WHERE Easycase.istype='1' AND  Easycase.isactive='1' AND " . $clt_sql . " AND priority='2' AND Easycase.project_id!=0 " . $mlstnQ2 . $projQry . " " . trim($qry) . "");
            $query_pri_low = $query_pri_low1['0']['0']['count'];

            $this->set('proj_uniq_id', $proj_uniq_id);
            $this->set('proj_id', $proj_id);
            $this->set('CookiePriority', $_COOKIE['PRIORITY']);
            $this->set('query_pri_high', $query_pri_high);
            $this->set('query_pri_medium', $query_pri_medium);
            $this->set('query_pri_low', $query_pri_low);

            $this->render('ajax_priority', 'ajax');
        } elseif ($this->params->data['page_type'] == 'ajax_members') {
            $memArr = $this->Easycase->query("SELECT DISTINCT User.id, User.name, User.email, User.istype,User.email,User.short_name,User.dt_last_login, (select count(Easycase.id) from easycases as Easycase" . $mlstnQ1 . " where Easycase.user_id=User.id and Easycase.istype='1' AND " . $clt_sql . " and User.isactive='1' and Easycase.isactive='1' " . $mlstnQ2 . $projQry . " " . trim($qry) . ") as cases FROM users as User,project_users as ProjectUser,company_users as CompanyUser WHERE CompanyUser.user_id=ProjectUser.user_id AND CompanyUser.is_active='1' AND CompanyUser.company_id='" . SES_COMP . "' " . $projQryMem . " AND User.isactive='1' AND ProjectUser.user_id=User.id ORDER BY User.name");

            $this->set('proj_uniq_id', $proj_uniq_id);
            $this->set('proj_id', $proj_id);
            $this->set('memArr', $memArr);
            $this->set('CookieMem', $_COOKIE['MEMBERS']);

            $this->render('ajax_members', 'ajax');
        } elseif ($this->params->data['page_type'] == 'ajax_assignto') {
            $asnArr = $this->Easycase->query("SELECT DISTINCT User.id, User.name, User.last_name, User.email, User.istype,User.email,User.short_name,User.dt_last_login,  (select count(Easycase.id) from easycases as Easycase" . $mlstnQ1 . " where Easycase.assign_to = User.id and Easycase.istype='1' AND " . $clt_sql . " and User.isactive='1' and Easycase.isactive='1' " . $mlstnQ2 . $projQry . " " . trim($qry) . ") as cases FROM users as User,project_users as ProjectUser,company_users as CompanyUser,projects as Project WHERE CompanyUser.user_id=ProjectUser.user_id AND CompanyUser.is_active='1' AND CompanyUser.company_id='" . SES_COMP . "' $projQryMem  AND Project.id=ProjectUser.project_id AND User.isactive='1' AND ProjectUser.user_id=User.id ORDER BY User.short_name");
            $unsncnt = "select count(Easycase.id) as unasn_count from easycases as Easycase where Easycase.assign_to = '0' AND Easycase.isactive = '1' AND Easycase.istype = '1' AND " . $clt_sql . " and Easycase.isactive='1' " . $mlstnQ2 . $projQry . " " . trim($qry);
            $unasncount = $this->Easycase->query($unsncnt);
            $this->set('proj_uniq_id', $proj_uniq_id);
            $this->set('proj_id', $proj_id);
            $this->set('asnArr', $asnArr);
            $this->set('CookieAsn', $_COOKIE['ASSIGNTO']);
            $this->set('unasncount', $unasncount);

            $this->render('ajax_assignto', 'ajax');
        } elseif ($this->params->data['page_type'] == 'ajax_types') {
            $ov_view = 0;
            if (isset($this->params->data['extra']) && $this->params->data['extra'] = 'overview') {
                $ov_view = 1;
            }
            if (SES_TYPE == 1 && isset($this->params->data['page_type_pie']) && $this->params->data['page_type_pie'] && !$ov_view) { //for owner
                $projQry = "AND Easycase.project_id IN (SELECT ProjectUser.project_id FROM project_users AS ProjectUser,projects as Project WHERE ProjectUser.company_id=" . SES_COMP . " AND ProjectUser.project_id=Project.id AND Project.isactive='1')";
            }
            $assginto ="";
            if (SES_TYPE==3 && isset($this->params->data['page_type_pie']) && $this->params->data['page_type_pie']) {
                $assginto = " AND Easycase.assign_to=" . SES_ID ;
            }
            $pids[] = 0;
            if ($proj_uniq_id !='all') {
                $pids[] = $proj_id;
            } else {
                $this->loadModel("ProjectUser");
                $allps = $this->ProjectUser->query("SELECT DISTINCT Project.id FROM project_users AS ProjectUser,projects AS Project WHERE Project.id= ProjectUser.project_id AND ProjectUser.user_id=" . SES_ID . " AND Project.isactive='1' AND Project.company_id='" . SES_COMP . "' ORDER BY ProjectUser.dt_visited DESC");
                foreach ($allps as $k=>$v) {
                    $pids[] = $v['Project']['id'];
                }
            }
            $pids_implode = implode(',', $pids);
            $this->loadModel('Type');
            $allTypes = $this->Type->find('all', array('conditions' => array('Type.company_id'=>array(0,SES_COMP)),'fields'=>array('Type.id','Type.name','Type.short_name','Type.company_id'), 'order' => array('Type.company_id'=> 'ASC','Type.name'=> 'ASC')));
            $types_sql = "select count(e.id) as cnt,t.name,t.id,t.short_name,t.company_id from types as t LEFT JOIN easycases as e on e.type_id=t.id where e.project_id in (".$pids_implode.") and e.istype=1 and e.isactive=1 group by type_id order by t.company_id ASC";
            $typeArr_new = $this->Easycase->query($types_sql);
            if (!empty($typeArr_new)) {
                $typeArr_new = Hash::combine($typeArr_new, '{n}.t.id', '{n}');
            }
            $typeArr = array();
            foreach ($allTypes as $k => $v) {
                $_tarr[0]['count'] = (!empty($typeArr_new[$v['Type']['id']]))?$typeArr_new[$v['Type']['id']][0]['cnt']:0;
                $_tarr['t'] = $v['Type'];
                array_push($typeArr, $_tarr);
            }

            $this->set('proj_uniq_id', $proj_uniq_id);
            $this->set('proj_id', $proj_id);
            $this->set('typeArr', $typeArr);
            $this->set('CookieTypes', $_COOKIE['CS_TYPES']);
            if (isset($this->params->data['page_type_pie'])) {
                $arr_ouput = array();
                $total_count = 0;
                $otherId = 0;
                if (SES_TYPE ==3) {
                    foreach ($typeArr as $k => $v) {
                        if ($v['t']['id'] == '8' || $v['t']['company_id'] != 0) {
                            if (!$otherId) {
                                $otherId = $k;
                                $arr_ouput[$otherId][0] = 'Others';
                                $arr_ouput[$otherId][1] = 0;
                            }
                            $arr_ouput[$otherId][1] += intval($v[0]['count']);
                            $total_count += intval($v[0]['count']);
                        } else {
                            $arr_ouput[$k][] = trim($v['t']['name']);
                            $arr_ouput[$k][] = intval($v[0]['count']);
                            $total_count += intval($v[0]['count']);
                        }
                    }
                } else {
                    foreach ($typeArr as $k => $v) {
                        $arr_ouput[$k][] = trim($v['t']['name']);
                        $arr_ouput[$k][] = intval($v[0]['count']);
                        $total_count += intval($v[0]['count']);
                    }
                }
                if ($arr_ouput) {
                    $arr_ouput = array_values($arr_ouput);
                }
                $arr_ouput_t['data'] = array();
                $arr_ouput_t['data'] = $arr_ouput;
                $arr_ouput_t['status'] = 'success';
                $arr_ouput_t['total_cnt'] = $total_count;
                if (isset($args) && !empty($args)) {
                    return json_encode($arr_ouput_t);
                } else {
                    echo json_encode($arr_ouput_t);
                    exit;
                }
            } else {
                $this->render('ajax_types', 'ajax');
            }
        } elseif (!$this->params->data['page_type'] || $this->params->data['page_type'] == 'ajax_status') {
            $query_All = 0;
            $query_New = 0;
            $query_Open = 0;
            $query_Close = 0;
            $query_Start = 0;
            $query_Resolve = 0;
            $query_Attch = 0;
            $query_Upd = 0;
            $resCaseWidget = array();
            //$query_All1 = $this->Easycase->query("SELECT COUNT(Easycase.id) as count FROM easycases as Easycase".$mlstnQ1." WHERE Easycase.istype='1' AND Easycase.type_id!='10' AND  Easycase.isactive='1' AND Easycase.project_id!=0 ".$mlstnQ2.$projQry." ".trim($qry)."");
            //$query_All=$query_All1['0']['0']['count'];
            //    echo "SELECT COUNT(Easycase.id) as count,Easycase.legend FROM easycases as Easycase".$mlstnQ1." WHERE Easycase.istype='1' AND  Easycase.isactive='1' AND Easycase.legend='1' AND Easycase.type_id!='10' AND Easycase.project_id!=0 ".$mlstnQ2.$projQry.$searchcase." ".trim($qry);exit;
            $common_qry = $this->Easycase->query("SELECT COUNT(Easycase.id) as count,if(Easycase.type_id=10,10,Easycase.legend) AS legend FROM easycases as Easycase" . $mlstnQ1 . " WHERE Easycase.istype='1' AND " . $clt_sql . " AND  Easycase.isactive='1' AND Easycase.project_id!=0 " . $mlstnQ2 . $projQry . $searchcase . " " . trim($qry) . " GROUP BY if(Easycase.type_id=10,10,Easycase.legend)");
            //	pr($common_qry);exit;
            foreach ($common_qry as $key => $val) {
                if ($val[0]['legend'] == 1) {
                    $query_New = $val[0]['count'];
                } elseif ($val[0]['legend'] == 2 || $val[0]['legend'] == 4) {
                    $query_Open +=$val[0]['count'];
                } elseif ($val[0]['legend'] == 3) {
                    $query_Close = $val[0]['count'];
                } elseif ($val[0]['legend'] == 5) {
                    $query_Resolve = $val[0]['count'];
                }
                if ($val[0]['legend'] == 10) {
                    $query_Upd = $val[0]['count'];
                } else {
                    $query_All +=$val[0]['count'];
                }
            }
            //			$query_New1 = $this->Easycase->query("SELECT COUNT(Easycase.id) as count,Easycase.legend FROM easycases as Easycase".$mlstnQ1." WHERE Easycase.istype='1' AND  Easycase.isactive='1' AND Easycase.legend='1' AND Easycase.type_id!='10' AND Easycase.project_id!=0 ".$mlstnQ2.$projQry." ".trim($qry)."");
            //			$query_New=$query_New1['0']['0']['count'];
//
            //			$query_Open1 = $this->Easycase->query("SELECT COUNT(Easycase.id) as count FROM easycases as Easycase".$mlstnQ1." WHERE Easycase.istype='1' AND  Easycase.isactive='1' AND (Easycase.legend='2' || Easycase.legend='4') AND Easycase.type_id!='10' AND Easycase.project_id!=0 ".$mlstnQ2.$projQry." ".trim($qry)."");
            //			$query_Open=$query_Open1['0']['0']['count'];
//
            //			$query_Close1 = $this->Easycase->query("SELECT COUNT(Easycase.id) as count FROM easycases as Easycase".$mlstnQ1." WHERE Easycase.istype='1' AND  Easycase.isactive='1' AND Easycase.legend='3' AND Easycase.type_id!='10' AND Easycase.project_id!=0 ".$mlstnQ2.$projQry." ".trim($qry)."");
            //			$query_Close=$query_Close1['0']['0']['count'];
//
            //			$query_Resolve1 = $this->Easycase->query("SELECT COUNT(Easycase.id) as count FROM easycases as Easycase".$mlstnQ1." WHERE Easycase.istype='1' AND  Easycase.isactive='1' AND Easycase.legend='5' AND Easycase.type_id!='10' AND Easycase.project_id!=0 ".$mlstnQ2.$projQry." ".trim($qry)."");
            //			$query_Resolve=$query_Resolve1['0']['0']['count'];
//
            //			$query_Upd1 = $this->Easycase->query("SELECT COUNT(Easycase.id) as count FROM easycases as Easycase".$mlstnQ1." WHERE Easycase.istype='1' AND  Easycase.isactive='1' AND Easycase.type_id='10' AND Easycase.project_id!=0 ".$mlstnQ2.$projQry." ".trim($qry)."");
            //			$query_Upd=$query_Upd1['0']['0']['count'];

            if ($this->params->data['page_type'] == 'ajax_status') {
                $query_Attch1 = $this->Easycase->query("SELECT COUNT(Easycase.id) as count FROM easycases as Easycase" . $mlstnQ1 . " WHERE Easycase.istype='1' AND  Easycase.isactive='1' AND " . $clt_sql . " AND Easycase.format='1' AND Easycase.project_id!=0 " . $mlstnQ2 . $projQry . " " . trim($qry) . "");
                $query_Attch = $query_Attch1['0']['0']['count'];

                $this->set('projuniq', $proj_uniq_id);
                $this->set('pageload', $pageload);

                $this->set('query_All', $query_All);
                $this->set('query_New', $query_New);
                $this->set('query_Open', $query_Open);
                $this->set('query_Close', $query_Close);
                $this->set('query_Resolve', $query_Resolve);
                $this->set('query_Start', $query_Start);
                $this->set('query_Attch', $query_Attch);
                $this->set('query_Upd', $query_Upd);

                $this->set('CookieStatus', $_COOKIE['STATUS']);
                $this->render('ajax_status', 'ajax');
            } else {
                $resCaseWidget['al'] = $query_All;
                $resCaseWidget['nw'] = $query_New;
                $resCaseWidget['opn'] = $query_Open;
                $resCaseWidget['cls'] = $query_Close;
                $resCaseWidget['rslv'] = $query_Resolve;
                $resCaseWidget['upd'] = $query_Upd;

                $this->set('resCaseWidget', json_encode($resCaseWidget));
                $this->render('ajax_case_status', 'ajax');
            }
        }
    }

    public function files1()
    {
    }

    public function ajax_taskgroups()
    {
        $this->layout = 'ajax';
        $proj_id = null;
        $pageload = 0;
        $projUniq = $this->params->data['projUniq'];
        $checktype = $this->params->data['checktype'];

        if ($checktype == "completed") {
            $qr = 0;
        } elseif ($checktype == "active") {
            $qr = 1;
        } else {
            $qr = array(0, 1);
        }
        $this->loadModel('Milestone');
        if ($projUniq != 'all') {
            $milestones = array();
            $proj_id = 0;
            $this->loadModel('Project');
            $projArr = $this->Project->find('first', array('conditions' => array('Project.uniq_id' => $projUniq, 'Project.isactive' => 1), 'fields' => array('Project.id')));
            if (count($projArr)) {
                $proj_id = $projArr['Project']['id'];
            }
            $cond = array('conditions' => array('Milestone.company_id' => SES_COMP, 'Milestone.isactive' => $qr, 'Milestone.project_id' => $proj_id), 'fields' => array('Milestone.id', 'Milestone.isactive'));
            $all_mileSton = $this->Milestone->find('all', $cond);
            $this->set('milestones', $all_mileSton);
        }
        if ($projUniq == 'all') {
            $milestones = array();
            $cond = array('conditions' => array('ProjectUser.user_id' => SES_ID, 'ProjectUser.company_id' => SES_COMP, 'Project.isactive' => 1), 'fields' => array('DISTINCT  Project.id'), 'order' => array('ProjectUser.dt_visited DESC'));

            $this->ProjectUser->unbindModel(array('belongsTo' => array('User')));
            $this->ProjectUser->bindModel(array('belongsTo' => array('Project')));
            $allProjArr = $this->ProjectUser->find('all', $cond);
            $ids = array();
            foreach ($allProjArr as $csid) {
                array_push($ids, $csid['Project']['id']);
            }
            $cond = array('conditions' => array('Milestone.company_id' => SES_COMP, 'Milestone.isactive' => $qr, 'Milestone.project_id' => $ids), 'fields' => array('Milestone.id', 'Milestone.isactive'));
            $all_mileSton = $this->Milestone->find('all', $cond);
            $this->set('milestones', $all_mileSton);
        }
        $this->set('proj_uniq_id', $projUniq);
    }

    public function ajax_milestones()
    {
        $this->layout = 'ajax';
        $proj_id = null;
        $pageload = 0;
        $projUniq = $this->params->data['projUniq'];

        $checktype = $this->params->data['checktype'];

        if ($checktype == "completed") {
            $qr = "and m.isactive='0'";
        } else {
            $qr = "and m.isactive='1'";
        }

        $this->loadModel('Milestone');
        if ($projUniq != 'all') {
            $milestones = array();

            $proj_id = 0;
            $this->loadModel('Project');
            $projArr = $this->Project->find('first', array('conditions' => array('Project.uniq_id' => $projUniq, 'Project.isactive' => 1), 'fields' => array('Project.id')));
            if (count($projArr)) {
                $proj_id = $projArr['Project']['id'];
            }

            $milestones = $this->Milestone->query("select DISTINCT m.id,m.title,m.end_date, (select count(em.id) from easycase_milestones as em,easycases as e where em.milestone_id=m.id and e.id=em.easycase_id and e.isactive='1') as count from milestones as m,easycase_milestones as em where m.project_id='" . $proj_id . "' and em.milestone_id=m.id and em.project_id='" . $proj_id . "' and m.company_id='" . SES_COMP . "' " . $qr . " order by m.end_date ASC,m.title ASC");

            $this->set('milestones', $milestones);
        }
        if ($projUniq == 'all') {
            $milestones = array();

            $cond = array('conditions' => array('ProjectUser.user_id' => SES_ID, 'ProjectUser.company_id' => SES_COMP, 'Project.isactive' => 1), 'fields' => array('DISTINCT  Project.id'), 'order' => array('ProjectUser.dt_visited DESC'));

            $this->ProjectUser->unbindModel(array('belongsTo' => array('User')));
            $this->ProjectUser->bindModel(array('belongsTo' => array('Project')));
            $allProjArr = $this->ProjectUser->find('all', $cond);
            $ids = array();
            foreach ($allProjArr as $csid) {
                array_push($ids, $csid['Project']['id']);
            }

            $milestones = $this->Milestone->query("select DISTINCT m.id,m.title,m.end_date, (select count(em.id) from easycase_milestones as em,easycases as e where em.milestone_id=m.id and e.id=em.easycase_id and e.isactive='1') as count from milestones as m,easycase_milestones as em where m.project_id IN (" . implode(",", $ids) . ") and em.milestone_id=m.id and em.project_id IN (" . implode(",", $ids) . ") and m.company_id='" . SES_COMP . "' " . $qr . " order by m.end_date ASC,m.title ASC");
            $this->set('milestones', $milestones);
        }
    }

    public function ajax_project()
    {
        $this->layout = 'ajax';

        $proj_id = null;
        $pageload = 0;
        $proj_uniq_id = $this->params->data['projUniq'];
        $pageload = $this->params->data['pageload'];

        $this->loadModel('ProjectUser');

        $proj_all_cond = array(
            'conditions' => array('ProjectUser.user_id' => SES_ID, 'Project.isactive' => 1),
            'fields' => array('DISTINCT Project.id', 'Project.name', 'Project.uniq_id'),
            'order' => array('ProjectUser.dt_visited DESC')
        );

        $this->ProjectUser->bindModel(array('belongsTo' => array('Project')));
        $projAll = $this->ProjectUser->find('all', $proj_all_cond);

        $this->set('pageload', $pageload);
        $this->set('proj_uniq_id', $proj_uniq_id);
        $this->set('projAll', $projAll);
    }

    public function ajax_priority()
    {
        $this->layout = 'ajax';

        $proj_id = null;
        $pageload = 0;
        $proj_uniq_id = $this->params->data['projUniq'];
        $pageload = $this->params->data['pageload'];
        $caseMenuFilters = "";
        if (isset($this->params->data['caseMenuFilters'])) {
            $caseMenuFilters = $this->params->data['caseMenuFilters'];
        }
        if ($proj_uniq_id != 'all') {
            $this->loadModel('ProjectUser');
            $this->ProjectUser->bindModel(array('belongsTo' => array('Project')));
            $projArr = $this->ProjectUser->find('first', array('conditions' => array('Project.uniq_id' => $proj_uniq_id, 'ProjectUser.user_id' => SES_ID, 'Project.isactive' => 1), 'fields' => array('Project.id')));

            if (count($projArr)) {
                $proj_id = $projArr['Project']['id'];
            }
            $this->set('proj_uniq_id', $proj_uniq_id);
            $this->set('proj_id', $proj_id);
            $this->set('CookiePriority', $_COOKIE['PRIORITY']);
            $this->set('caseMenuFilters', $caseMenuFilters);
        }
        if ($proj_uniq_id == 'all') {
            $this->set('proj_uniq_id', 'all');
            $this->set('proj_id', 'all');
            $this->set('CookiePriority', $_COOKIE['PRIORITY']);
            $this->set('caseMenuFilters', $caseMenuFilters);
        }
    }

    public function ajax_types()
    {
        $this->layout = 'ajax';

        $proj_id = null;
        $pageload = 0;
        $proj_uniq_id = $this->params->data['projUniq'];
        $pageload = $this->params->data['pageload'];

        $caseMenuFilters = "";
        if (isset($this->params->data['caseMenuFilters'])) {
            $caseMenuFilters = $this->params->data['caseMenuFilters'];
        }

        if ($proj_uniq_id != 'all') {
            $this->loadModel('ProjectUser');
            $this->ProjectUser->bindModel(array('belongsTo' => array('Project')));
            $projArr = $this->ProjectUser->find('first', array('conditions' => array('Project.uniq_id' => $proj_uniq_id, 'ProjectUser.user_id' => SES_ID, 'Project.isactive' => 1), 'fields' => array('Project.id')));

            if (count($projArr)) {
                $proj_id = $projArr['Project']['id'];
            }
        }

        ######### Filter by Assign To ##########
        if ($caseMenuFilters == "assigntome") {
            $qry.= " AND ((ec.assign_to=" . SES_ID . ") OR (ec.assign_to=0 AND ec.user_id=" . SES_ID . "))";
        }
        ######### Filter by Delegate To ##########
        elseif ($caseMenuFilters == "delegateto") {
            $qry.= " AND ec.assign_to!=0 AND ec.assign_to!=" . SES_ID . " AND Easycase.user_id=" . SES_ID;
        } elseif ($caseMenuFilters == "closecase") {
            $qry.= " AND ec.legend='3' AND ec.type_id !='10'";
        }
        ######### Filter by Bug case ##########
        elseif ($caseMenuFilters == "bugcase") {
            $qry.= " AND ec.type_id = 1";
        }
        ######### Filter by Latest ##########
        elseif ($caseMenuFilters == "latest") {
            $qry_rest = $qry;
            $before = date('Y-m-d H:i:s', strtotime(GMT_DATETIME . "-2 day"));
            $all_rest = " AND ec.dt_created > '" . $before . "' AND ec.dt_created <= '" . GMT_DATETIME . "'";
            $qry_rest.= " AND ec.dt_created > '" . $before . "' AND ec.dt_created <= '" . GMT_DATETIME . "'";
        }
        if ($caseMenuFilters == "latest" && $proj_uniq_id != 'all') {
            $CaseCount3 = $this->Easycase->query("SELECT COUNT(ec.id) as count FROM easycases as ec WHERE istype='1' AND ec.isactive='1' AND ec.project_id='" . $proj_id . "' AND ec.project_id!=0  " . $searchcase . " " . trim($qry_rest));
            $CaseCount = $CaseCount3['0']['0']['count'];
            if ($CaseCount == 0) {
                $rest = $this->Easycase->query("SELECT dt_created FROM easycases WHERE project_id ='" . $proj_id . "' ORDER BY dt_created DESC LIMIT 0 , 1");
                @$sdate = explode(" ", @$rest[0]['easycases']['dt_created']);
                $qry.= " AND ec.dt_created >= '" . @$sdate[0] . "' AND ec.dt_created <= '" . GMT_DATETIME . "'";
            } else {
                $qry = $qry . $all_rest;
            }
        } elseif ($caseMenuFilters == "latest" && $proj_uniq_id == 'all') {
            $qry = $qry . $all_rest;
        }

        if ($proj_uniq_id != 'all') {
            $typeArr = array();
            $ProjectUser = ClassRegistry::init('ProjectUser');

            $typeArr = $this->ProjectUser->query("select DISTINCT t.name,t.id,t.short_name,(select count(ec.id) from easycases as ec where ec.istype='1' AND ec.type_id=t.id AND ec.isactive='1' AND ec.project_id='" . $proj_id . "' " . $qry . ") as count from types as t ORDER BY t.id");

            $this->set('proj_uniq_id', $proj_uniq_id);
            $this->set('proj_id', $proj_id);
            $this->set('typeArr', $typeArr);
            $this->set('CookieTypes', $_COOKIE['CS_TYPES']);
        }
        if ($proj_uniq_id == 'all') {
            $ProjectUser = ClassRegistry::init('ProjectUser');
            $typeArr = $ProjectUser->query("select DISTINCT t.name,t.id,t.short_name,(select count(ec.id) from easycases as ec,projects as p,project_users as ProjectUser,company_users as CompanyUser WHERE CompanyUser.user_id=ProjectUser.user_id AND p.id=ProjectUser.project_id AND CompanyUser.is_active='1' AND CompanyUser.company_id='" . SES_COMP . "' AND ProjectUser.user_id='" . SES_ID . "' AND p.isactive='1' AND ec.istype='1' AND ec.type_id=t.id AND ec.isactive='1' AND ec.project_id=p.id AND p.isactive='1' " . $qry . ") as count from types as t GROUP BY t.id  ORDER BY t.id");

            $this->set('proj_uniq_id', 'all');
            $this->set('proj_id', 'all');
            $this->set('typeArr', $typeArr);
            $this->set('CookieTypes', $_COOKIE['CS_TYPES']);
        }

        $this->set('caseMenuFilters', $caseMenuFilters);
    }

    public function ajax_members()
    {
        $this->layout = 'ajax';

        $proj_id = null;
        $pageload = 0;
        $proj_uniq_id = $this->params->data['projUniq'];
        $pageload = $this->params->data['pageload'];

        $this->loadModel('ProjectUser');
        $this->ProjectUser->bindModel(array('belongsTo' => array('Project')));

        $caseMenuFilters = "";
        if (isset($this->params->data['caseMenuFilters'])) {
            $caseMenuFilters = $this->params->data['caseMenuFilters'];
        }

        if ($proj_uniq_id != 'all') {
            $projArr = $this->ProjectUser->find('first', array('conditions' => array('Project.uniq_id' => $proj_uniq_id, 'ProjectUser.user_id' => SES_ID, 'Project.isactive' => 1), 'fields' => array('Project.id')));

            if (count($projArr)) {
                $proj_id = $projArr['Project']['id'];
            }
        }

        ######### Filter by Assign To ##########
        if ($caseMenuFilters == "assigntome") {
            $qry.= " AND ((Easycase.assign_to=" . SES_ID . ") OR (Easycase.assign_to=0 AND Easycase.user_id=" . SES_ID . "))";
        }
        ######### Filter by Delegate To ##########
        elseif ($caseMenuFilters == "delegateto") {
            $qry.= " AND Easycase.assign_to!=0 AND Easycase.assign_to!=" . SES_ID . " AND Easycase.user_id=" . SES_ID;
        } elseif ($caseMenuFilters == "closecase") {
            $qry.= " AND Easycase.legend='3' AND Easycase.type_id !='10'";
        }
        ######### Filter by Bug case ##########
        elseif ($caseMenuFilters == "bugcase") { /* By Smruti 0201 */
            $qry.= " AND Easycase.type_id ='1'";
        }
        ######### Filter by Latest ##########
        elseif ($caseMenuFilters == "latest") {
            $qry_rest = $qry;
            $before = date('Y-m-d H:i:s', strtotime(GMT_DATETIME . "-2 day"));
            $all_rest = " AND Easycase.dt_created > '" . $before . "' AND Easycase.dt_created <= '" . GMT_DATETIME . "'";
            $qry_rest.= " AND Easycase.dt_created > '" . $before . "' AND Easycase.dt_created <= '" . GMT_DATETIME . "'";
        }
        if ($caseMenuFilters == "latest" && $proj_uniq_id != 'all') {
            $CaseCount3 = $this->Easycase->query("SELECT COUNT(Easycase.id) as count FROM easycases as Easycase WHERE istype='1' AND Easycase.isactive='1' AND Easycase.project_id='" . $proj_id . "' AND Easycase.project_id!=0  " . $searchcase . " " . trim($qry_rest));
            $CaseCount = $CaseCount3['0']['0']['count'];
            if ($CaseCount == 0) {
                $rest = $this->Easycase->query("SELECT dt_created FROM easycases WHERE project_id ='" . $proj_id . "' ORDER BY dt_created DESC LIMIT 0 , 1");
                @$sdate = explode(" ", @$rest[0]['easycases']['dt_created']);
                $qry.= " AND Easycase.dt_created >= '" . @$sdate[0] . "' AND Easycase.dt_created <= '" . GMT_DATETIME . "'";
            } else {
                $qry = $qry . $all_rest;
            }
        } elseif ($caseMenuFilters == "latest" && $proj_uniq_id == 'all') {
            $qry = $qry . $all_rest;
        }

        if ($proj_uniq_id != 'all') {
            $memArr = $this->ProjectUser->query("SELECT DISTINCT User.id, User.name, User.email, User.istype,User.email,User.short_name,User.dt_last_login, (select count(id) from easycases as Easycase where Easycase.project_id='" . $proj_id . "' and Easycase.user_id=User.id and Easycase.istype='1' and Easycase.isactive='1' " . $qry . ") as cases FROM users as User,project_users as ProjectUser,company_users as CompanyUser WHERE CompanyUser.user_id=ProjectUser.user_id AND CompanyUser.is_active='1' AND CompanyUser.company_id='" . SES_COMP . "' AND ProjectUser.project_id='" . $proj_id . "' AND User.isactive='1' AND ProjectUser.user_id=User.id ORDER BY User.name");

            $this->set('proj_uniq_id', $proj_uniq_id);
            $this->set('proj_id', $proj_id);
            $this->set('memArr', $memArr);
            $this->set('CookieMem', $_COOKIE['MEMBERS']);

            $this->set('caseMenuFilters', $caseMenuFilters);
        }
        if ($proj_uniq_id == 'all') {
            $memArr = array();

            $cond = array('conditions' => array('ProjectUser.user_id' => SES_ID, 'ProjectUser.company_id' => SES_COMP, 'Project.isactive' => 1), 'fields' => array('DISTINCT  Project.id'), 'order' => array('ProjectUser.dt_visited DESC'));

            $allProjArr = $this->ProjectUser->find('all', $cond);
            $ids = array();

            foreach ($allProjArr as $csid) {
                array_push($ids, $csid['Project']['id']);
            }

            $memArr = $this->ProjectUser->query("SELECT DISTINCT User.id, User.name, User.email, User.istype,User.email,User.short_name,User.dt_last_login, (select count(id) from easycases as Easycase where Easycase.project_id IN (" . implode(",", $ids) . ") and Easycase.user_id=User.id and Easycase.istype='1' and Easycase.isactive='1' " . $qry . ") as cases FROM users as User,project_users as ProjectUser,company_users as CompanyUser WHERE CompanyUser.user_id=ProjectUser.user_id AND CompanyUser.is_active='1' AND CompanyUser.company_id='" . SES_COMP . "' AND ProjectUser.project_id IN (" . implode(",", $ids) . ") AND User.isactive='1' AND ProjectUser.user_id=User.id ORDER BY User.name");

            $this->set('proj_uniq_id', 'all');
            $this->set('proj_id', 'all');
            $this->set('memArr', $memArr);
            $this->set('CookieMem', $_COOKIE['MEMBERS']);

            $this->set('caseMenuFilters', $caseMenuFilters);
        }
    }

    public function ajax_top()
    {
        $this->layout = 'ajax';

        $proj_id = null;
        $pageload = 0;
        $proj_uniq_id = $this->params->data['projUniq'];
        $pageload = $this->params->data['pageload'];

        $this->loadModel('ProjectUser');
        $this->ProjectUser->bindModel(array('belongsTo' => array('Project')));
        $projArr = $this->ProjectUser->find('first', array('conditions' => array('Project.uniq_id' => $proj_uniq_id, 'ProjectUser.user_id' => SES_ID, 'Project.isactive' => 1), 'fields' => array('Project.id')));

        if (count($projArr)) {
            $proj_id = $projArr['Project']['id'];
        }

        $caseCond = array(
            'conditions' => array('Easycase.project_id' => $proj_id, 'Easycase.isactive' => 1, 'Easycase.istype' => 1, 'Easycase.type_id' => 10),
            'fields' => array('Easycase.title', 'Easycase.actual_dt_created', 'Easycase.uniq_id'),
            'order' => array('Easycase.actual_dt_created DESC')
        );
        $caseArr = $this->Easycase->find('all', $caseCond);

        $this->set('proj_uniq_id', $proj_uniq_id);
        $this->set('proj_id', $proj_id);
        $this->set('caseArr', $caseArr);

        if ($proj_id) {
            $CaseUserView = ClassRegistry::init('CaseUserView');
            $CaseUserView->query("DELETE FROM case_user_views WHERE istype='1' AND user_id='" . SES_ID . "' AND project_id=" . $proj_id);
        }
    }

    public function ajax_project_size()
    {
        $this->layout = 'ajax';
        $proj_id = null;
        $pageload = 0;
        $proj_uniq_id = $this->params->data['projUniq'];
        //$proj_uniq_id = 'c382c0fed9432723f70f8ac7a8ca9802';
        if (!$proj_uniq_id) {
            exit;
        }

        $pageload = $this->params->data['pageload'];
        $user_subscription = $GLOBALS['user_subscription'];

        if ($proj_uniq_id != 'all') {
            $this->loadModel('ProjectUser');
            $this->ProjectUser->bindModel(array('belongsTo' => array('Project')));
            $projArr = $this->ProjectUser->find('first', array('conditions' => array('Project.uniq_id' => $proj_uniq_id, 'ProjectUser.user_id' => SES_ID, 'Project.isactive' => 1), 'fields' => array('Project.id', 'Project.name', 'ProjectUser.id')));
            //echo "<pre>";print_r($projArr);exit;
            if (count($projArr)) {
                $proj_id = $projArr['Project']['id'];
                $proj_name = $projArr['Project']['name'];

                $ProjectUser['id'] = $projArr['ProjectUser']['id'];
                $ProjectUser['dt_visited'] = GMT_DATETIME;
                $this->ProjectUser->save($ProjectUser);
            }

            $usedspace = $this->Format->usedSpace($proj_id);
            $hspent = $this->Format->hoursspent($proj_id);
            $hspent = $hspent ? $hspent : 0;
            $arr['hourspent'] = "Hours Spent:&nbsp;<strong>" . $hspent . '</strong>';
            if ($user_subscription['storage'] != "Unlimited") {
                $arr['used_text'] = "<span>Using <strong>" . $usedspace . " Mb</strong> of storage </span>";
                $usedspace = $this->Format->fullSpace($usedspace, $user_subscription['storage']);
            } else {
                $arr['used_text'] = "<span>Using <strong>" . $usedspace . " Mb</strong> of storage</span>";
            }
            $arr['used_text'] .=" <span> | </span> <span>" . $arr['hourspent'] . '</span>';
            $arr['all'] = 0;
        } else {
            $arr['all'] = 1;
            $usedspace = $this->Format->usedSpace();
            $hspent = $this->Format->hoursspent('');
            $hspent = $hspent ? $hspent : 0;
            $arr['hourspent'] = "Hours Spent:&nbsp;<strong>" . $hspent . '</strong>';
            if ($user_subscription['storage'] != "Unlimited") {
                $arr['used_text'] = "<span>Using <strong>" . $usedspace . " Mb</strong> of storage</span> <span>|</span> <span>" . $arr['hourspent'] . '</span>';
                $percentage = $this->Format->fullSpace($usedspace, $user_subscription['storage']);
                if ($percentage >= 100) {
                    $percentage = 100;
                }
                $width = $percentage;
                if ($percentage >= 90) {
                    $class = "cmpl_red";
                } else {
                    $class = "cmpl_green";
                }
                $arr ['used_text'] .='<table cellpadding="0" cellspacing="0"><tr><td>' . $percentage . '% full</td>';
                if ($usedspace >= 1) {
                    $arr ['used_text'] .='<td style="padding-left:5px;"><div class="imprv_bar" style="width:100px;margin:0px;"><div style="width:' . $width . '%;" class="' . $class . '" ></div></td>';
                }
                $arr ['used_text'] .= '</tr></table>';
            } else {
                $arr['used_text'] = "<span>Using <strong>" . $usedspace . " Mb</strong> of storage</span> <span>|</span> <span>" . $arr['hourspent'] . '</span>';
            }

            //$this->set('proj_uniq_id',$proj_uniq_id);
        }

        // Last Project access activity
        $projArr = '';

        $this->ProjectUser->recursive = -1;
        $latestactivity = $this->ProjectUser->find('first', array('conditions' => array('ProjectUser.user_id =' => SES_ID), 'fields' => array('dt_visited', 'project_id'), 'order' => array('ProjectUser.dt_visited DESC')));
        $projArr = $latestactivity['ProjectUser']['project_id'];

        $this->Project->recursive = -1;
        $projArr = $this->Project->find('first', array('conditions' => array('Project.id' => $projArr, 'Project.isactive' => 1), 'fields' => array('Project.name', 'Project.id', 'Project.uniq_id')));

        if ($projArr['Project']['name']) {
            $arr ['last_activity'] = "<span>".__('Last Activity', true)."</span><span> | </span> <strong>" . $this->Format->shortLength($projArr['Project']['name'], 20) . "</strong> ";
            //$latestdt = $this->Casequery->getlatestactivity(SES_ID);
            if ($latestactivity['ProjectUser']['dt_visited'] && !stristr($latestactivity['ProjectUser']['dt_visited'], "0000")) {
                //$this->loadHelper('Tmzone');
                $view = new View($this);
                $tz = $view->loadHelper('Tmzone');
                $last_logindt = $tz->GetDateTime(SES_TIMEZONE, TZ_GMT, TZ_DST, TZ_CODE, $latestactivity['ProjectUser']['dt_visited'], "datetime");
                $locDResFun2 = $tz->GetDateTime(SES_TIMEZONE, TZ_GMT, TZ_DST, TZ_CODE, GMT_DATETIME, "date");
                $tz1 = $view->loadHelper('Datetime');
                $arr ['last_activity'] .= '<span>' . $tz1->dateFormatOutputdateTime_day($last_logindt, $locDResFun2) . '</span>';
                $arr['lastactivity_proj_id'] = $projArr['Project']['id'];
                $arr['lastactivity_proj_uid'] = $projArr['Project']['uniq_id'];
            }
        }
        echo json_encode($arr);
        exit;
    }

    public function ajax_project_name()
    {
        $this->layout = 'ajax';
        $proj_id = null;
        $pageload = 0;
        $projName = "";
        $puid = 0;
        $proj_uniq_id = $this->params->data['projUniq'];
        $pageload = $this->params->data['pageload'];
        if ($proj_uniq_id != 'all') {
            $this->ProjectUser->bindModel(array('belongsTo' => array('Project')));
            $projArr = $this->ProjectUser->find('first', array('conditions' => array('Project.uniq_id' => $proj_uniq_id, 'ProjectUser.user_id' => SES_ID, 'Project.isactive' => 1, 'Project.company_id' => SES_COMP), 'fields' => array('Project.name', 'ProjectUser.id')));

            if (count($projArr)) {
                $projName = $projArr['Project']['name'];
                $puid = $projArr['ProjectUser']['id'];
            }
            if ($puid) {
                $ProjectUser['id'] = $puid;
                $ProjectUser['dt_visited'] = GMT_DATETIME;
                $this->ProjectUser->save($ProjectUser);
            }
            $this->set('projName', $projName);
            $this->set('pageload', $pageload);
            $this->set('proj_uniq_id', $proj_uniq_id);
        } else {
            $this->set('projName', 'All');
            $this->set('pageload', $pageload);
            $this->set('proj_uniq_id', 'all');
        }
    }

    public function ajax_project_logo()
    {
        $this->layout = 'ajax';
        $projName = "";
        $projLogo = "";
        $proj_uniq_id = $this->params->data['projUniq'];
        $pageload = $this->params->data['pageload'];
        if ($proj_uniq_id != 'all') {
            $this->Project->recursive = -1;
            $projArr = $this->Project->find('first', array('conditions' => array('Project.uniq_id' => $proj_uniq_id), 'fields' => array('Project.name', 'Project.logo')));

            if (count($projArr)) {
                $projName = $projArr['Project']['name'];
                $projLogo = $projArr['Project']['logo'];
            }

            $this->set('projName', $projName);
            $this->set('projLogo', $projLogo);
        } else {
            $this->set('projName', '');
            $this->set('projLogo', '');
        }
    }

    public function ajax_search()
    {
        $this->layout = 'ajax';
        $projShortName = null;
        $srchstr = $this->params->data['srch'];
        $page = $this->params->data['page'];
        $params = $this->params->data['page'];
        $caseSearch = array();
        $prj_res = array();
        $usr_res = array();
        $file_res = array();
        $mileSearch = array();

        $clt_sql = 1;
        if ($this->Auth->user('is_client') == 1) {
            $clt_sql = "((Easycase.client_status = " . $this->Auth->user('is_client') . " AND Easycase.user_id = " . $this->Auth->user('id') . ") OR Easycase.client_status != " . $this->Auth->user('is_client') . ")";
        }
        $lmit = 10;
        if (defined('TASK_SEARCH_LIMIT')) {
            $lmit = TASK_SEARCH_LIMIT;
        }
        if (trim(urldecode($srchstr))) {
            if ($page == "users") {
                $srchstr_t = addslashes(trim(urldecode($srchstr)));
                $srchstr = $srchstr_t;
                $cond = "1";
                if (SES_TYPE == 3) {
                    $cond = "CompanyUser.user_type = '3'";
                }
                $usr_sql = "SELECT User.id,User.name,User.last_name,User.short_name,User.email,User.uniq_id,CompanyUser.is_active,UserInvitation.is_active
			FROM users AS User LEFT JOIN company_users AS CompanyUser ON (User.id=CompanyUser.user_id) LEFT JOIN user_invitations AS UserInvitation
			ON (User.id=UserInvitation.user_id) WHERE (User.name LIKE '%" . trim($srchstr) . "%'  OR User.last_name LIKE '%" . trim($srchstr) . "%' OR 
			User.email LIKE '%" . trim($srchstr) . "%'  OR User.short_name LIKE '%" . trim($srchstr) . "%') AND User.name !='' AND (" . $cond . " AND 
			CompanyUser.company_id='" . SES_COMP . "' AND ((CompanyUser.is_active = '0' OR CompanyUser.is_active = '1') OR (UserInvitation.company_id='" . SES_COMP . "' AND UserInvitation.is_active='1')))
			    GROUP BY User.id ORDER BY User.name LIMIT 0,".$lmit;

                $usr_res = $this->User->query($usr_sql);
            } elseif ($page == "defect") {
                $this->loadModel("Defect");
                $srchstr_t = addslashes(trim(urldecode($srchstr)));
                $srchstr = $srchstr_t;
                $dft_sql = "SELECT Defect.id,Defect.uniq_id,Defect.title,Defect.is_active FROM defects AS Defect WHERE Defect.title!='' AND (Defect.title LIKE '%" . trim($srchstr) . "%')
			    AND Defect.company_id='" . SES_COMP . "' ;";
                $dft_res = $this->Defect->query($dft_sql);
            } elseif ($page == "projects") {
                $srchstr_t = addslashes(trim(urldecode($srchstr)));
                $srchstr = $srchstr_t;
                if (SES_TYPE == 3) {
                    $prj_sql = "SELECT Project.id,Project.uniq_id,Project.name,Project.short_name,Project.isactive FROM projects AS Project,
			project_users AS ProjectUser  WHERE Project.name!='' AND (Project.name LIKE '%" . trim($srchstr) . "%'  
			OR Project.short_name LIKE '%" . trim($srchstr) . "%') AND Project.company_id='" . SES_COMP . "' 
			AND Project.id=ProjectUser.project_id and ProjectUser.user_id='" . SES_ID . "' GROUP BY Project.id ORDER BY Project.name LIMIT 0,".$lmit;
                } else {
                    $prj_sql = "SELECT Project.id,Project.uniq_id,Project.name,Project.short_name,Project.isactive FROM projects AS Project WHERE Project.name!='' AND (Project.name LIKE '%" . trim($srchstr) . "%'
			OR Project.short_name LIKE '%" . trim($srchstr) . "%') AND Project.company_id='" . SES_COMP . "' 
			GROUP BY Project.id ORDER BY Project.name LIMIT 0,".$lmit;
                }

                $prj_res = $this->Project->query($prj_sql);
            } elseif ($page == "files") {
                $srchstr_t = addslashes(trim(urldecode($srchstr)));
                $srchstr = $srchstr_t;
                $this->loadModel('CaseFile');
                $condtn = "";
                if (SES_TYPE == 3 || 1) {
                    $condtn = " AND ProjectUser.user_id='" . SES_ID . "' AND ProjectUser.project_id=Project.id";
                }
                $pjuniq = $this->params->data['pjuniq'];
                if ($pjuniq != 'all') {
                    $condtn .= " AND Project.uniq_id ='" . $pjuniq . "'";
                }
                $file_sql = "SELECT Easycase.id,Easycase.uniq_id,Easycase.case_no,Easycase.user_id,Easycase.dt_created,Easycase.actual_dt_created,Easycase.istype,Easycase.project_id,Easycase.legend,CaseFile.*,Project.uniq_id FROM easycases as Easycase,case_files as CaseFile,projects as Project,project_users as ProjectUser WHERE Easycase.id=CaseFile.easycase_id AND Easycase.project_id=Project.id AND Easycase.isactive='1' AND " . $clt_sql . " AND Easycase.project_id=CaseFile.project_id AND Easycase.project_id!=0 AND CaseFile.isactive='1' AND CaseFile.company_id='" . SES_COMP . "' AND CaseFile.file LIKE '%" . trim($srchstr) . "%' " . $condtn . " ORDER BY Easycase.actual_dt_created DESC LIMIT 0,".$lmit;

                $file_res = $this->CaseFile->query($file_sql);
            } else {
                $pjuniq = $this->params->data['pjuniq'];

                $searchString = "";
                if ((substr($srchstr, 0, 1)) == '#') {
                    $tmp = explode("#", $srchstr);
                    $caseno = trim($tmp['1']);
                    $searchString = " AND (Easycase.case_no = '" . $caseno . "')";
                } else {
                    $searchString = $this->Format->caseKeywordSearch($srchstr, 'half');
                }
                if (trim($pjuniq) == 'all' || trim($pjuniq) == '') {
                    $projId = 0;
                    $this->ProjectUser->bindModel(array('belongsTo' => array('Project')));
                    $projArr = $this->ProjectUser->find('all', array('conditions' => array('ProjectUser.user_id' => SES_ID, 'Project.isactive' => 1, 'ProjectUser.company_id' => SES_COMP), 'fields' => array('DISTINCT ProjectUser.project_id')));
                    if (count($projArr)) {
                        $projId = array();
                        foreach ($projArr as $pr) {
                            array_push($projId, $pr['ProjectUser']['project_id']);
                        }
                    }
                    if ($params == 'taskgroup') {
                        $mileSearch = $this->Milestone->query("SELECT Milestone.id,Milestone.title,Milestone.description,Milestone.project_id,Milestone.uniq_id FROM milestones as Milestone WHERE Milestone.project_id IN (" . implode(",", $projId) . ") AND  Milestone.isactive='1'  AND (Milestone.title like '%" . $srchstr . "%' ) LIMIT 0,".$lmit);
                    } else {
                        $caseSearch = $this->Easycase->query("SELECT Easycase.case_no,Easycase.title,Easycase.message,Easycase.project_id,Easycase.uniq_id FROM easycases as Easycase" . $mlstnQ1 . " WHERE Easycase.project_id IN (" . implode(",", $projId) . ") AND " . $clt_sql . " AND Easycase.istype='1'  " . $mlstnQ2 . " " . trim($searchString) . " ORDER BY Easycase.id ASC LIMIT 0,".$lmit);
                    }
                } else {
                    $projId = 0;
                    $this->ProjectUser->bindModel(array('belongsTo' => array('Project')));
                    $projArr = $this->ProjectUser->find('all', array('conditions' => array('ProjectUser.user_id' => SES_ID, 'Project.isactive' => 1, 'Project.uniq_id' => $pjuniq), 'fields' => array('DISTINCT ProjectUser.project_id')));
                    $pjid = $projArr['0']['ProjectUser']['project_id'];
                    if ($params == 'taskgroup') {
                        $mileSearch = $this->Milestone->query("SELECT Milestone.id,Milestone.title,Milestone.description,Milestone.project_id,Milestone.uniq_id FROM milestones as Milestone WHERE Milestone.project_id ='" . $pjid . "' AND  Milestone.isactive='1'  AND (Milestone.title like '%" . $srchstr . "%' ) LIMIT 0,".$lmit);
                        $caseSearch = $this->Easycase->query("SELECT Easycase.case_no,Easycase.title,Easycase.message,Easycase.project_id,Easycase.uniq_id FROM easycases as Easycase" . $mlstnQ1 . " WHERE Easycase.project_id='" . $pjid . "' AND " . $clt_sql . " AND Easycase.istype='1'  " . $mlstnQ2 . " " . trim($searchString) . " ORDER BY Easycase.id ASC LIMIT 0,".$lmit);
                    } else {
                        $caseSearch = $this->Easycase->query("SELECT Easycase.case_no,Easycase.title,Easycase.message,Easycase.project_id,Easycase.uniq_id FROM easycases as Easycase" . $mlstnQ1 . " WHERE Easycase.project_id='" . $pjid . "' AND " . $clt_sql . " AND Easycase.istype='1'  " . $mlstnQ2 . " " . trim($searchString) . " ORDER BY Easycase.id ASC LIMIT 0,".$lmit);
                    }
                }
            }
        }
        $results['cases'] = $caseSearch;
        $results['page'] = $page;
        $results['defect'] = $dft_res;
        $results['projects'] = $prj_res;
        $results['users'] = $usr_res;
        $results['files'] = $file_res;
        $results['milestone'] = $mileSearch;
        $this->set('results', $results);
        $this->set('pjShrtName', $projShortName);
        $this->set('srchstr', $srchstr);
    }

    public function ajax_filter_set()
    {
        $this->layout = 'ajax';
        $order = "";
        if (isset($_GET['widget'])) {
            foreach ($_GET['widget'] as $position => $item) {
                $order.=trim($item) . ",";
            }
            $order = substr($order, 0, -1);
        }
        if ($order) {
            $id = 0;
            $this->loadModel('CaseFilter');
            $casefilter = $this->CaseFilter->find('first', array('conditions' => array('CaseFilter.user_id' => SES_ID), 'fields' => array('CaseFilter.id')));
            if (count($casefilter)) {
                $id = $casefilter['CaseFilter']['id'];
            }
            if ($id) {
                $CaseFilter['id'] = $id;
                $CaseFilter['order'] = $order;
                $this->CaseFilter->save($CaseFilter);
            } else {
                $CaseFilter['user_id'] = SES_ID;
                $CaseFilter['order'] = $order;
                $this->CaseFilter->save($CaseFilter);
            }
        }
        exit;
    }

    public function case_quick()
    {
        $this->_datestime();
        $this->layout = '';
        if (isset($this->data['csuniqid']) && $this->data['csuniqid']) {
            $taskdetails = $this->Easycase->findByUniqId($this->data['csuniqid'], array('Easycase.*'), array('Easycase.id' => 'asc'));
            $this->set('taskdetails', $taskdetails['Easycase']);
        }
        $uniqid = $this->params->data['sel_myproj'];
        if ($uniqid == 'all') {
            $quickMem = array();
        } else {
            $quickMem = $this->Easycase->getMemebers($uniqid);
        }
        $quickTyp = $this->Format->getTypes();

        $this->set('quickTyp', $quickTyp);
        $this->set('quickMem', $quickMem);

        $this->loadModel('Type');
        $select = $this->Type->find('all', array('order' => 'Type.seq_order ASC'));
        $this->set('select', $select);

        $CaseTemplate = ClassRegistry::init('CaseTemplate');
        $CaseTemplate->recursive = -1;
        $getTmpl = $CaseTemplate->find('all', array('conditions' => array("OR" => array(
                    'AND' => array(
                        'CaseTemplate.is_active' => 1,
                        'CaseTemplate.company_id' => SES_COMP
                    ),
                    array(
                        'CaseTemplate.is_active' => 1,
                        'CaseTemplate.user_id' => 0,
                        'CaseTemplate.company_id' => 0))), 'order' => 'CaseTemplate.name ASC'));
        $this->set('getTmpl', $getTmpl);

        $prj = $this->Project->findByUniqId($uniqid);
        $pid = $prj['Project']['id'];
        $defaultAssign = $prj['Project']['default_assign'];

        $checkQuery = "SELECT Milestone.id,Milestone.title,Milestone.uniq_id FROM milestones AS Milestone,project_users AS ProjectUser WHERE Milestone.project_id=ProjectUser.project_id AND Milestone.isactive=1 AND ProjectUser.user_id=" . SES_ID . " AND Milestone.project_id='" . $pid . "' AND Milestone.company_id='" . SES_COMP . "'";
        $checkMstn = $this->Milestone->query($checkQuery);

        $this->set('milestone', $checkMstn);
        $this->set('prid', $pid);
        $this->set('defaultAssign', $defaultAssign);
    }

    public function ajax_quickcase_mem()
    {
        $this->layout = 'ajax';
        $result = array();

        $uniqid = $this->params->data['projUniq'];
        $quickMem = $this->Easycase->getMemebers($uniqid);
        //$this->set('quickMem',$quickMem);
        $result['quickMem'][$uniqid] = $quickMem;

        if (isset($this->data['csuniqid']) && $this->data['csuniqid']) {
            $CaseUserEmail = ClassRegistry::init('CaseUserEmail');
            $CaseUserEmail->recursive = -1;
            $dassign = $CaseUserEmail->find('list', array('conditions' => array('CaseUserEmail.easycase_id' => $this->data['csuniqid'], 'CaseUserEmail.ismail' => 1), 'fields' => array('CaseUserEmail.user_id')));
            //$this->set('dassign',$dassign);
            $result['dassign'] = $dassign;
        } //else{
        $prj = $this->Project->findByUniqId($uniqid);
        if (!empty($this->params->data['default_assign'])) {
            $defaultAssign =$this->params->data['default_assign'];
        } else {
            $defaultAssign = $prj['Project']['default_assign'];
        }
        //$this->set('defaultAssign',$defaultAssign);
        $result['defaultAssign'] = $defaultAssign;
        $this->loadModel('TypeCompany');
        $result['defaultTaskType'] = (!empty($prj['Project']['task_type']))?$this->TypeCompany->getCheckedTaskType($prj['Project']['task_type'], SES_COMP):0;
        $result['project_methodology'] = $prj['Project']['project_methodology_id'];
        //}
        //$result['parent_tasks'] = $this->Easycase->parentTaskOptions($prj['Project']['id'], $this->data['csuniqid']);
        $result['parent_tasks'] = array();
        $this->set('result', json_encode($result));
    }

    public function ajax_default_email()
    {
        $this->layout = 'ajax';
        $uniqid = $this->params->data['projUniq'];
        $quickMem = $this->Easycase->getMemebers($uniqid, 'default');
        $this->set('quickMem', $quickMem);
    }

    public function ajax_case_files()
    {
        $this->layout = 'ajax';
        $QckCaseFiles = array();
        $CaseFile = ClassRegistry::init('CaseFile');

        if (isset($this->params->data['remid']) && $this->params->data['remid']) {
            unlink(DIR_CASE_FILES . $this->params->data['files']);
            $CaseFile->query("DELETE FROM case_files WHERE id=" . $this->params->data['remid']);
        }

        if (isset($this->params->data['easycaseid']) && $this->params->data['easycaseid']) {
            $easycaseid = $this->params->data['easycaseid'];
            $QckCaseFiles = $CaseFile->find('all', array('conditions' => array('CaseFile.easycase_id' => $easycaseid)));
        }
        if (isset($this->params->data['remid']) && $this->params->data['remid']) {
            if (count($QckCaseFiles) == 0) {
                $this->Easycase->query("UPDATE easycases SET format='2' WHERE id=" . $easycaseid);
            }
        }
        $this->set('QckCaseFiles', $QckCaseFiles);
    }

    public function case_message()
    {
        $this->layout = 'ajax';
        $page = "";
        if (isset($this->params->data['page'])) {
            $page = $this->params->data['page'];
        }

        $ProjectUser = ClassRegistry::init('ProjectUser');
        $ProjectUser->unbindModel(array('belongsTo' => array('User')));
        $projUsrViewArr = $ProjectUser->find('all', array('conditions' => array('ProjectUser.user_id' => SES_ID), 'fields' => array('DISTINCT Project.id,Project.name,Project.uniq_id')));

        $this->set('projUsrViewArr', $projUsrViewArr);
        $this->set('page', $page);
    }

    public function ajax_change_assign()
    {
        $this->layout = 'ajax';
        $assignto = $this->params->data['assignto'];

        if ($assignto == "NA") {
            echo "<font color='#A5A5A5'>NA</font>";
        } elseif ($assignto == "Me") {
            echo "<font color='#A5A5A5'>Me</font>";
        } elseif (!$assignto) {
            echo "Me";
        } elseif ($assignto == SES_ID) {
            echo "Me";
        } else {
            $userData = $this->Format->getUserShortName($assignto);
            echo $userData['User']['short_name'];
        }
        exit;
    }

    public function ajax_comments()
    {
        $this->layout = 'ajax';
        $replyid = $this->params->data['replyid'];
        $this->set('replyid', $replyid);
    }

    public function ajax_detchange_milestone()
    {
        $this->layout = 'ajax';
        $caseId = $this->data['caseId'];
        $mlstnId = $this->data['mlstnId'];
        $projUid = $this->data['projUid'];
        $d = new DateTime();
        $view = new View($this);
        $da = $d->format('Y-m-d H:i:s');
        $dt = $view->loadHelper('Datetime');
        $tz = $view->loadHelper('Tmzone');
        $curDateTz = $tz->GetDateTime(SES_TIMEZONE, TZ_GMT, TZ_DST, TZ_CODE, GMT_DATETIME, "datetime");
        $updTzDate = $tz->GetDateTime(SES_TIMEZONE, TZ_GMT, TZ_DST, TZ_CODE, $da, "datetime");
        $last_updated = $dt->dateFormatOutputdateTime_day($updTzDate, $curDateTz);
        $arr['last_updated'] = $last_updated;

        //$projId = $this->Project->Find('first', array('conditions' => array('Project.uniq_id' => $projUid), 'fields' => array('Project.id'), 'recursive' => -1));
        $projId = $this->Easycase->Find('first', array('conditions' => array('Easycase.id' => $caseId), 'fields' => array('Easycase.id','Easycase.project_id','Easycase.parent_task_id'), 'recursive' => -1));
        if ($_SESSION['project_methodology'] == 'scrum') {
            $arr['project_methodology'] = 2;
        } else {
            $arr['project_methodology'] = 1;
        }
        if (empty($projId)) {
            $arr['msg'] = 'fail';
        } else {
            $this->loadModel('EasycaseMilestone');
            $project_id = $projId['Easycase']['project_id'];
            $parent_task_id = $projId['Easycase']['parent_task_id'];
            $cur_mils_id = $this->EasycaseMilestone->getCurrentMilestone($caseId, $project_id);
            if ($cur_mils_id == $mlstnId) {
                $arr['msg'] = 'success';
                echo json_encode($arr);
                exit;
            }
            $hasParent = 0;
            if (!empty($parent_task_id)) {
                //fetch parent tasks to check if has any parent task
                /*$parentTasks = $this->Easycase->getSubTasks($parent_task_id);
                if (!empty($parentTasks['task'])) {
                    //not permitted to move child task to another milestone.
                    $hasParent = 0; //allow to move child to another
                }*/
            }
            //fetch children tasks to update milestone id
            $childTasks = $this->Easycase->getSubTaskChild($caseId, $project_id);
            if (!empty($childTasks['child'])) {
                $taskid = array_merge(array($caseId), $childTasks['child']);
            } else {
                $taskid = $caseId;
            }
            $milestonedata = $this->EasycaseMilestone->find('all', array('conditions' => array('EasycaseMilestone.easycase_id' => $taskid, 'EasycaseMilestone.project_id' => $project_id)));
            if (!empty($milestonedata) && $mlstnId != '0') { //move to milestone
                #$counter = 0;
                foreach ($milestonedata as $mldata) {
                    $postParams = array();
                    $postParams['EasycaseMilestone']['id'] = $mldata['EasycaseMilestone']['id'];
                    $postParams['EasycaseMilestone']['easycase_id'] = $mldata['EasycaseMilestone']['easycase_id'];
                    $postParams['EasycaseMilestone']['milestone_id'] = $mlstnId;
                    $postParams['EasycaseMilestone']['project_id'] = $mldata['EasycaseMilestone']['project_id'];
                    //$postParams['EasycaseMilestone']['user_id'] = $mldata['EasycaseMilestone']['user_id'];
                    $postParams['EasycaseMilestone']['user_id'] = SES_ID; //20-06-2018
                    $postParams['EasycaseMilestone']['id_seq'] = $mldata['EasycaseMilestone']['id_seq'];
                    #$postParams['EasycaseMilestone']['id_seq'] = ++$counter;
                    if ($this->EasycaseMilestone->save($postParams)) {
                        $arr['msg'] = 'success';
                    } else {
                        $arr['msg'] = 'fail';
                    }
                }
            } elseif ($milestonedata && $mlstnId == '0') { //move to default milestone
                $milstin_ids = Hash::extract($milestonedata, '{n}.EasycaseMilestone.id');
                if ($this->EasycaseMilestone->deleteAll(array('EasycaseMilestone.id' => $milstin_ids,'EasycaseMilestone.easycase_id' => $taskid, 'EasycaseMilestone.project_id' => $project_id))) {
                    $arr['msg'] = 'success';
                } else {
                    $arr['msg'] = 'fail';
                }
            } else {
                if ($mlstnId != 0) { // move from default to milestone
                    if (!empty($taskid) && is_array($taskid)) {
                        $counter = 0;
                        foreach ($taskid as $easycase_id) {
                            $postParams['EasycaseMilestone']['easycase_id'] = $easycase_id;
                            $postParams['EasycaseMilestone']['milestone_id'] = $mlstnId;
                            $postParams['EasycaseMilestone']['project_id'] = $project_id;
                            $postParams['EasycaseMilestone']['user_id'] = SES_ID;
                            $postParams['EasycaseMilestone']['created'] = GMT_DATETIME;
                            $postParams['EasycaseMilestone']['id_seq'] = ++$counter;
                            if ($this->EasycaseMilestone->saveAll($postParams)) {
                                $arr['msg'] = 'success';
                            } else {
                                $arr['msg'] = 'fail';
                            }
                        }
                    } else {
                        $postParams['EasycaseMilestone']['easycase_id'] = $caseId;
                        $postParams['EasycaseMilestone']['milestone_id'] = $mlstnId;
                        $postParams['EasycaseMilestone']['project_id'] = $project_id;
                        $postParams['EasycaseMilestone']['user_id'] = SES_ID;
                        $postParams['EasycaseMilestone']['created'] = GMT_DATETIME;
                        $postParams['EasycaseMilestone']['id_seq'] = 0;
                        if ($this->EasycaseMilestone->save($postParams)) {
                            $arr['msg'] = 'success';
                        } else {
                            $arr['msg'] = 'fail';
                        }
                    }
                } else {
                    $arr['msg'] = 'success';
                }
            }
        }
        if ($arr['msg'] == 'success') {
            //remove the parent task id if only chind moving to milestone
            if (!empty($parent_task_id)) {
                if (!$this->EasycaseMilestone->checkParentInMilestone($parent_task_id, $project_id, $cur_mils_id)) {
                    $this->Easycase->updateAll(array('Easycase.parent_task_id' => null), array('Easycase.id' => $caseId, 'Easycase.project_id' => $project_id));
                }
            }
        }
        echo json_encode($arr);
        exit;
    }

    public function ajax_change_priority()
    {
        $this->layout = 'ajax';
        $priority = "";
        $caseId = "";
        $response = "";
        $priority = $this->params->data['priority'];
        $caseId = $this->params->data['caseId'];

        $d = new DateTime();
        $view = new View($this);
        $da = $d->format('Y-m-d H:i:s');
        $dt = $view->loadHelper('Datetime');
        $tz = $view->loadHelper('Tmzone');
        $curDateTz = $tz->GetDateTime(SES_TIMEZONE, TZ_GMT, TZ_DST, TZ_CODE, GMT_DATETIME, "datetime");
        $updTzDate = $tz->GetDateTime(SES_TIMEZONE, TZ_GMT, TZ_DST, TZ_CODE, $da, "datetime");
        $last_updated = $dt->dateFormatOutputdateTime_day($updTzDate, $curDateTz);
        $getCase = $this->Easycase->find('first', array(
            'conditions' => array(
                'Easycase.id' => $caseId, 'Easycase.isactive' => 1,'Easycase.istype' => 1
            ),
            'fields' => array('Easycase.id','Easycase.uniq_id','Easycase.title','Easycase.project_id','Easycase.case_no','Easycase.user_id','Easycase.type_id','Easycase.priority','Easycase.assign_to','Easycase.story_point','Easycase.legend','Easycase.custom_status_id','Easycase.reply_type','Easycase.dt_created','Easycase.estimated_hours','Easycase.status','Easycase.gantt_start_date','Easycase.due_date')
        ));
        if ($getCase) {
            $cs_cnt_upd = $getCase['Easycase']['case_count']+1;
            $this->Easycase->updateAll(array('priority' => $priority, 'updated_by' => SES_ID,'case_count' =>$cs_cnt_upd ,'dt_created' => "'".GMT_DATETIME."'"), array('id'=>$caseId,'project_id'=>$getCase['Easycase']['project_id']));
            $getCase['Easycase']['priority'] = $priority;
            $getCase['Easycase']['dt_created'] = GMT_DATETIME;
            $getCase['Easycase']['case_count'] = $getCase['Easycase']['case_count']+1;
            $getCase['Easycase']['updated_by'] = SES_ID;
            $curCaseId = $this->Easycase->insertCommentThreadCommon($getCase, 'priority', $priority);
            //Jyoti End

            $protyCls = '';
            $protyTtl = '';
            if ($casePriRep == 0) {
                $protyCls = 'high_priority';
                $protyTtl = 'High';
            } elseif ($casePriRep == 1) {
                $protyCls = 'medium_priority';
                $protyTtl = 'Medium';
            } elseif ($casePriRep == 2) {
                $protyCls = 'low_priority';
                $protyTtl = 'Low';
            }
            $protyCls = '';
            $protyTtl = '';
            if ($priority == "NULL" || $priority == "") {
                echo "";
            }
            if ($priority == 0) {
                $protyCls = 'high_priority';
                $protyTtl = 'High';
            } elseif ($priority == 1) {
                $protyCls = 'medium_priority';
                $protyTtl = 'Medium';
            } elseif ($priority >= 2) {
                $protyCls = 'low_priority';
                $protyTtl = 'Low';
            }
            $response = json_encode(array('curCaseId' => $curCaseId, 'protyCls' => $protyCls, 'protyTtl' => $protyTtl, 'last_updated' => $last_updated));
        }
        echo $response;
        exit;
        $this->set('response', $response);
    }

    public function ajax_change_estHour()
    {
        $this->layout = 'ajax';
        $caseId = $this->request->data['caseId'];
        $estHour = $this->request->data['estHour'];
        $d = new DateTime();
        $view = new View($this);
        $da = $d->format('Y-m-d H:i:s');
        $dt = $view->loadHelper('Datetime');
        $tz = $view->loadHelper('Tmzone');
        $curDateTz = $tz->GetDateTime(SES_TIMEZONE, TZ_GMT, TZ_DST, TZ_CODE, GMT_DATETIME, "datetime");
        $updTzDate = $tz->GetDateTime(SES_TIMEZONE, TZ_GMT, TZ_DST, TZ_CODE, $da, "datetime");
        $last_updated = $dt->dateFormatOutputdateTime_day($updTzDate, $curDateTz);

        /* saving in secs */
        $estHour = trim($estHour) != '' ? trim($estHour) : '0';
        if (strpos($estHour, ':') > -1) {
            $split_est = explode(':', $estHour);
            $est_sec = ((($split_est[0]) * 60) + intval($split_est[1])) * 60;
        } else {
            $est_sec = $estHour * 3600;
        }
        $estHour = $est_sec;
        if ($estHour == '0') {
            $est_sec = '';
        }
        /* end */
        $getCase = $this->Easycase->find('first', array(
            'conditions' => array(
                'Easycase.id' => $caseId, 'Easycase.isactive' => 1,'Easycase.istype' => 1
            ),
            'fields' => array('Easycase.id','Easycase.uniq_id','Easycase.title','Easycase.project_id','Easycase.case_no','Easycase.user_id','Easycase.type_id','Easycase.priority','Easycase.assign_to','Easycase.story_point','Easycase.legend','Easycase.custom_status_id','Easycase.reply_type','Easycase.dt_created','Easycase.estimated_hours','Easycase.status','Easycase.gantt_start_date','Easycase.due_date','Easycase.message')
        ));
        if ($getCase) {
            $cs_cnt_upd = $getCase['Easycase']['case_count']+1;
            $this->Easycase->updateAll(array('estimated_hours' => $estHour, 'updated_by' => SES_ID,'case_count' =>$cs_cnt_upd ,'dt_created' => "'".GMT_DATETIME."'"), array('id'=>$caseId,'project_id'=>$getCase['Easycase']['project_id']));
            $getCase['Easycase']['estimated_hours'] = $estHour;
            $getCase['Easycase']['dt_created'] = GMT_DATETIME;
            $getCase['Easycase']['case_count'] = $getCase['Easycase']['case_count']+1;
            $getCase['Easycase']['updated_by'] = SES_ID;
            
            $curCaseId = $this->Easycase->insertCommentThreadCommon($getCase, 'estimated_hours', $estHour);
        }
        $isAssignedUserFree = 1;
        $postParam = $getCase;
        if ($this->Format->isResourceAvailabilityOn()) {
            $this->Format->delete_booked_hours(array('easycase_id' => $postParam['Easycase']['id'], 'project_id' => $postParam['Easycase']['project_id']), 1);
            if ($est_sec != '' && $postParam['Easycase']['gantt_start_date'] != '' && $postParam['Easycase']['assign_to'] != 0) {
                $isAssignedUserFree = $this->Postcase->setBookedData($postParam, $estHour, $caseId, SES_COMP);
            }
        }
        $this->Format->createGoogleCalendarEvent($getCase['Easycase']['id'], $getCase['Easycase'], 'edit');
        $postParam['Easycase']['gantt_start_date'] = $this->Tmzone->GetDateTime(SES_TIMEZONE, TZ_GMT, TZ_DST, TZ_CODE, $postParam['Easycase']['gantt_start_date'], "date");
        $postParam['Easycase']['due_date'] = $this->Tmzone->GetDateTime(SES_TIMEZONE, TZ_GMT, TZ_DST, TZ_CODE, $postParam['Easycase']['due_date'], "date");
        echo json_encode(array('success' => 'success','isAssignedUserFree'=>$isAssignedUserFree,'task_details'=>$postParam, 'curCaseId' => $curCaseId, 'last_updated' => $last_updated));
        exit;
    }

    public function ajax_change_storyPoint()
    {
        $this->layout = 'ajax';
        $caseId = $this->request->data['caseId'];
        $caseUId = $this->request->data['caseUId'];
        $story_point = $this->request->data['story_point'];

        /* saving in secs */
        $story_point = trim($story_point) != '' ? trim($story_point) : '0';
        if ($story_point == '0') {
            //exit;
        }
        /* end */
        $getCase = $this->Easycase->find('first', array(
            'conditions' => array(
                //'id' => $caseId, 'isactive' => 1, 'legend' => array(1, 2, 4, 6)
                'Easycase.id' => $caseId, 'Easycase.uniq_id' => $caseUId, 'Easycase.isactive' => 1,'Easycase.istype' => 1
            ),
            'fields' => array('Easycase.id','Easycase.uniq_id','Easycase.title','Easycase.project_id','Easycase.case_no','Easycase.user_id','Easycase.type_id','Easycase.priority','Easycase.assign_to','Easycase.story_point','Easycase.legend','Easycase.custom_status_id','Easycase.reply_type','Easycase.dt_created','Easycase.estimated_hours','Easycase.status','Easycase.gantt_start_date','Easycase.due_date')
        ));
        if ($getCase) {
            $cs_cnt_upd = $getCase['Easycase']['case_count']+1;
            $this->Easycase->updateAll(array('story_point' => $story_point, 'updated_by' => SES_ID,'case_count' =>$cs_cnt_upd ,'dt_created' => "'".GMT_DATETIME."'"), array('id'=>$caseId,'project_id'=>$getCase['Easycase']['project_id']));
            $getCase['Easycase']['story_point'] = $story_point;
            $getCase['Easycase']['dt_created'] = GMT_DATETIME;
            $getCase['Easycase']['case_count'] = $getCase['Easycase']['case_count']+1;
            $getCase['Easycase']['updated_by'] = SES_ID;
            
            $curCaseId = $this->Easycase->insertCommentThreadCommon($getCase, 'story_point', $story_point);
        }
        $isAssignedUserFree = 1;
        //$postParam = $this->Easycase->find('first', array('conditions' => array('Easycase.id' => $caseId)));
        $postParam = $getCase;
        $postParam['Easycase']['gantt_start_date'] = $this->Tmzone->GetDateTime(SES_TIMEZONE, TZ_GMT, TZ_DST, TZ_CODE, $postParam['Easycase']['gantt_start_date'], "date");
        $postParam['Easycase']['due_date'] = $this->Tmzone->GetDateTime(SES_TIMEZONE, TZ_GMT, TZ_DST, TZ_CODE, $postParam['Easycase']['due_date'], "date");
        echo json_encode(array('success' => 'success','isAssignedUserFree'=>$isAssignedUserFree,'task_details'=>$postParam, 'curCaseId' => $curCaseId));
        exit;
    }
    public function ajax_change_completedTask()
    {
        $this->layout = 'ajax';

        $caseId = $this->request->data['caseId'];
        $cmpltask = $this->request->data['cmpltask'];

        $getCase = $this->Easycase->find('first', array(
            'conditions' => array(
                'Easycase.id' => $caseId, 'Easycase.isactive' => 1,'Easycase.istype' => 1
            ),
            'fields' => array('Easycase.id','Easycase.uniq_id','Easycase.title','Easycase.project_id','Easycase.case_no','Easycase.user_id','Easycase.type_id','Easycase.priority','Easycase.assign_to','Easycase.story_point','Easycase.legend','Easycase.custom_status_id','Easycase.reply_type','Easycase.dt_created','Easycase.estimated_hours','Easycase.status','Easycase.gantt_start_date','Easycase.due_date')
        ));

        if ($getCase) {
            $allowed = $this->task_dependency($caseId);
            if ($allowed == 'No') {
                $response['err'] = 1;
                $response['msg'] = __('Dependant tasks are not closed.', true);
            } else {
                $cs_cnt_upd = $getCase['Easycase']['case_count']+1;
                $this->Easycase->updateAll(array('completed_task' => $cmpltask, 'updated_by' => SES_ID,'case_count' =>$cs_cnt_upd ,'dt_created' =>"'".GMT_DATETIME."'"), array('id'=>$caseId,'project_id'=>$getCase['Easycase']['project_id']));
                    
                $getCase['Easycase']['completed_task'] = $cmpltask;
                $getCase['Easycase']['case_count'] = $getCase['Easycase']['case_count']+1;
                $getCase['Easycase']['updated_by'] = SES_ID;
                $getCase['Easycase']['dt_created'] = GMT_DATETIME;
                $curCaseId = $this->Easycase->insertCommentThreadCommon($getCase, 'completed_task', $cmpltask);
                $response = array('curCaseId' => $curCaseId, 'err' => 0);
            }
        } else {
            $response['err'] = 1;
            $response['msg'] = __('Task not found', true);
        }
        echo json_encode($response);
        exit;
    }

    public function ajax_change_legend()
    {
        $this->layout = 'ajax';

        $caseId = $this->request->data['caseId'];
        $legend = $this->request->data['legend'];
        $taskuids_All = array();
        if (isset($this->data['taskuids_All'])) {
            $taskuids_All = $this->data['taskuids_All'];
        }
        $prv_legend = 0;
        if ($caseId == 0) {
            $caseUId = $this->request->data['taskuid'];
            $data = $this->Easycase->find('first', array('conditions' => array('Easycase.uniq_id' => $caseUId, 'Easycase.istype' => 1), 'fields' => array('Easycase.id','Easycase.legend')));
            $caseId = $data['Easycase']['id'];
        }
        $allowed = $this->task_dependency($caseId);
        if ($allowed == 'No') {
            echo json_encode(array('curCaseId' => $caseId, 'success' => 'fail', 'message' => __('Dependant tasks are not closed.', true)));
        } else {
            $getCase = $this->Easycase->find('first', array(
                'conditions' => array('Easycase.id' => $caseId, 'Easycase.isactive' => 1, 'Easycase.istype' => 1), //,'Easycase.legend' => array(1, 2, 3, 4, 5, 6)
                    'fields' => array('Easycase.id','Easycase.uniq_id','Easycase.title','Easycase.project_id','Easycase.case_no','Easycase.user_id','Easycase.type_id','Easycase.priority','Easycase.assign_to','Easycase.story_point','Easycase.legend','Easycase.custom_status_id','Easycase.reply_type','Easycase.dt_created','Easycase.estimated_hours','Easycase.status','Easycase.gantt_start_date','Easycase.due_date','Easycase.git_sync','Easycase.git_issue_id','Easycase.real_git_issue_id')
            ));
            if ($getCase) {
                $prv_legend = $getCase['Easycase']['legend'];
                $t_sts = 1;
                $t_custom_sts = 0;
                $cust_sts_list = array();
                if ($getCase['Easycase']['custom_status_id']) {
                    $legend_custom = $this->Format->getStatusMasterId($legend, $getCase['Easycase']['project_id'], 1);
                    if ($legend_custom) {
                        $t_custom_sts = $legend_custom['CustomStatus']['id'];
                        $legend = $legend_custom['CustomStatus']['status_master_id'];
                        if ($legend == 3) {
                            $this->Format->getCachedRoleInfo();
                            if (!$this->Format->isAllowed('Status change except Close')) {
                                echo json_encode(array('curCaseId' => $caseId, 'success' => 'fail', 'message' => __('Your are not authorized to close task.', true)));
                                exit;
                            }
                        }
                    } else {
                        //$t_custom_sts = 1; //hard coded, not required
                        //check here for validation
                    }
                }
                if ($legend == 3) {
                    $t_sts = 2;
                }
                $cs_cnt_upd = $getCase['Easycase']['case_count']+1;
                $this->Easycase->updateAll(array('legend' => $legend,'status' => $t_sts,'custom_status_id' => $t_custom_sts,'updated_by' => SES_ID,'case_count' =>$cs_cnt_upd ,'dt_created' => "'".GMT_DATETIME."'"), array('id'=>$caseId,'project_id'=>$getCase['Easycase']['project_id']));
                $getCase['Easycase']['legend'] = $legend;
                $getCase['Easycase']['custom_status_id'] = $t_custom_sts;
                $getCase['Easycase']['status'] = $t_sts;
                $getCase['Easycase']['case_count'] = $getCase['Easycase']['case_count']+1;
                $getCase['Easycase']['updated_by'] = SES_ID;
                $getCase['Easycase']['dt_created'] = GMT_DATETIME;
                $curCaseId = $this->Easycase->insertCommentThreadCommon($getCase, 'legend', $legend);
                
                //update the sequence
                if (!empty($taskuids_All)) {
                    foreach ($taskuids_All as $k=>$val) {
                        $this->Easycase->updateAll(array('seq_id' => ($k+1)), array('uniq_id'=>$val,'istype'=>1,'project_id'=>$getCase['Easycase']['project_id']));
                    }
                }
                //Update issue in github
                /* $sqldata = "SELECT * FROM `easycases` WHERE `id`='" . $caseId . "' ";
                 $dataeasycase = $this->Easycase->query($sqldata);*/
                $this->loadModel('SprintCompleteReport');
                $this->loadModel('Project');
                
                $pmethod = $this->Project->find('first', array('conditions'=>array('Project.id'=>$getCase['Easycase']['project_id']),'fields'=>array('Project.project_methodology_id')));
                
                
                if ($pmethod['Project']['project_methodology_id'] == 2) {
                    $this->loadModel("EasycaseMilestone");
                    $mston = $this->EasycaseMilestone->find('first', array("conditions"=>array('EasycaseMilestone.easycase_id'=>$caseId,'EasycaseMilestone.project_id'=>$getCase['Easycase']['project_id']),'fields'=>array('EasycaseMilestone.milestone_id'),'order'=>array('EasycaseMilestone.id'=>'DESC')));
                    if (!empty($mston)) {
                        $spcmpl = $this->SprintCompleteReport->find('first', array('conditions'=>array('SprintCompleteReport.task_id'=>$caseId,'SprintCompleteReport.project_id'=>$getCase['Easycase']['project_id'],'SprintCompleteReport.milestone_id'=>$mston['EasycaseMilestone']['milestone_id']),'fields'=>array('SprintCompleteReport.id')));
                        if (!empty($spcmpl)) {
                            $this->SprintCompleteReport->id = $spcmpl['SprintCompleteReport']['id'];
                            $this->SprintCompleteReport->delete();
                        }
                    }
                }
                $response =array('curCaseId' => $curCaseId, 'success' => 'success');
                $response['isCustom'] = 0;
                if ($t_custom_sts) {
                    $response['isCustom'] = 1;
                }
                $response['isAssignedUserFree'] = 1;
                if ($legend == 3) {
                    $is_resourceon = $this->Format->isResourceAvailabilityOn();
                    if ($is_resourceon) {
                        $this->Format->delete_booked_hours(array('easycase_id' => $caseId, 'project_id' => $getCase['Easycase']['project_id']));
                    }
                    /* To save advanced custom field values when the legend changed to close(3) -Start- */
                    $saveAdvCustomFields = $this->Easycase->advCustomFieldAction($caseId);
                    if ($saveAdvCustomFields) {
                        $response['advancedCustomFieldSave'] = 'success';
                    } else {
                        $response['advancedCustomFieldSave'] = 'error';
                    }
                    /* -End- */
                    $child_tasks = $this->Easycase->getSubTaskChild($caseId, $getCase['Easycase']['project_id']);
                    //closing children tasks
                    if (!empty($child_tasks['data'])) {
                        $response['haschield'] = $child_tasks['child'];
                        $allClosed = array();
                        foreach ($child_tasks['data'] as $case) {
                            if ($case['Easycase']['legend'] != '3') {
                                $allowed = $this->task_dependency($case['Easycase']['id']);
                                if ($allowed != 'No') {
                                    $this->Easycase->actionOntask($case['Easycase']['id'], $case['Easycase']['uniq_id'], 'close');
                                    $allClosed[] =  $case['Easycase']['id'];
                                    if ($is_resourceon) {
                                        $this->Format->delete_booked_hours(array('easycase_id' => $case['Easycase']['id'], 'project_id' => $projId));
                                    }
                                }
                            }
                        }
                        // Updat the closed task customstatusid
                        if (!empty($allClosed)) {
                            $this->Easycase->updateAll(array('custom_status_id' => $t_custom_sts), array('id'=>$allClosed));
                        }
                    }
                } else {
                    if ($prv_legend ==3) {
                        //$postParam = $this->Easycase->find('first', array('conditions' => array('Easycase.id' => $caseId)));
                        $postParam = $getCase;
                        if ($postParam['Easycase']['gantt_start_date'] != '' && $postParam['Easycase']['assign_to'] != 0) {
                            $isAssignedUserFree = $this->Postcase->setBookedData($postParam, $postParam['Easycase']['estimated_hours'], $postParam['Easycase']['id'], SES_COMP);
                            $response['isAssignedUserFree'] = $isAssignedUserFree;
                            $postParam['Easycase']['gantt_start_date'] = $this->Tmzone->GetDateTime(SES_TIMEZONE, TZ_GMT, TZ_DST, TZ_CODE, $postParam['Easycase']['gantt_start_date'], "date");
                            $postParam['Easycase']['due_date'] = $this->Tmzone->GetDateTime(SES_TIMEZONE, TZ_GMT, TZ_DST, TZ_CODE, $postParam['Easycase']['due_date'], "date");
                            $response['task_details'] = $postParam;
                        }
                    }
                }
                $response['caseId'] = $caseId;
                echo json_encode($response);
            }
        }
        exit;
    }
    /**
     * @method ajax_change_sequence
     * @param ''
     * @return json string objects
     * @author PRB
     */
    public function ajax_change_sequence()
    {
        #pr($this->data);exit;
        $this->layout = 'ajax';
        $projectUid = trim($this->data['proj_id']);
        $tasks_ids = $this->data['taskuids'];
        $taskuids_All = $this->data['taskuids_All'];
        $caseUId = $tasks_ids[1];
        $jsnArr = array('status'=>'success');
        
        $this->loadModel('Project');
        $proj_res = $this->Project->getProjectFields(array("Project.uniq_id" => $projectUid), array("Project.id"));
        if (!$proj_res) {
            $jsnArr['status'] = 'error';
            $jsnArr['msg'] = __('Unable to reorder the task, Please try once again!');
            echo json_encode($jsnArr);
            exit;
        }
        $dataCases = $this->Easycase->find('list', array('conditions' => array('Easycase.uniq_id' => $tasks_ids, 'Easycase.istype' => 1,'Easycase.project_id' => $proj_res['Project']['id']), 'fields' => array('Easycase.uniq_id','Easycase.id')));
        if ($dataCases && array_key_exists($caseUId, $dataCases)) {
            foreach ($taskuids_All as $k=>$val) {
                $this->Easycase->updateAll(array('seq_id' => ($k+1)), array('uniq_id'=>$val,'istype'=>1,'project_id'=>$proj_res['Project']['id']));
            }
        } else {
            $jsnArr['status'] = 'error';
            $jsnArr['msg'] = __('Unable to reorder the task, Please try once again!');
        }
        echo json_encode($jsnArr);
        exit;
    }

    //Change task type
    public function ajax_change_status()
    {
        $this->layout = 'ajax';
        $status = "";
        $caseId = "";
        $statusId = $this->params->data['statusId'];

        $d = new DateTime();
        $view = new View($this);
        $da = $d->format('Y-m-d H:i:s');
        $dt = $view->loadHelper('Datetime');
        $tz = $view->loadHelper('Tmzone');
        $curDateTz = $tz->GetDateTime(SES_TIMEZONE, TZ_GMT, TZ_DST, TZ_CODE, GMT_DATETIME, "datetime");
        $updTzDate = $tz->GetDateTime(SES_TIMEZONE, TZ_GMT, TZ_DST, TZ_CODE, $da, "datetime");
        $last_updated = $dt->dateFormatOutputdateTime_day($updTzDate, $curDateTz);
        $caseId = $this->params->data['caseId'];
        $statusName = $this->params->data['statusName'];
        $statusTitle = $this->params->data['statusTitle'];

        $getCase = $this->Easycase->find('first', array(
            'conditions' => array(
                'Easycase.id' => $caseId, 'Easycase.isactive' => 1,'Easycase.istype' => 1
            ),
            'fields' => array('Easycase.id','Easycase.uniq_id','Easycase.title','Easycase.project_id','Easycase.case_no','Easycase.user_id','Easycase.type_id','Easycase.priority','Easycase.assign_to','Easycase.story_point','Easycase.legend','Easycase.custom_status_id','Easycase.reply_type','Easycase.dt_created','Easycase.estimated_hours','Easycase.status','Easycase.gantt_start_date','Easycase.due_date')
        ));
        if ($getCase) {
            $cs_cnt_upd = $getCase['Easycase']['case_count']+1;
            $this->Easycase->updateAll(array('type_id' => $statusId, 'updated_by' => SES_ID,'case_count' =>$cs_cnt_upd ,'dt_created' => "'".GMT_DATETIME."'"), array('id'=>$caseId,'project_id'=>$getCase['Easycase']['project_id']));

            $getCase['Easycase']['type_id'] = $statusId;
            $getCase['Easycase']['case_count'] = $getCase['Easycase']['case_count']+1;
            $getCase['Easycase']['updated_by'] = SES_ID;
            $getCase['Easycase']['dt_created'] = GMT_DATETIME;
            $curCaseId = $this->Easycase->insertCommentThreadCommon($getCase, 'type_id', $statusId);
            $task_milestone = $this->Easycase->getMilestoneIds($caseId, $getCase['Easycase']['project_id']);
            
            echo json_encode(array($statusName, $statusTitle, 'curCaseId' => $curCaseId,"task_milestone_id" => $task_milestone, 'last_updated' => $last_updated));
            //echo $this->Format->todo_typ($statusName,$statusTitle);
            //}
        }
        exit;
    }

    public function ajax_assign_task_to_user()
    {
        $this->layout = 'ajax';
        $project_id = $this->params->data['project_id'];
        $this->loadModel('Project');
        $this->Project->recursive = -1;
        $sql = "SELECT DISTINCT User.name,User.last_name,User.id FROM users AS User,
		project_users AS ProjectUser,company_users AS CompanyUser WHERE User.id = ProjectUser.user_id AND User.id = CompanyUser.user_id AND CompanyUser.is_active =1 AND ProjectUser.project_id='" . $project_id . "'
		    and ProjectUser.company_id='" . SES_COMP . "' ORDER BY User.name ASC";
        $users = $this->Project->query($sql);
        $this->set('users', $users);
        $this->set('project_id', $project_id);
        $this->set('is_multiple', $this->data['is_multiple']);
    }

    public function AssignAllTaskToUser()
    {
        $this->layout = 'ajax';
        $assignId = "";
        $caseId = "";
        $assignId = $this->params->data['user_id'];
        $caseId = $this->params->data['case_id'];
        $jsonres = array('status' => 'success');
        if (SES_ID && SES_ID != 'SES_ID') {
            if (!empty($caseId)) {
                foreach ($caseId as $k => $v) {
                    $sql = "UPDATE `easycases` SET `assign_to`='" . $assignId . "',dt_created = '" . GMT_DATETIME . "', case_count=case_count+1,updated_by='" . SES_ID . "' WHERE `id`='" . $v . "' AND isactive='1'";
                    $upd = $this->Easycase->query($sql);
                    //Jyoti start     
                    $dataeasycase = $this->Easycase->find('first', array('conditions' => array('Easycase.id' => $v), 'fields' => array('Easycase.*')));
                    $curCaseId = $this->Easycase->insertCommentThreadCommon($dataeasycase, 'assign_to', $assignId);
                    /* Delete previous RA **/
                    if ($this->Format->isResourceAvailabilityOn()) {
                        $this->Format->delete_booked_hours(array('easycase_id' => $v, 'project_id' =>$dataeasycase['Easycase']['project_id']), 1);
                    }
                    /* End */
                }
            } else {
                $jsonres['status'] = 'fail';
            }
        } else {
            $jsonres['status'] = 'fail';
        }
        //Jyoti End
        echo json_encode($jsonres);
        exit;
    }

    public function ajax_change_AssignTo()
    {
        $this->layout = 'ajax';
        $assignId = "";
        $caseId = "";
        $d = new DateTime();
        $view = new View($this);
        $da = $d->format('Y-m-d H:i:s');
        $dt = $view->loadHelper('Datetime');
        $tz = $view->loadHelper('Tmzone');
        $curDateTz = $tz->GetDateTime(SES_TIMEZONE, TZ_GMT, TZ_DST, TZ_CODE, GMT_DATETIME, "datetime");
        $updTzDate = $tz->GetDateTime(SES_TIMEZONE, TZ_GMT, TZ_DST, TZ_CODE, $da, "datetime");
        $last_updated = $dt->dateFormatOutputdateTime_day($updTzDate, $curDateTz);
        $assignId = $this->params->data['assignId'];
        $caseId = $this->params->data['caseId'];
        $getCase = $this->Easycase->find('first', array(
            'conditions' => array(
                'id' => $caseId, 'isactive' => 1,'istype' => 1
            ),
            'fields' => array('Easycase.id','Easycase.uniq_id','Easycase.title','Easycase.project_id','Easycase.case_no','Easycase.user_id','Easycase.type_id','Easycase.priority','Easycase.assign_to','Easycase.story_point','Easycase.legend','Easycase.custom_status_id','Easycase.reply_type','Easycase.dt_created','Easycase.estimated_hours','Easycase.status','Easycase.gantt_start_date','Easycase.due_date','Easycase.message')
        ));
        if ($getCase) {
            $cs_cnt_upd = $getCase['Easycase']['case_count']+1;
            $this->Easycase->updateAll(array('assign_to' => $assignId, 'updated_by' => SES_ID,'case_count' =>$cs_cnt_upd ,'dt_created' => "'".GMT_DATETIME."'"), array('id'=>$caseId,'project_id'=>$getCase['Easycase']['project_id']));
            $getCase['Easycase']['assign_to'] = $assignId;
            $getCase['Easycase']['case_count'] = $getCase['Easycase']['case_count']+1;
            $getCase['Easycase']['updated_by'] = SES_ID;
            $getCase['Easycase']['dt_created'] = GMT_DATETIME;
            $curCaseId = $this->Easycase->insertCommentThreadCommon($getCase, 'assign_to', $assignId);
            //Jyoti End
            if ($assignId == SES_ID) {
                $userData = $this->Format->getUserShortName($assignId);
                $val['photo'] = $userData['User']['photo'];
                $val['top'] = 'me';
                $val['details'] = mb_convert_case($userData['User']['name'], MB_CASE_TITLE, "UTF-8");
                $val['asgnPicBg'] = $this->User->getProfileBgColr($assignId);
            } elseif ($assignId == 0) {
                $val['top'] = 'Unassigned';
                $val['details'] = 'Unassigned';
                $val['asgnPicBg'] = 'unassign';
            } else {
                // $userData = $this->Format->getUserShortName($assignId);
                $userData = $this->Format->getUserFullName($assignId);
                $name = $userData['User']['name'] . ' '. $userData['User']['last_name'];
                $val['photo'] = $userData['User']['photo'];
                $val['top'] = mb_convert_case($name, MB_CASE_TITLE, "UTF-8");
                $val['details'] = mb_convert_case($userData['User']['name'], MB_CASE_TITLE, "UTF-8");
                $val['asgnPicBg'] = $this->User->getProfileBgColr($assignId);
            }
            $val['curCaseId'] = $curCaseId;
            $this->Format->createGoogleCalendarEvent($caseId, $getCase['Easycase'], 'edit');
            /*
             * Check the assigned user free.
             */
            $isAssignedUserFree = 1;
            $postParam = $getCase;
            if ($this->Format->isResourceAvailabilityOn()) {
                $this->Format->delete_booked_hours(array('easycase_id' => $postParam['Easycase']['id'], 'project_id' => $postParam['Easycase']['project_id']), 1);
                if ($postParam['Easycase']['estimated_hours'] != '' && $postParam['Easycase']['gantt_start_date'] != '' && $assignId != 0 && $postParam['Easycase']['due_date'] != '') {
                    $isAssignedUserFree = $this->Postcase->setBookedData($postParam, $postParam['Easycase']['estimated_hours'], $caseId, SES_COMP);
                }
            }
            $val['isAssignedUserFree'] = $isAssignedUserFree;
            $postParam['Easycase']['gantt_start_date'] = $postParam['Easycase']['gantt_start_date'] ? $this->Tmzone->GetDateTime(SES_TIMEZONE, TZ_GMT, TZ_DST, TZ_CODE, $postParam['Easycase']['gantt_start_date'], "date") : '';
            $postParam['Easycase']['due_date'] = $postParam['Easycase']['due_date'] ? $this->Tmzone->GetDateTime(SES_TIMEZONE, TZ_GMT, TZ_DST, TZ_CODE, $postParam['Easycase']['due_date'], "date"): '';
            $val['task_details'] = $postParam;
            $val['last_update'] = $last_updated;
            echo json_encode($val);
            exit;
        }
    }

    public function update_assignto()
    {
        $this->layout = 'ajax';
        $caseId = $this->params->data['caseId'];
        $getCaseAsgnTo = $this->Easycase->find('first', array('conditions' => array('Easycase.id' => $caseId, 'Easycase.isactive' => '1'), 'fields' => array('DISTINCT Easycase.assign_to')));
        if ($getCaseAsgnTo['Easycase']['assign_to'] && $getCaseAsgnTo['Easycase']['assign_to'] != SES_ID) {
            $userData = $this->Format->getUserShortName($getCaseAsgnTo['Easycase']['assign_to']);
            echo "<font rel='tooltip' title='" . $userData['User']['name'] . "'>" . $userData['User']['short_name'] . "</font>";
        } elseif ($getCaseAsgnTo['Easycase']['assign_to'] == 0) {
            echo "<font rel='tooltip' title='Unassigned'>Unassigned</font>";
        } else {
            echo "<font >Me</font>";
        }
        exit;
    }

    public function ajax_change_DueDate()
    {
        $this->layout = 'ajax';
        $duedt = "";
        $caseId = "";
        $d = new DateTime();
        $view = new View($this);
        $da = $d->format('Y-m-d H:i:s');
        $dt = $view->loadHelper('Datetime');
        $tz = $view->loadHelper('Tmzone');
        $curDateTz = $tz->GetDateTime(SES_TIMEZONE, TZ_GMT, TZ_DST, TZ_CODE, GMT_DATETIME, "datetime");
        $updTzDate = $tz->GetDateTime(SES_TIMEZONE, TZ_GMT, TZ_DST, TZ_CODE, $da, "datetime");
        $last_updated = $dt->dateFormatOutputdateTime_day($updTzDate, $curDateTz);
        $dt->dateFormatOutputdateTime_day($updTzDate, $curDateTz);
        $duedt = $this->params->data['duedt'];
        $startdt = $this->params->data['startdt'];
        $text = $this->params->data['text'];
        $reason_id = $this->params->data['reason_id'];
        $time = '';

        if ($duedt != '00/00/0000' && $duedt != '') {
            $time = $time != "" ? $time : $this->Tmzone->GetDateTime(SES_TIMEZONE, TZ_GMT, TZ_DST, TZ_CODE, GMT_DATETIME, "onlytime");
            $due_date = date('Y-m-d', strtotime($duedt)) . " " . $time;
            $minutes = str_pad(floor((date('i', strtotime($due_date)) > 0 ? date('i', strtotime($due_date)) : 1) / 30) * 30, 2, 0);
            $due_date = date('Y-m-d H:i:s', strtotime(date('Y-m-d H', strtotime($due_date)) . ':' . $minutes . ':00'));
            /* converting to UTC */
            $due_date = $this->Tmzone->convert_to_utc(SES_TIMEZONE, TZ_GMT, TZ_DST, TZ_CODE, $due_date, "datetime");
        } else {
            $due_date = '0000-00-00 00:00:00';
        }
        if ($startdt != '00/00/0000' && $startdt != '') {
            $time = $time != "" ? $time : $this->Tmzone->GetDateTime(SES_TIMEZONE, TZ_GMT, TZ_DST, TZ_CODE, GMT_DATETIME, "onlytime");
            $start_date = date('Y-m-d', strtotime($startdt)) . " " . $time;
            $minutes = str_pad(floor((date('i', strtotime($start_date)) > 0 ? date('i', strtotime($start_date)) : 1) / 30) * 30, 2, 0);
            $start_date = date('Y-m-d H:i:s', strtotime(date('Y-m-d H', strtotime($start_date)) . ':' . $minutes . ':00'));
            /* converting to UTC */
            $start_date = $this->Tmzone->convert_to_utc(SES_TIMEZONE, TZ_GMT, TZ_DST, TZ_CODE, $start_date, "datetime");
        } else {
            $start_date = '0000-00-00 00:00:00';
        }
        $caseId = $this->params->data['caseId'];
        $getCase = $this->Easycase->find('first', array(
            'conditions' => array(
                'Easycase.id' => $caseId, 'Easycase.isactive' => 1,'Easycase.istype' => 1
            ),
            'fields' => array('Easycase.id','Easycase.uniq_id','Easycase.title','Easycase.message','Easycase.project_id','Easycase.case_no','Easycase.user_id','Easycase.type_id','Easycase.priority','Easycase.assign_to','Easycase.story_point','Easycase.legend','Easycase.custom_status_id','Easycase.reply_type','Easycase.dt_created','Easycase.estimated_hours','Easycase.status','Easycase.gantt_start_date','Easycase.due_date','Easycase.initial_due_date')
        ));
        
        if ($getCase) {
            $allowed = $this->task_dependency($caseId);
            if ($allowed == 'No') {
                echo json_encode(array('curCaseId' => $caseId, 'success' => 'No', 'message' => __('Dependant tasks are not closed.', true) ));
                exit;
            }
            if ($due_date == '0000-00-00 00:00:00') {
                $due_dates = null;
            } else {
                $due_dates = $due_date;
            }
            $cs_cnt_upd = $getCase['Easycase']['case_count']+1;
            $updt_arr = array('due_date' => "'".$due_dates."'", 'updated_by' => SES_ID,'case_count' =>$cs_cnt_upd ,'dt_created' => "'".GMT_DATETIME."'");

            if ($startdt != '00/00/0000' && $startdt != '') {
                $updt_arr['gantt_start_date'] = "'".$start_date."'";
            } else {
                $start_date = $getCase['Easycase']['gantt_start_date'];
                $stdt = "";
            }
            if ($due_date <  $start_date && $due_date != "0000-00-00 00:00:00") {
                echo json_encode(array('curCaseId' => $caseId, 'success' => 'No', 'message' => __('Due date can\'t less then start date.', true) ));
                exit;
            }
            $updateStstus = $this->Easycase->updateAll($updt_arr, array('id'=>$caseId,'project_id'=>$getCase['Easycase']['project_id']));
            
            $old_due_date = '--';
            if ($updateStstus && !empty($reason_id) && !empty($getCase['Easycase']['due_date'])) {
                //log change reason history
                $this->loadModel('TaskDueChangeReason');
                $inptArr['duedate_change_reason_id'] = $reason_id;
                $inptArr['easycase_id'] = $caseId;
                $inptArr['due_date'] = $getCase['Easycase']['due_date'];
                $inptArr['user_id'] = SES_ID;
                $old_due_date = $getCase['Easycase']['due_date'];
                $this->TaskDueChangeReason->saveChangeReasons($inptArr);
            } else {
                $old_due_date = (!empty($getCase['Easycase']['initial_due_date']))?$getCase['Easycase']['initial_due_date']:'--';
            }
            if ($startdt != '00/00/0000' && $startdt != '') {
                $getCase['Easycase']['gantt_start_date'] = $start_date;
            }
            $getCase['Easycase']['due_date'] = $due_date;
            $getCase['Easycase']['case_count'] = $getCase['Easycase']['case_count']+1;
            $getCase['Easycase']['updated_by'] = SES_ID;
            $getCase['Easycase']['dt_created'] = GMT_DATETIME;
            $this->Format->createGoogleCalendarEvent($getCase['Easycase']['id'], $getCase['Easycase'], 'edit');
            if ($updateStstus && !empty($reason_id)) {
                $getCase['Easycase']['reason_id'] = $reason_id;
                $this->Easycase->insertCommentThreadCommon($getCase, 'due_date', $due_date);
                unset($getCase['Easycase']['reason_id']);
            }
            $curCaseId = $this->Easycase->insertCommentThreadCommon($getCase, 'due_date', $due_date);
            //Slack end
            $view = new View($this);
            $dt = $view->loadHelper('Datetime');
            if ($duedt == "00/00/0000") {
                $val['top'] = 'Date Not Set';
                $val['details'] = 'NA';
                $val['title'] = 'Date Not Set';
            } else {
                if ($text == "Today") {
                    $val['top'] = "Today";
                    $val['details'] = "<b>Today</b>";
                    $val['title'] = $dt->facebook_datestyle($duedt);
                } else {
                    $val['top'] = $this->Format->dateFormatOutputdateTime_day($duedt, GMT_DATETIME, 'week');
                    $val['details'] = "<b>" . $this->Format->dateFormatOutputdateTime_day($duedt, GMT_DATETIME, 'week') . "</b>";
                    $val['title'] = $dt->facebook_datestyle($duedt);
                }
            }
            /*
             * check isAssignedUserFree
             */
            $isAssignedUserFree =1;
            $postParam = $getCase;
            if ($this->Format->isResourceAvailabilityOn()) {
                $this->Format->delete_booked_hours(array('easycase_id' => $postParam['Easycase']['id'], 'project_id' => $postParam['Easycase']['project_id']), 1);
                if ($postParam['Easycase']['estimated_hours'] != '' && $postParam['Easycase']['gantt_start_date'] != '' && $postParam['Easycase']['assign_to'] != 0) {
                    $isAssignedUserFree = $this->Postcase->setBookedData($postParam, $postParam['Easycase']['estimated_hours'], $caseId, SES_COMP);
                }
            }
            $val['isAssignedUserFree'] = $isAssignedUserFree;
            $postParam['Easycase']['gantt_start_date'] = $this->Tmzone->GetDateTime(SES_TIMEZONE, TZ_GMT, TZ_DST, TZ_CODE, $postParam['Easycase']['gantt_start_date'], "date");
            $postParam['Easycase']['due_date'] = $this->Tmzone->GetDateTime(SES_TIMEZONE, TZ_GMT, TZ_DST, TZ_CODE, $postParam['Easycase']['due_date'], "date");
            
            
            $caseDueDateInintial = $this->Tmzone->GetDateTime(SES_TIMEZONE, TZ_GMT, TZ_DST, TZ_CODE, $old_due_date, "datetime");
            $curCreated = $this->Tmzone->GetDateTime(SES_TIMEZONE, TZ_GMT, TZ_DST, TZ_CODE, GMT_DATETIME, "datetime");
            if ($caseDueDateInintial != "NULL" && $caseDueDateInintial != "0000-00-00 00:00:00" && $caseDueDateInintial != "" && $caseDueDateInintial != "1970-01-01 00:00:00") {
                $csDuDtFmtInitial = $dt->dateFormatOutputdateTime_day($caseDueDateInintial, $curCreated, 'week');
            } else {
                $csDuDtFmtInitial = '--';
            }
            $val['task_details'] = $postParam;
            $val['original_due_date'] = $csDuDtFmtInitial;
            if ($val) {
                $val['curCaseId'] = $curCaseId;
                $val['last_updated'] =  $last_updated;
                $val['duedate'] = $dt->due_dateDiff($due_date, $curDateTz);
                echo json_encode($val);
            }
        }
        exit;
    }

    public function add_milestone()
    {
        $title = $this->params->data['title'];
        $start_date = $this->Format->chgdate($this->params->data['start_date']);
        $end_date = $this->Format->chgdate($this->params->data['end_date']);
        $uid = $this->params->data['uid'];

        if (strtotime($start_date) > strtotime($end_date)) {
            $this->Session->write("ERROR", __("Start date cannot exceed End date", true));
        } else {
            $this->loadModel('Project');
            $this->loadModel('Milestone');
            $prj = $this->Project->findByUniqId($uid);
            $this->request->data['Milestone']['project_id'] = $prj['Project']['id'];
            $this->request->data['Milestone']['title'] = $title;
            $this->request->data['Milestone']['start_date'] = $start_date;
            $this->request->data['Milestone']['end_date'] = $end_date;
            $this->request->data['Milestone']['user_id'] = SES_ID;
            $this->request->data['Milestone']['company_id'] = SES_COMP;
            $mlUniqId = $this->Format->generateUniqNumber();
            $this->request->data['Milestone']['uniq_id'] = $mlUniqId;
            if ($this->Milestone->save($this->request->data)) {
                $last_insert_id = $this->Milestone->getLastInsertId();
                echo $title . "-" . $last_insert_id;
            } else {
                echo "0";
            }
        }
        exit;
    }

    public function ajax_date()
    {
        $this->layout = 'ajax';
        $this->set('Date', $_COOKIE['DATE']);
    }

    public function exporttoCSV_Milestone($projFil = null)
    {
        $this->Easycase->recursive = -1;
        $prj_unq_id = $this->data['Easycase']['project'];
        $qry = $this->Format->getSqlFields($this->data['Easycase'], $prj_unq_id);
        if ($prj_unq_id != 'all') {
            $this->loadModel('Project');
            $projArr = $this->Project->find('first', array('conditions' => array('Project.uniq_id' => $prj_unq_id, 'Project.isactive' => 1, 'Project.company_id' => SES_COMP), 'fields' => array('Project.id')));
            if (count($projArr)) {
                $curProjId = $projArr['Project']['id'];
            }
            $projName = str_replace(" ", "_", $this->Format->getProjectName($curProjId));
            $task_list_milestone = $this->Easycase->query("SELECT SQL_CALC_FOUND_ROWS Easycase.*,User.short_name,IF((Easycase.assign_to = 0 OR Easycase.assign_to =" . SES_ID . "),'Me',User.short_name) AS Assigned FROM ( SELECT Easycase.*,EasycaseMilestone.id AS Emid, EasycaseMilestone.milestone_id AS Em_milestone_id,EasycaseMilestone.user_id AS Em_user_id,EasycaseMilestone.id_seq,Milestone.id as Mid,Milestone.title AS Mtitle ,Milestone.description AS Mdescription ,Milestone.end_date,Milestone.isactive AS Misactive,Milestone.project_id AS Mproject_id,Milestone.uniq_id AS Muinq_id FROM easycases as Easycase,easycase_milestones AS EasycaseMilestone,milestones AS Milestone WHERE EasycaseMilestone.easycase_id=Easycase.id AND Milestone.id=EasycaseMilestone.milestone_id AND Easycase.istype='1' AND Easycase.isactive='1' AND Milestone.isactive='1' AND Easycase.project_id='$curProjId' AND Easycase.project_id!=0  AND EasycaseMilestone.easycase_id=Easycase.id AND EasycaseMilestone.project_id=" . $curProjId . " " . $qry . ") AS Easycase LEFT JOIN users User ON Easycase.assign_to=User.id ORDER BY Easycase.end_date ASC,Easycase.Mtitle ASC");
        }

        if ($prj_unq_id == 'all') {
            $this->loadModel('ProjectUser');
            $projName = 'AllProject';
            $task_list_milestone = $this->Easycase->query("SELECT SQL_CALC_FOUND_ROWS Easycase.*,User.short_name,IF((Easycase.assign_to = 0 OR Easycase.assign_to =" . SES_ID . "),'Me',User.short_name) AS Assigned FROM ( SELECT  Easycase.*,EasycaseMilestone.id AS Emid, EasycaseMilestone.milestone_id AS Em_milestone_id,EasycaseMilestone.user_id AS Em_user_id,EasycaseMilestone.id_seq,Milestone.id as Mid,Milestone.title AS Mtitle ,Milestone.description AS Mdescription, Milestone.end_date,Milestone.isactive AS Misactive,Milestone.project_id AS Mproject_id,Milestone.uniq_id AS Muinq_id FROM easycases as Easycase,easycase_milestones AS EasycaseMilestone,milestones AS Milestone WHERE EasycaseMilestone.easycase_id=Easycase.id AND Milestone.id=EasycaseMilestone.milestone_id AND Easycase.istype='1'  AND Easycase.isactive='1' " . $qry . " AND Easycase.project_id!=0 AND Easycase.project_id IN (SELECT ProjectUser.project_id FROM project_users AS ProjectUser,projects as Project WHERE ProjectUser.user_id=" . SES_ID . " AND ProjectUser.project_id=Project.id AND Project.isactive='1' AND Milestone.isactive='1' AND ProjectUser.company_id='" . SES_COMP . "') AND EasycaseMilestone.easycase_id=Easycase.id AND EasycaseMilestone.project_id IN (SELECT ProjectUser.project_id FROM project_users AS ProjectUser,projects as Project WHERE ProjectUser.user_id=" . SES_ID . " AND ProjectUser.project_id=Project.id AND Project.isactive='1')) AS Easycase LEFT JOIN users User ON Easycase.assign_to=User.id ORDER BY Easycase.end_date ASC,Easycase.Mtitle ASC");
        }
        $csv_output = "projectName,taskGroupName,tasks#,title,status,type,created by,assigned to,created at,lastUpdated,taskGroupEndDate\n";
        foreach ($task_list_milestone as $case_list) {
            if ($case_list['Easycase']['legend'] == 1) {
                $status = "New";
            } elseif ($case_list['Easycase']['legend'] == 2) {
                $status = "Opened";
            } elseif ($case_list['Easycase']['legend'] == 3) {
                $status = "Closed";
            } elseif ($case_list['Easycase']['legend'] == 4) {
                $status = "Start";
            } elseif ($case_list['Easycase']['legend'] == 5) {
                $status = "Resolved";
            }

            $createUserId = $case_list['Easycase']['Em_user_id'];
            $assignUserId = $case_list['Easycase']['assign_to'];
            $getCreateUserName = $this->Format->getRequireUserName($createUserId);
            $getAssignUserName = $this->Format->getRequireUserName($assignUserId);

            $typeId = $case_list['Easycase']['type_id'];
            $getTypeName = $this->Format->getRequireTypeName($typeId);
            $projectNameAll = str_replace(" ", "_", $this->Format->getProjectName($case_list['Easycase']['Mproject_id']));
            $case_no = $case_list['Easycase']['case_no'];
            $title = '"' . str_replace('"', '""', $case_list['Easycase']['title']) . '"';
            $status = $status;
            $type = $getTypeName;
            $createdBy = $getCreateUserName;
            $assignedTo = $getAssignUserName;
            $view = new View($this);
            $tz = $view->loadHelper('Tmzone');
            $updated = $tz->GetDateTime(SES_TIMEZONE, TZ_GMT, TZ_DST, TZ_CODE, $case_list['Easycase']['actual_dt_created'], "datetime");
            $curCreated = $tz->GetDateTime(SES_TIMEZONE, TZ_GMT, TZ_DST, TZ_CODE, GMT_DATETIME, "datetime");
            $created = '"' . str_replace('"', '""', $this->Format->dateFormatOutputdateTime_day_EXPORT($updated, $curCreated)) . '"';

            $updated1 = $tz->GetDateTime(SES_TIMEZONE, TZ_GMT, TZ_DST, TZ_CODE, $case_list['Easycase']['dt_created'], "datetime");
            $curCreated1 = $tz->GetDateTime(SES_TIMEZONE, TZ_GMT, TZ_DST, TZ_CODE, GMT_DATETIME, "datetime");
            $updated = '"' . str_replace('"', '""', $this->Format->dateFormatOutputdateTime_day_EXPORT($updated1, $curCreated1)) . '"';
            $milestone_enddate = $tz->GetDateTime(SES_TIMEZONE, TZ_GMT, TZ_DST, TZ_CODE, $case_list['Easycase']['end_date'], "datetime");
            $milestone_end_date = '"' . str_replace('"', '""', $this->Format->dateFormatOutputdateTime_day_EXPORT($milestone_enddate, $curCreated)) . '"';
            $milestone_name = $case_list['Easycase']['Mtitle'];
            $milestone_description = $case_list['Easycase']['Mdescription'];
            $csv_output .= $projectNameAll . "," . $milestone_name . "," . $case_no . "," . $title . "," . $status . "," . $type . "," . $createdBy . "," . $assignedTo . "," . $created . "," . $updated . "," . $milestone_end_date . "\n";
        }
        $filename = $projName . "_milestone_" . date("m-d-Y_H-i-s", time());

        header("Content-type: application/vnd.ms-excel");
        header("Content-disposition: csv" . date("Y-m-d") . ".csv");
        header("Content-disposition: filename=" . $filename . ".csv");

        print $csv_output;
        exit;
    }

    public function ajax_exportcsv()
    {
        $this->layout = 'ajax';
        if ($this->params->data['projUniq']) {
            $proj_uniq_id = $this->params->data['projUniq'];
        } else {
            $this->ProjectUser->bindModel(array('belongsTo' => array('Project')));
            $getallproj = $this->ProjectUser->query("SELECT DISTINCT Project.id,Project.uniq_id,Project.name FROM project_users AS ProjectUser,projects AS Project WHERE Project.id= ProjectUser.project_id AND ProjectUser.user_id=" . SES_ID . " AND Project.isactive='1' AND Project.company_id='" . SES_COMP . "' ORDER BY ProjectUser.dt_visited DESC LIMIT 1");
            $proj_uniq_id = $getallproj[0]['Project']['uniq_id'];
        }
        $is_milestone = $this->params->data['is_milestone'];

        $is_uniq_proj_selected = 0;
        if ($proj_uniq_id !== 'all') {
            $project = $this->Project->find('first', array('conditions' => array('Project.uniq_id' => $proj_uniq_id, 'Project.isactive' => 1), 'fields' => array('Project.id','Project.status_group_id')));
            if (count($project)) {
                $proj_id = $project['Project']['id'];
            }
            $sql = "SELECT DISTINCT User.id, User.name, (select count(Easycase.id) from easycases as Easycase where Easycase.user_id=User.id and Easycase.istype='1' and User.isactive='1' and Easycase.isactive='1' AND Easycase.project_id='" . $proj_id . "') as cases FROM users as User,project_users as ProjectUser,company_users as CompanyUser WHERE CompanyUser.user_id=ProjectUser.user_id AND CompanyUser.is_active='1' AND CompanyUser.company_id='" . SES_COMP . "' AND ProjectUser.project_id='" . $proj_id . "' AND User.isactive='1' AND ProjectUser.user_id=User.id ORDER BY User.name";
            $memArr = $this->Easycase->query($sql);
            $this->set('memArr', $memArr);

            $sql = "SELECT DISTINCT User.id, User.name, (select count(Easycase.id) from easycases as Easycase where Easycase.assign_to = User.id and Easycase.istype='1' and User.isactive='1' and Easycase.isactive='1' AND Easycase.project_id='" . $proj_id . "') as cases FROM users as User,project_users as ProjectUser,company_users as CompanyUser,projects as Project WHERE CompanyUser.user_id=ProjectUser.user_id AND CompanyUser.is_active='1' AND CompanyUser.company_id='" . SES_COMP . "' AND ProjectUser.project_id='" . $proj_id . "'  AND Project.id=ProjectUser.project_id AND User.isactive='1' AND ProjectUser.user_id=User.id ORDER BY User.name";
            $milestone = $this->Milestone->find('list', array('fields' => array('id', 'title'), 'conditions' => array('company_id' => SES_COMP, 'project_id' => $proj_id)));
            $asnArr = $this->Easycase->query($sql);
            $this->set('milestone', $milestone);
            $this->set('asnArr', $asnArr);
            $this->set('uniq_id', $proj_uniq_id);

            if (intval($is_milestone)) {
                $milestones = $this->Milestone->getMilestone($proj_id);
                $this->set('milestones', $milestones);
            }
            $this->loadModel('Label');
            $lblsArr = $this->Label->getProjectLabels($proj_id);
            $Csts = ClassRegistry::init('CustomStatus');
            $csts_arr = array();
            if ($project['Project']['status_group_id']) {
                $is_uniq_proj_selected = 1;
                $csts_arr = $Csts->find('all', array('conditions'=>array('CustomStatus.status_group_id'=>$project['Project']['status_group_id'])));
                $csts_arr = Hash::combine($csts_arr, '{n}.CustomStatus.id', '{n}.CustomStatus');
            }
        } else {
            $this->loadModel('Label');
            $lblsArr = $this->Label->readLabelDetlfromCache(SES_COMP);
            $Csts = ClassRegistry::init('CustomStatus');
            $csts_arr = $Csts->find('all', array('conditions'=>array('CustomStatus.company_id'=>SES_COMP)));
            if (!empty($csts_arr)) {
                $csts_arr = Hash::combine($csts_arr, '{n}.CustomStatus.id', '{n}.CustomStatus');
            } else {
                $csts_arr = array();
            }
            $is_uniq_proj_selected = 0;
        }

        $sql = "SELECT DISTINCT Project.uniq_id, Project.name, Project.id, Project.status_group_id FROM project_users AS ProjectUser LEFT JOIN projects AS Project ON (Project.id= ProjectUser.project_id) WHERE ProjectUser.user_id='" . SES_ID . "' AND ProjectUser.company_id='" . SES_COMP . "' AND Project.isactive='1' ORDER BY Project.name ASC";
        $projArr = $this->Project->query($sql);

        $this->loadModel('Type');
        $type_sql = "SELECT * FROM types WHERE CASE WHEN (SELECT COUNT(*) AS total FROM type_companies WHERE company_id = " . SES_COMP . " HAVING total >=1) THEN id IN (SELECT type_id FROM type_companies WHERE company_id = " . SES_COMP . ") ELSE company_id = 0 End ORDER BY company_id DESC, seq_order ASC";
        $typeArr = $this->Type->query($type_sql);
        $this->set(compact('projArr', 'is_milestone', 'typeArr', 'lblsArr', 'csts_arr', 'is_uniq_proj_selected'));
    }

    public function ajax_change_milestone()
    {
        $this->layout = 'ajax';
        $proj_uniq_id = $this->params->data['id'];

        $project = $this->Project->find('first', array('conditions' => array('Project.uniq_id' => $proj_uniq_id, 'Project.isactive' => 1), 'fields' => array('Project.id')));
        if (count($project)) {
            $proj_id = $project['Project']['id'];
        }

        $milestones = $this->Milestone->getMilestone($proj_id);
        $this->set('milestones', $milestones);
    }

    public function ajax_change_milestone_options()
    {
        $proj_uniq_id = $this->params->data['id'];
        $project = $this->Project->findById($proj_uniq_id);
        $milestone = $this->Milestone->find('list', array('fields' => array('id', 'title'), 'conditions' => array('company_id' => SES_COMP, 'project_id' => $project['Project']['id'])));
        $options = '<option>All</option>';
        foreach ($milestone as $key => $value) {
            $options.="<option value=$key>$value</option>";
        }
        echo $options;
        exit;
    }

    public function ajax_change_status_options()
    {
        $proj_uniq_id = $this->params->data['id'];
        $project = $this->Project->findById($proj_uniq_id);
        $options = '<option>All</option>';
        if ($project && $project['Project']['status_group_id']) {
            $sts_arr = $this->Format->getCustomTaskStatus($project['Project']['status_group_id']);
            if ($sts_arr) {
                foreach ($sts_arr as $sk => $sv) {
                    $options.="<option value='".$sv['CustomStatus']['id']."'>".$sv['CustomStatus']['name']."</option>";
                }
            }
        } else {
            $options.="<option value='1'>".__('New')."</option>";
            $options.="<option value='2'>".__('In Progress')."</option>";
            $options.="<option value='5'>".__('Resolved')."</option>";
            $options.="<option value='3'>".__('Closed')."</option>";
            if (!$proj_uniq_id) {
                $sts_arr = $this->Format->getCustomTaskStatus(-1);
                if ($sts_arr) {
                    $duplicate_sts = array();
                    foreach ($sts_arr as $sk => $sv) {
                        if (!in_array(trim($sv['CustomStatus']['name']), $duplicate_sts)) {
                            array_push($duplicate_sts, trim($sv['CustomStatus']['name']));
                            $options.="<option value='".$sv['CustomStatus']['id']."'>".$sv['CustomStatus']['name']."</option>";
                        }
                    }
                }
            }
        }
        $options.="<option value='attach'>".__('Files')."</option>";
        $options.="<option value='update'>".__('Updates')."</option>";
        echo $options;
        exit;
    }
    public function ajax_member_assignto()
    {
        $this->layout = 'ajax';
        $proj_uniq_id = $this->params->data['id'];

        $project = $this->Project->find('first', array('conditions' => array('Project.id' => $proj_uniq_id, 'Project.isactive' => 1), 'fields' => array('Project.id')));
        if (count($project)) {
            $proj_id = $project['Project']['id'];
        }

        $sql = "SELECT DISTINCT User.id, User.name, (select count(Easycase.id) from easycases as Easycase where Easycase.user_id=User.id and Easycase.istype='1' and User.isactive='1' and Easycase.isactive='1' AND Easycase.project_id='" . $proj_id . "') as cases FROM users as User,project_users as ProjectUser,company_users as CompanyUser WHERE CompanyUser.user_id=ProjectUser.user_id AND CompanyUser.is_active='1' AND CompanyUser.company_id='" . SES_COMP . "' AND ProjectUser.project_id='" . $proj_id . "' AND User.isactive='1' AND ProjectUser.user_id=User.id ORDER BY User.name";
        $memArr = $this->Easycase->query($sql);
        $this->set('memArr', $memArr);

        $sql = "SELECT DISTINCT User.id, User.name, (select count(Easycase.id) from easycases as Easycase where Easycase.assign_to = User.id and Easycase.istype='1' and User.isactive='1' and Easycase.isactive='1' AND Easycase.project_id='" . $proj_id . "') as cases FROM users as User,project_users as ProjectUser,company_users as CompanyUser,projects as Project WHERE CompanyUser.user_id=ProjectUser.user_id AND CompanyUser.is_active='1' AND CompanyUser.company_id='" . SES_COMP . "' AND ProjectUser.project_id='" . $proj_id . "'  AND Project.id=ProjectUser.project_id AND User.isactive='1' AND ProjectUser.user_id=User.id ORDER BY User.name";
        $asnArr = $this->Easycase->query($sql);
        $this->set('asnArr', $asnArr);
    }

    public function export_csv_tasklist()
    {
        set_time_limit(0);
        ini_set('max_execution_time', 300);
        $this->_datestime();
        $page_limit = CASE_PAGE_LIMIT;
        $projUniq = $this->params->query['projFil']; // Project Uniq ID
        $projIsChange = $this->params->query['projIsChange']; // Project Uniq ID
        $caseStatus = $this->params->query['caseStatus']; // Filter by Status(legend)
        $caseCustomStatus = $this->params->query['caseCustomStatus']; // Filter by Custom Status
        $priorityFil = $this->params->query['priFil']; // Filter by Priority
        $caseTypes = $this->params->query['caseTypes']; // Filter by case Types
        $caseLabel = $this->params->query['caseLabel']; // Filter by case Types
        $caseUserId = $this->params->query['caseMember']; // Filter by Member
        $caseComment = $this->params->query['caseComment']; // Filter by Member
        $caseTaskgroup = $this->params->query['caseTaskGroup'];
        $caseAssignTo = $this->params->query['caseAssignTo']; // Filter by AssignTo
        $caseDate = $this->params->query['caseDate']; // Sort by Date
        $caseDueDate = $this->params->query['caseDueDate']; // Sort by Due Date
        @$case_duedate = $this->params->query['case_due_date'];
        @$case_date = urldecode($this->params->query['case_date']);
        $caseSrch = $this->params->query['caseSearch']; // Search by keyword
        $casePage = $this->params->query['casePage']; // Pagination
        $caseUniqId = $this->params->query['caseId']; // Case Uniq ID to close a case
        $caseTitle = $this->params->query['caseTitle']; // Case Uniq ID to close a case
        $caseNum = $this->params->query['caseNum']; // Sort by Due Date
        $caseLegendsort = $this->params->query['caseLegendsort']; // Sort by Case Status
        $caseAtsort = $this->params->query['caseAtsort']; // Sort by Case Status
        $startCaseId = $this->params->query['startCaseId']; // Start Case
        $caseResolve = $this->params->query['caseResolve']; // Resolve Case
        $caseNew = $this->params->query['caseNew']; // New Case
        $caseMenuFilters = $this->params->query['caseMenuFilters']; // Resolve Case
        $milestoneIds = $this->params->query['milestoneIds']; // Resolve Case
        $caseCreateDate = $this->params->query['caseCreateDate']; // Sort by Created Date
        @$case_srch = $this->params->query['case_srch'];
        @$milestone_type = $this->params->query['mstype'];
        $changecasetype = $this->params->query['caseChangeType'];
        $caseChangeDuedate = $this->params->query['caseChangeDuedate'];
        $caseChangePriority = $this->params->query['caseChangePriority'];
        $caseChangeAssignto = $this->params->query['caseChangeAssignto'];
        $customfilterid = $this->params->query['customfilter'];
        $detailscount = $this->params->query['detailscount']; // Count number to open casedetails
        $caseUrl = $this->params->query['caseUrl'];
        $checkedFields = explode(',', $this->params->query['checkedFields']);
        //	$csv_dt_format = end($checkedFields);
        $CSV_DT_FORMAT = $this->params->query['dt_format'];
        //$csv_dt_format='y-m-d';
        // define('CSV_DT_FORMAT', $csv_dt_format);
        //array_pop($checkedFields);
        
        $filterenabled = 0;
        $clt_sql = 1;
        if ($this->Auth->user('is_client') == 1) {
            $clt_sql = "((Easycase.client_status = " . $this->Auth->user('is_client') . " AND Easycase.user_id = " . $this->Auth->user('id') . ") OR Easycase.client_status != " . $this->Auth->user('is_client') . ")";
        }
        ######## get project ID from project uniq-id ################
        $curProjId = null;
        $curProjShortName = null;
        if ($projUniq != 'all') {
            //$this->ProjectUser->bindModel(array('belongsTo' => array('Project')));
            $this->ProjectUser->bindModel(array('belongsTo' => array('Project')));
            $projArr = $this->ProjectUser->find('first', array('conditions' => array('Project.uniq_id' => $projUniq, 'ProjectUser.user_id' => SES_ID, 'Project.isactive' => 1, 'ProjectUser.company_id' => SES_COMP), 'fields' => array('Project.id', 'Project.short_name', 'ProjectUser.id')));
            if (count($projArr)) {
                $curProjId = $projArr['Project']['id'];
                $curProjShortName = $projArr['Project']['short_name'];

                //Updating ProjectUser table to current date-time
                if ($projIsChange != $projUniq) {
                    $ProjectUser['id'] = $projArr['ProjectUser']['id'];
                    $ProjectUser['dt_visited'] = GMT_DATETIME;
                    $this->ProjectUser->save($ProjectUser);
                }
            }
        }
        $istype = " Easycase.istype='1' ";
        if (in_array('comment', $checkedFields)) {
            $istype = " Easycase.istype IN(1,2) ";
        }
        ######### Filter by CaseUniqId ##########
        $qry = "";
        if (trim($caseUrl)) {
            $filterenabled = 1;
            $qry.= " AND Easycase.uniq_id='" . $caseUrl . "'";
        }
        $is_def_status_enbled = 0;
        ######### Filter by Custom Status ##########
        if (trim($caseCustomStatus) && $caseCustomStatus != "all") {
            $is_def_status_enbled = 1;
            $filterenabled = 1;
            $qry.= " AND (";
            $qry.= $this->Format->customStatusFilter($caseCustomStatus, $projUniq, $caseStatus, 1);
            $stsLegArr = $caseCustomStatus . "-" . "";
            $expStsLeg = explode("-", $stsLegArr);
        }
        ######### Filter by Status ##########
        if (trim($caseStatus) && $caseStatus != "all") {
            $filterenabled = 1;
            if (!$is_def_status_enbled) {
                $qry.= " AND (";
            } else {
                $qry.= " OR ";
            }
            $qry.= $this->Format->statusFilter($caseStatus, '', 1);
            $qry .= ")";
            $stsLegArr = $caseStatus . "-" . "";
            $expStsLeg = explode("-", $stsLegArr);
            if (!in_array("upd", $expStsLeg)) {
                $qry.= " AND Easycase.type_id !=10";
            }
        } else {
            if (trim($caseCustomStatus) && $caseCustomStatus != "all") {
                $qry .= ")";
            }
        }
        /*######### Filter by Status ##########
        if (trim($caseStatus) && $caseStatus != "all") {
            $filterenabled = 1;
            $qry.= $this->Format->statusFilter($caseStatus);
            $stsLegArr = $caseStatus . "-" . "";
            $expStsLeg = explode("-", $stsLegArr);
            if (!in_array("upd", $expStsLeg)) {
                $qry.= " AND Easycase.type_id !=10";
            }
        }
        ######### Filter by Custom Status ##########
        if (trim($caseCustomStatus) && $caseCustomStatus != "all") {
            $filterenabled = 1;
            $qry.= $this->Format->customStatusFilter($caseCustomStatus, $projUniq,$caseStatus);
            $stsLegArr = $caseCustomStatus . "-" . "";
            $expStsLeg = explode("-", $stsLegArr);
                }*/
        ######### Filter by Case Types ##########
        if (trim($caseTypes) && $caseTypes != "all") {
            $qry.= $this->Format->typeFilter($caseTypes);
            $filterenabled = 1;
        }
        ######### Filter by Case Label ##########
        // if (trim($caseLabel) && $caseLabel != "all") {
        //     $qry.= $this->Format->labelFilter($caseLabel, $curProjId, SES_COMP, SES_TYPE, SES_ID);
        // }
        ######### Filter by Priority ##########
        if (trim($priorityFil) && $priorityFil != "all") {
            $qry.= $this->Format->priorityFilter($priorityFil, $caseTypes);
            $filterenabled = 1;
        }
        ######### Filter by Member ##########
        if (trim($caseUserId) && $caseUserId != "all") {
            $qry.= $this->Format->memberFilter($caseUserId);
            $filterenabled = 1;
        }
        ######### Filter by Member ##########
        if (trim($caseComment) && $caseComment != "all") {
            $qry.= $this->Format->commentFilter($caseComment, $curProjId, $case_date);
            $filterenabled = 1;
        }
        ######### Filter by Member ##########
        if (trim($caseTaskgroup) && $caseTaskgroup != "all") {
            $qry.= $this->Format->taskgroupFilter($caseTaskgroup);
            $filterenabled = 1;
        }
        ######### Filter by AssignTo ##########
        if (trim($caseAssignTo) && $caseAssignTo != "all" && $caseAssignTo != "unassigned") {
            $qry.= $this->Format->assigntoFilter($caseAssignTo);
            $filterenabled = 1;
        } elseif (trim($caseAssignTo) == "unassigned") {
            $qry.= " AND Easycase.assign_to='0'";
            $filterenabled = 1;
        }
        // Order by
        $sortby = '';
        $caseStatusby = '';
        $caseUpdatedby = '';
        $casePriority = '';
        if (isset($_COOKIE['TASKSORTBY'])) {
            $sortby = $_COOKIE['TASKSORTBY'];
            $sortorder = $_COOKIE['TASKSORTORDER'];
        } else {
            $sortorder = 'DESC';
        }

        $orderby = "Easycase.case_no ASC";
        if ($sortby == 'title') {
            $orderby .= " ,LTRIM(Easycase.title) " . $sortorder;
            $caseTitle = strtolower($sortorder);
        } elseif ($sortby == 'duedate') {
            $caseDueDate = strtolower($sortorder);
            $orderby .= " ,Easycase.due_date " . $sortorder;
        } elseif ($sortby == 'estimatedhours') {
            $caseEstHours = strtolower($sortorder);
            $orderby = "Easycase.estimated_hours " . $sortorder;
        } elseif ($sortby == 'caseno') {
            $caseNum = strtolower($sortorder);
            $orderby .= " ,Easycase.case_no " . $sortorder;
        } elseif ($sortby == 'caseAt') {
            $caseAtsort = strtolower($sortorder);
            $orderby .= " ,Assigned " . $sortorder;
        } elseif ($sortby == 'priority') {
            $casePriority = strtolower($sortorder);
            $orderby .= " ,Easycase.priority " . $sortorder;
        } elseif ($sortby == 'status') {
            $caseStatusby = strtolower($sortorder);
            $orderby .= " ,Easycase.legend " . $sortorder;
        } else {
            $caseUpdatedby = strtolower($sortorder);
//            $orderby = "Easycase.dt_created " . $sortorder;
            $orderby .= " ,Easycase.dt_created " . $sortorder;
        }
        $groupby = '';
        $gby = '';
        $mileSton_orderby = '';
        $case_join = 'LEFT';
        $milstone_filter_condition = '';
        if ($_COOKIE['TASKGROUPBY'] != 'date') {
            $orderby = "Easycase.case_no ASC";
            $groupby = $_COOKIE['TASKGROUPBY'];
            if ($groupby != 'milestone') {
                setcookie('TASKSORTBY', '', time() - 3600, '/', DOMAIN_COOKIE, false, false);
                setcookie('TASKSORTORDER', '', time() - 3600, '/', DOMAIN_COOKIE, false, false);
            }
            if ($groupby == 'status') {
                $gby = 'status';
                $orderby .= " ,FIND_IN_SET(Easycase.type_id,'10'),FIND_IN_SET(Easycase.legend,'1,2,4,5,3,10') ";
            } elseif ($groupby == 'priority') {
                $orderby .= " if(Easycase.priority = '' or Easycase.priority is null,4,Easycase.priority),Easycase.priority";
                $gby = 'priority';
            } elseif ($groupby == 'duedate') {
                $orderby .= " ,Easycase.due_date DESC";
                $gby = 'due_date';
            } elseif ($groupby == 'crtdate') {
                $gby = 'crtdate';
                $orderby .= " ,Easycase.actual_dt_created DESC";
            } elseif ($groupby == 'assignto') {
                $gby = 'assignto';
                $orderby .= " ,Assigned ASC";
            } elseif (in_array('task_group', $checkedFields)) {
                $gby = 'milestone';
                $orderby .=" ,EasycaseMilestone.milestone_id ASC";
                if ((isset($_COOKIE['TASKGROUP_FIL']) && $_COOKIE['TASKGROUP_FIL']) || (isset($last_filter_taskgroup) && $last_filter_taskgroup)) {
                    if (trim($_COOKIE['TASKGROUP_FIL']) == 'active' || trim($last_filter_taskgroup) == 'active') {
                        $case_join = 'INNER';
                        if ($projUniq == 'all') {
                            $milstone_filter_condition = ' AND EasycaseMilestone.milestone_id NOT IN(SELECT id FROM milestones as Milestone WHERE Milestone.isactive=0 AND Milestone.company_id =' . SES_COMP . ') ';
                        } else {
                            $milstone_filter_condition = ' AND EasycaseMilestone.milestone_id NOT IN(SELECT id FROM milestones as Milestone WHERE Milestone.isactive=0 AND Milestone.company_id =' . SES_COMP . ' AND Milestone.project_id =' . $curProjId . ') ';
                        }
                    } elseif (trim($_COOKIE['TASKGROUP_FIL']) == 'completed' || trim($last_filter_taskgroup) == 'completed') {
                        $case_join = 'INNER';
                        if ($projUniq == 'all') {
                            $milstone_filter_condition = ' AND EasycaseMilestone.milestone_id NOT IN(SELECT id FROM milestones as Milestone WHERE Milestone.isactive=1 AND Milestone.company_id =' . SES_COMP . ') ';
                        } else {
                            $milstone_filter_condition = ' AND EasycaseMilestone.milestone_id NOT IN(SELECT id FROM milestones as Milestone WHERE Milestone.isactive=1 AND Milestone.company_id =' . SES_COMP . ' AND Milestone.project_id =' . $curProjId . ') ';
                        }
                    }
                }
            }
            $orderby = "Easycase.project_id ASC,Easycase.case_no ASC,Easycase.istype ASC";
            if ($groupby != 'date') {
                $orderby .=" ,Easycase.dt_created DESC";
                if (in_array('task_group', $checkedFields)) {
                    $orderby .= " ,EasycaseMilestone.milestone_id DESC";
                    if ($sortby == 'duedate') {
                        $caseDueDate = strtolower($sortorder);
                        $mileSton_orderby = " ,Easycase.due_date " . $sortorder;
                    } elseif ($sortby == 'caseAt') {
                        $caseAtsort = strtolower($sortorder);
                        $mileSton_orderby = " ,Assigned " . $sortorder;
                    } elseif ($sortby == 'title') {
                        $caseTitle = strtolower($sortorder);
                        $mileSton_orderby = " ,LTRIM(Easycase.title) " . $sortorder;
                    } elseif ($sortby == 'caseno') {
                        $caseNum = strtolower($sortorder);
                        $mileSton_orderby = " ,Easycase.case_no " . $sortorder;
                    } elseif ($sortby == 'priority') {
                        $casePriority = strtolower($sortorder);
                        $mileSton_orderby = " ,Easycase.priority " . $sortorder;
                    } else {
                        $caseUpdatedby = strtolower($sortorder);
                        $mileSton_orderby = " ,Easycase.dt_created " . $sortorder;
                    }
                }
            }
        }
        $orderby = ltrim($orderby, ' ,');
        ######### Search by KeyWord ##########
        $searchcase = "";
        if (trim(urldecode($caseSrch)) && (trim($case_srch) == "")) {
            $filterenabled = 1;
            $searchcase = $this->Format->caseKeywordSearch($caseSrch, 'full');
        }
        if (trim(urldecode($case_srch)) != "") {
            $filterenabled = 1;
            $searchcase = "AND (Easycase.case_no = '$case_srch')";
        }

        if (trim(urldecode($caseSrch))) {
            $filterenabled = 1;
            if ((substr($caseSrch, 0, 1)) == '#') {
                $tmp = explode("#", $caseSrch);
                $casno = trim($tmp['1']);
                $searchcase = " AND (Easycase.case_no = '" . $casno . "')";
            }
        }

        $cond_easycase_actuve = "";

        if ((isset($case_srch) && !empty($case_srch)) || isset($caseSrch) && !empty($caseSrch)) {
            $cond_easycase_actuve = "";
        } else {
            $cond_easycase_actuve = "AND Easycase.isactive=1";
        }
        if (trim($case_date) != "") {
            if ((SES_COMP == 25814 || SES_COMP == 28528 || SES_COMP == 1358) && (trim($caseComment) && $caseComment != "all")) {
                // Modified for jayan (if date filter with commented by filter is applied then now apply the date filter in the parent task)
            } else {
                $frmTz = '+00:00';
                $toTz = $this->Tmzone->getGmtTz(TZ_GMT, TZ_DST);
                $GMT_DATE =$this->Tmzone->GetDateTime(SES_TIMEZONE, TZ_GMT, TZ_DST, TZ_CODE, GMT_DATETIME, "datetime");
                if (trim($case_date) == 'one') {
                    $one_date = date('Y-m-d H:i:s', strtotime($GMT_DATE) - 3600);
                    $qry.= " AND CONVERT_TZ(Easycase.dt_created,'".$frmTz."','".$toTz."') >='" . $one_date . "'";
                } elseif (trim($case_date) == '24') {
                    $filterenabled = 1;
                    $day_date = date("Y-m-d H:i:s", strtotime($GMT_DATE. " -1 day"));
                    $qry.= " AND CONVERT_TZ(Easycase.dt_created,'".$frmTz."','".$toTz."') >='" . $day_date . "'";
                } elseif (trim($case_date) == 'week') {
                    $filterenabled = 1;
                    $week_date = date("Y-m-d H:i:s", strtotime($GMT_DATE . " -1 week"));
                    $qry.= " AND CONVERT_TZ(Easycase.dt_created,'".$frmTz."','".$toTz."') >='" . $week_date . "'";
                } elseif (trim($case_date) == 'month') {
                    $filterenabled = 1;
                    $month_date = date("Y-m-d H:i:s", strtotime($GMT_DATE . " -1 month"));
                    $qry.= " AND CONVERT_TZ(Easycase.dt_created,'".$frmTz."','".$toTz."') >='" . $month_date . "'";
                } elseif (trim($case_date) == 'year') {
                    $filterenabled = 1;
                    $year_date = date("Y-m-d H:i:s", strtotime($GMT_DATE . " -1 year"));
                    $qry.= " AND CONVERT_TZ(Easycase.dt_created,'".$frmTz."','".$toTz."') >='" . $year_date . "'";
                } elseif (strstr(trim($case_date), "_")) {
                    $filterenabled = 1;
                    $ar_dt = explode("_", trim($case_date));
                    $frm_dt = $ar_dt['0'];
                    $to_dt = $ar_dt['1'];
                    //$qry.= " AND DATE(Easycase.dt_created) >= '" . date('Y-m-d H:i:s', strtotime($frm_dt)) . "' AND DATE(Easycase.dt_created) <= '" . date('Y-m-d H:i:s', strtotime($to_dt)) . "'";
                    $qry.= " AND DATE(CONVERT_TZ(Easycase.dt_created,'".$frmTz."','".$toTz."')) >= '" . date('Y-m-d', strtotime($frm_dt)) . "' AND DATE(CONVERT_TZ(Easycase.dt_created,'".$frmTz."','".$toTz."')) <= '" . date('Y-m-d', strtotime($to_dt)) . "'";
                }
            }
        }
        if (trim($case_duedate) != "") {
            $frmTz = '+00:00';
            $toTz = $this->Tmzone->getGmtTz(TZ_GMT, TZ_DST);
            $GMT_DATE =$this->Tmzone->GetDateTime(SES_TIMEZONE, TZ_GMT, TZ_DST, TZ_CODE, GMT_DATETIME, "date");
            if (trim($case_duedate) == '24') {
                $filterenabled = 1;
                $day_date = date("Y-m-d H:i:s", strtotime(date("Y-m-d H:i:s", strtotime(date("Y-m-d H:i:s"))) . " +1 day"));
                $qry.= " AND (DATE(CONVERT_TZ(Easycase.due_date,'".$frmTz."','".$toTz."')) ='" . $GMT_DATE . "')";
            } elseif (trim($case_duedate) == 'overdue') {
                $filterenabled = 1;
                $week_date = date("Y-m-d H:i:s", strtotime(date("Y-m-d H:i:s", strtotime(date("Y-m-d H:i:s"))) . " +1 week"));
                $qry .= " AND ( DATE(CONVERT_TZ(Easycase.due_date,'".$frmTz."','".$toTz."')) <'" . $GMT_DATE . "') AND (DATE(CONVERT_TZ(Easycase.due_date,'".$frmTz."','".$toTz."')) !='0000-00-00') AND (Easycase.legend !=3) ";
            } elseif (strstr(trim($case_duedate), ":") && trim($case_duedate) !== '0000-00-00 00:00:00') {
                $filterenabled = 1;
                $ar_dt = explode(":", trim($case_duedate));
                $frm_dt = $ar_dt['0'];
                $to_dt = $ar_dt['1'];
                $qry.= " AND DATE(CONVERT_TZ(Easycase.due_date,'".$frmTz."','".$toTz."')) >= '" . date('Y-m-d', strtotime($frm_dt)) . "' AND DATE(CONVERT_TZ(Easycase.due_date,'".$frmTz."','".$toTz."')) <= '" . date('Y-m-d', strtotime($to_dt)) . "'";
            }
        }
        ######### Filter by Assign To ##########
        if ($caseMenuFilters == "assigntome") {
            //$qry.= " AND ((Easycase.assign_to=" . SES_ID . ") OR (Easycase.assign_to=0 AND Easycase.user_id=" . SES_ID . "))";
            $qry.= " AND (Easycase.assign_to=" . SES_ID . ")";
        } elseif ($caseMenuFilters == "favourite") {
            if ($projUniq != 'all') {
                $this->loadModel('ProjectUser');
                $this->ProjectUser->bindModel(array('belongsTo' => array('Project')));
                $projArr = $this->ProjectUser->find('first', array('conditions' => array('Project.uniq_id' => $projUniq, 'ProjectUser.user_id' => SES_ID, 'Project.isactive' => 1, 'ProjectUser.company_id' => SES_COMP), 'fields' => array('Project.id', 'Project.short_name', 'ProjectUser.id')));
                if (count($projArr)) {
                    $curProjId = $projArr['Project']['id'];
                    $curProjShortName = $projArr['Project']['short_name'];
                    $conditions = array('EasycaseFavourite.project_id'=>$curProjId,'EasycaseFavourite.company_id'=>SES_COMP,'EasycaseFavourite.user_id'=>SES_ID);
                    $this->loadModel('EasycaseFavourite');
                    $easycase_favourite = $this->EasycaseFavourite->find('list', array('fields'=>array('EasycaseFavourite.id','EasycaseFavourite.easycase_id'),'conditions'=>$conditions));
                    //if(!empty($easycase_favourite)){
                    $qry .= " AND Easycase.id IN('".implode("','", $easycase_favourite)."')";
                    //}
                }
            } else {
                $conditions = array('EasycaseFavourite.company_id'=>SES_COMP,'EasycaseFavourite.user_id'=>SES_ID);
                $this->loadModel('EasycaseFavourite');
                $easycase_favourite = $this->EasycaseFavourite->find('list', array('fields'=>array('EasycaseFavourite.id','EasycaseFavourite.easycase_id'),'conditions'=>$conditions));
                // if(!empty($easycase_favourite)){
                $qry .= " AND Easycase.id IN('".implode("','", $easycase_favourite)."')";
                // }
            }
        }
        ######### Filter by Delegate To ##########
        elseif ($caseMenuFilters == "delegateto") {
            $qry.= " AND Easycase.assign_to!=0 AND Easycase.assign_to!=" . SES_ID . " AND Easycase.user_id=" . SES_ID;
        } elseif ($caseMenuFilters == "closecase") {
            $qry.= " AND Easycase.legend='3' AND Easycase.type_id !='10'";
        } elseif ($caseMenuFilters == "overdue") {
            $cur_dt = date('Y-m-d H:i:s', strtotime(GMT_DATETIME));
            $qry.= " AND Easycase.due_date !='' AND Easycase.due_date != '0000-00-00 00:00:00' AND Easycase.due_date !='1970-01-01 00:00:00' AND Easycase.due_date < '" . $cur_dt . "' AND (Easycase.legend !=3) ";
        } elseif ($caseMenuFilters == "highpriority") {
            $qry.= " AND Easycase.priority ='0' ";
        } elseif ($caseMenuFilters == "newwip") {
            $qry.= " AND (Easycase.legend='1' OR Easycase.legend='2')  AND Easycase.type_id !='10'";
        } elseif ($caseMenuFilters == "openedtasks") {
            $qry.= " AND (Easycase.legend='1' OR Easycase.legend='2' OR Easycase.legend='5' OR Easycase.legend='4')  AND Easycase.type_id !='10'";
        } elseif ($caseMenuFilters == "closedtasks") {
            $qry.= " AND Easycase.legend='3' AND Easycase.type_id !='10'";
        }
        ######### Filter by Latest ##########
        elseif ($caseMenuFilters == "latest") {
            $filterenabled = 1;
            $qry_rest = $qry;
            $before = date('Y-m-d H:i:s', strtotime(GMT_DATETIME . "-2 day"));
            $all_rest = " AND Easycase.dt_created > '" . $before . "' AND Easycase.dt_created <= '" . GMT_DATETIME . "'";
            $qry_rest.= " AND Easycase.dt_created > '" . $before . "' AND Easycase.dt_created <= '" . GMT_DATETIME . "'";
        }
        if ($caseMenuFilters == "latest" && $projUniq != 'all') {
            $CaseCount3 = $this->Easycase->query("SELECT COUNT(Easycase.id) as count FROM easycases as Easycase WHERE " . $istype . $cond_easycase_actuve . " AND Easycase.project_id='$curProjId' AND Easycase.project_id!=0  " . $searchcase . " " . trim($qry_rest));
            $CaseCount = $CaseCount3['0']['0']['count'];
            if ($CaseCount == 0) {
                $rest = $this->Easycase->query("SELECT dt_created FROM easycases WHERE project_id ='" . $curProjId . "' ORDER BY dt_created DESC LIMIT 0 , 1");
                @$sdate = explode(" ", @$rest[0]['easycases']['dt_created']);
                $qry.= " AND Easycase.dt_created >= '" . @$sdate[0] . "' AND Easycase.dt_created <= '" . GMT_DATETIME . "'";
            } else {
                $qry = $qry . $all_rest;
            }
        } elseif ($caseMenuFilters == "latest" && $projUniq == 'all') {
            $qry = $qry . $all_rest;
        }
        $msQuery1 = " ";
        if (isset($caseMenuFilters) && $caseMenuFilters == "milestone") {
            $msQuery = "";
            if ($milestoneIds != "all" && strstr($milestoneIds, "-")) {
                $expMilestoneIds = explode("-", $milestoneIds);
                foreach ($expMilestoneIds as $msid) {
                    if ($msid) {
                        $msQuery.= "EasycaseMilestone.milestone_id=" . $msid . " OR ";
                    }
                }
                if ($msQuery) {
                    $msQuery = substr($msQuery, 0, -3);
                    $msQuery = " AND (" . $msQuery . ")";
                }
            } else {
                $tody = date('Y-m-d', strtotime("now"));
            }
        }
        //print  $qry;exit;
        $mileSton_names = array();
        $all_mileSton_names = array();
        if ($projUniq) {
            $page = $casePage;
            $limit1 = $page * $page_limit - $page_limit;
            $limit2 = $page_limit;
            if (isset($caseMenuFilters) && $caseMenuFilters == "milestone") {
                if ($milestone_type == 0) {
                    $qrycheck = "Milestone.isactive='0'";
                } else {
                    $qrycheck = "Milestone.isactive='1'";
                }
                if ($projUniq != 'all') {
                    $caseAll = $this->Easycase->query("SELECT SQL_CALC_FOUND_ROWS Easycase.*,User.name,IF((Easycase.assign_to =" . SES_ID . "),User.name,User.name) AS Assigned FROM ( SELECT Easycase.*,EasycaseMilestone.id AS Emid, EasycaseMilestone.milestone_id AS Em_milestone_id,EasycaseMilestone.user_id AS Em_user_id,EasycaseMilestone.id_seq,Milestone.id as Mid,Milestone.title AS Mtitle ,Milestone.end_date,Milestone.isactive AS Misactive,Milestone.project_id AS Mproject_id,Milestone.uniq_id AS Muinq_id FROM easycases as Easycase,easycase_milestones AS EasycaseMilestone,milestones AS Milestone WHERE EasycaseMilestone.easycase_id=Easycase.id AND Milestone.id=EasycaseMilestone.milestone_id" . $msQuery1 . "AND Easycase.istype='1' AND " . $clt_sql . " " . $cond_easycase_actuve . " AND " . $qrycheck . " AND Easycase.project_id='$curProjId' AND Easycase.project_id!=0  " . $searchcase . " " . trim($qry) . " AND EasycaseMilestone.easycase_id=Easycase.id AND EasycaseMilestone.project_id=" . $curProjId . $msQuery . " ) AS Easycase LEFT JOIN users User ON Easycase.assign_to=User.id ORDER BY Easycase.end_date ASC,Easycase.Mtitle ASC," . $orderby . " LIMIT 0,1500");
                }
                if ($projUniq == 'all') {
                    $caseAll = $this->Easycase->query("SELECT SQL_CALC_FOUND_ROWS Easycase.*,User.name,IF((Easycase.assign_to =" . SES_ID . "),User.name,User.name) AS Assigned FROM ( SELECT  Easycase.*,EasycaseMilestone.id AS Emid, EasycaseMilestone.milestone_id AS Em_milestone_id,EasycaseMilestone.user_id AS Em_user_id,EasycaseMilestone.id_seq,Milestone.id as Mid,Milestone.title AS Mtitle ,Milestone.end_date,Milestone.isactive AS Misactive,Milestone.project_id AS Mproject_id,Milestone.uniq_id AS Muinq_id FROM easycases as Easycase,easycase_milestones AS EasycaseMilestone,milestones AS Milestone WHERE EasycaseMilestone.easycase_id=Easycase.id AND Milestone.id=EasycaseMilestone.milestone_id AND " . $istype . " AND " . $clt_sql . " " . $cond_easycase_actuve . " AND " . $qrycheck . " AND Easycase.project_id!=0 AND Easycase.project_id IN (SELECT ProjectUser.project_id FROM project_users AS ProjectUser,projects as Project WHERE ProjectUser.user_id=" . SES_ID . " AND ProjectUser.project_id=Project.id AND Project.isactive='1' AND ProjectUser.company_id='" . SES_COMP . "') " . $searchcase . " " . trim($qry) . " AND EasycaseMilestone.easycase_id=Easycase.id AND EasycaseMilestone.project_id IN (SELECT ProjectUser.project_id FROM project_users AS ProjectUser,projects as Project WHERE ProjectUser.user_id=" . SES_ID . " AND ProjectUser.project_id=Project.id AND Project.isactive='1')" . $msQuery . " ) AS Easycase LEFT JOIN users User ON Easycase.assign_to=User.id ORDER BY Easycase.end_date ASC,Easycase.Mtitle ASC," . $orderby . " LIMIT 0,1500");
                }
            } else {
                $istype_2  = "";
                
                if ($projUniq == 'all') {
                    if (in_array('comment', $checkedFields)) {
                        $res_cs_nos = $this->Easycase->query("SELECT case_no FROM easycases as Easycase WHERE Easycase.istype=1 AND " . $clt_sql . " " . $cond_easycase_actuve . " AND Easycase.project_id!=0 AND Easycase.project_id IN (SELECT ProjectUser.project_id FROM project_users AS ProjectUser,projects as Project WHERE ProjectUser.user_id=" . SES_ID . " AND ProjectUser.project_id=Project.id AND Project.isactive='1' AND ProjectUser.company_id='" . SES_COMP . "') " . $searchcase . " " . trim($qry) . "  ORDER BY  Easycase.id DESC");
                        if ($res_cs_nos) {
                            $cs_no_ids = Hash::extract($res_cs_nos, '{n}.Easycase.case_no');
                            $istype_2 = " ELSE Easycase.case_no IN(".implode(',', $cs_no_ids).") ";
                        }
                    }
                    if ($caseMenuFilters == "latest") {
                        $caseAll = $this->Easycase->query("SELECT SQL_CALC_FOUND_ROWS Easycase.*,User.name,IF((Easycase.assign_to =" . SES_ID . "),User.name,User.name) AS Assigned FROM ( SELECT * FROM easycases as Easycase WHERE " . $istype . " AND " . $clt_sql . " " . $cond_easycase_actuve . " AND Easycase.project_id!=0 AND Easycase.project_id IN (SELECT ProjectUser.project_id FROM project_users AS ProjectUser,projects as Project WHERE ProjectUser.user_id=" . SES_ID . " AND ProjectUser.project_id=Project.id AND Project.isactive='1' AND ProjectUser.company_id='" . SES_COMP . "') " . $searchcase . " " . trim($qry) . "  ORDER BY  Easycase.dt_created DESC) AS Easycase LEFT JOIN users User ON Easycase.assign_to=User.id ORDER BY " . $orderby . " ");
                    } else {
                        $req_sql = "SELECT SQL_CALC_FOUND_ROWS Easycase.*,User.name,IF((Easycase.assign_to =" . SES_ID . "),User.name,User.name) AS Assigned FROM ( SELECT Easycase.* FROM easycases as Easycase LEFT JOIN easycase_milestones EasycaseMilestone on Easycase.id = EasycaseMilestone.easycase_id WHERE " . $istype . " AND " . $clt_sql . " " . $cond_easycase_actuve . " AND Easycase.project_id!=0 AND Easycase.project_id IN (SELECT ProjectUser.project_id FROM project_users AS ProjectUser,projects as Project WHERE ProjectUser.user_id=" . SES_ID . " AND ProjectUser.project_id=Project.id AND Project.isactive='1' AND ProjectUser.company_id='" . SES_COMP . "') AND ( CASE WHEN Easycase.istype = 1 THEN 1 " . $searchcase . " " . trim($qry) . " ".$istype_2." END )  ORDER BY  Easycase.project_id DESC) AS Easycase LEFT JOIN users User ON Easycase.assign_to=User.id ORDER BY " . $orderby . " LIMIT 0,10000 ";
                        if ($gby == 'milestone') {
                            $req_sql = "SELECT SQL_CALC_FOUND_ROWS Easycase.*,EasycaseMilestone.milestone_id as mid,User.name,IF((Easycase.assign_to =" . SES_ID . "),User.name,User.name) AS Assigned FROM ( SELECT * FROM easycases as Easycase WHERE " . $istype . " AND " . $clt_sql . " " . $cond_easycase_actuve . " AND Easycase.project_id!=0 AND Easycase.project_id IN (SELECT ProjectUser.project_id FROM project_users AS ProjectUser,projects as Project WHERE ProjectUser.user_id=" . SES_ID . " AND ProjectUser.project_id=Project.id AND Project.isactive='1' AND ProjectUser.company_id='" . SES_COMP . "') AND ( CASE WHEN Easycase.istype = 1 THEN 1 " . $searchcase . " " . trim($qry) . " ".$istype_2." END )  ORDER BY  Easycase.project_id DESC) AS Easycase LEFT JOIN users User ON Easycase.assign_to=User.id " . $case_join . " JOIN easycase_milestones EasycaseMilestone ON Easycase.id=EasycaseMilestone.easycase_id" . $milstone_filter_condition . " ORDER BY " . $orderby . $mileSton_orderby . " ,EasycaseMilestone.id_seq ASC LIMIT 0,10000 ";
                        }
                        $caseAll = $this->Easycase->query($req_sql);
                        if ($gby == 'milestone') {
                            $results_mids = Hash::extract($caseAll, '{n}.EasycaseMilestone.mid');
                            $results_mids = array_filter($results_mids);
                            if ($results_mids) {
                                $cond = array('conditions' => array('Milestone.id' => $results_mids), 'fields' => array('Milestone.id', 'Milestone.uniq_id', 'Milestone.title', 'Milestone.isactive', 'Milestone.project_id'));
                                $mileSton_names = $this->Milestone->find('all', $cond);
                                $mileSton_names = Hash::combine($mileSton_names, '{n}.Milestone.id', '{n}.Milestone');
                                foreach ($mileSton_names as $miik => $miiv) {
                                    $mileSton_names[$miik]['title'] = htmlspecialchars_decode($miiv['title']);
                                }
                            }
                        }
                    }
                } else {
                    if (in_array('comment', $checkedFields)) {
                        $res_cs_nos = $this->Easycase->query("SELECT case_no FROM easycases as Easycase WHERE Easycase.istype=1 AND " . $clt_sql . " " . $cond_easycase_actuve . " AND Easycase.project_id='$curProjId' AND Easycase.project_id!=0  " . $searchcase . " " . trim($qry));
                        if ($res_cs_nos) {
                            $cs_no_ids = Hash::extract($res_cs_nos, '{n}.Easycase.case_no');
                            $istype_2 = " ELSE Easycase.case_no IN(".implode(',', $cs_no_ids).") ";
                        }
                    }
                    $req_sql = "SELECT SQL_CALC_FOUND_ROWS Easycase.*,User.name,IF((Easycase.assign_to =" . SES_ID . "),User.name,User.name) AS Assigned FROM (SELECT Easycase.* FROM easycases as Easycase LEFT JOIN easycase_milestones EasycaseMilestone on Easycase.id = EasycaseMilestone.easycase_id WHERE " . $istype . " AND " . $clt_sql . " " . $cond_easycase_actuve . " AND Easycase.project_id='$curProjId' AND Easycase.project_id!=0  AND ( CASE WHEN Easycase.istype = 1 THEN 1 " . $searchcase . " " . trim($qry) . " ".$istype_2." END ) ) AS Easycase LEFT JOIN users User ON Easycase.assign_to=User.id ORDER BY " . $orderby . " LIMIT 0,10000 ";
                    if ($gby == 'milestone') {
                        $req_sql = "SELECT SQL_CALC_FOUND_ROWS Easycase.*,EasycaseMilestone.milestone_id as mid,User.name,IF((Easycase.assign_to =" . SES_ID . "),User.name,User.name) AS Assigned FROM ( SELECT * FROM easycases as Easycase WHERE " . $istype . " AND " . $clt_sql . " " . $cond_easycase_actuve . " AND Easycase.project_id='$curProjId' AND Easycase.project_id!=0   AND ( CASE WHEN Easycase.istype = 1 THEN 1 " . $searchcase . " " . trim($qry) . " ".$istype_2." END ) ) AS Easycase LEFT JOIN users User ON Easycase.assign_to=User.id " . $case_join . " JOIN easycase_milestones EasycaseMilestone ON Easycase.id=EasycaseMilestone.easycase_id AND EasycaseMilestone.project_id ='" . $curProjId . "'" . $milstone_filter_condition . " ORDER BY " . $orderby . $mileSton_orderby . " ,EasycaseMilestone.id_seq ASC LIMIT 0,10000 ";
                    }
                    $caseAll = $this->Easycase->query($req_sql);
                    if ($gby == 'milestone') {
                        $results_mids = Hash::extract($caseAll, '{n}.EasycaseMilestone.mid');
                        $results_mids = array_filter($results_mids);
                        if ($results_mids) {
                            $cond = array('conditions' => array('Milestone.id' => $results_mids), 'fields' => array('Milestone.id', 'Milestone.uniq_id', 'Milestone.title', 'Milestone.isactive', 'Milestone.project_id'));
                            $mileSton_names = $this->Milestone->find('all', $cond);
                            $mileSton_names = Hash::combine($mileSton_names, '{n}.Milestone.id', '{n}.Milestone');
                            foreach ($mileSton_names as $miik => $miiv) {
                                $mileSton_names[$miik]['title'] = htmlspecialchars_decode($miiv['title']);
                            }
                        }
                    }
                }
            }
            if ($gby == 'milestone') {
                if ($projUniq == 'all') {
                    $req_sql_cnt = "SELECT count(Easycase.id) as cnt FROM ( SELECT Easycase.* FROM easycases as Easycase WHERE " . $istype . " AND " . $clt_sql . " " . $cond_easycase_actuve . " AND Easycase.project_id!=0 AND Easycase.project_id IN (SELECT ProjectUser.project_id FROM project_users AS ProjectUser,projects as Project WHERE ProjectUser.user_id=" . SES_ID . " AND ProjectUser.project_id=Project.id AND Project.isactive='1' AND ProjectUser.company_id='" . SES_COMP . "')  AND ( CASE WHEN Easycase.istype = 1 THEN 1  " . $searchcase . " " . trim($qry) . " ".$istype_2." END ) ) AS Easycase " . $case_join . " JOIN easycase_milestones EasycaseMilestone ON Easycase.id=EasycaseMilestone.easycase_id" . $milstone_filter_condition . " LEFT JOIN users User ON Easycase.assign_to=User.id ORDER BY " . $orderby;
                    $tot = $this->Easycase->query($req_sql_cnt);
                } else {
                    $req_sql_cnt = "SELECT count(Easycase.id) as cnt FROM ( SELECT Easycase.* FROM easycases as Easycase WHERE " . $istype . " AND " . $clt_sql . " " . $cond_easycase_actuve . " AND Easycase.project_id='$curProjId' AND Easycase.project_id!=0  AND ( CASE WHEN Easycase.istype = 1 THEN 1 " . $searchcase . " " . trim($qry) . " ".$istype_2." END ) ) AS Easycase " . $case_join . " JOIN easycase_milestones EasycaseMilestone ON Easycase.id=EasycaseMilestone.easycase_id" . $milstone_filter_condition . " LEFT JOIN users User ON Easycase.assign_to=User.id ORDER BY " . $orderby;
                    $tot = $this->Easycase->query($req_sql_cnt);
                }
                $CaseCount = $tot[0][0]['cnt'];

                $tsk_grp_fl = array(0, 1);
                if (isset($_COOKIE['TASKGROUP_FIL']) && $_COOKIE['TASKGROUP_FIL']) {
                    if (trim($_COOKIE['TASKGROUP_FIL']) == 'active') {
                        $tsk_grp_fl = 1;
                    } elseif (trim($_COOKIE['TASKGROUP_FIL']) == 'completed') {
                        $tsk_grp_fl = 0;
                    }
                }
                if ($projUniq == 'all') {
                    $ec_mil = $this->Easycase->query("SELECT DISTINCT(EasycaseMilestone.milestone_id) as mid FROM easycase_milestones AS EasycaseMilestone WHERE EasycaseMilestone.project_id IN(SELECT PJU.project_id FROM project_users AS PJU WHERE PJU.company_id = " . SES_COMP . " AND PJU.user_id = " . SES_ID . ")");
                    $cond = array('conditions' => array('Milestone.company_id' => SES_COMP, 'Milestone.isactive' => $tsk_grp_fl), 'fields' => array('Milestone.id', 'Milestone.uniq_id', 'Milestone.project_id', 'Milestone.title'), 'order' => 'Milestone.created DESC');
                    if ($ec_mil) {
                        $ec_mil = array_unique(Hash::extract($ec_mil, '{n}.EasycaseMilestone.mid'));
                        $cond = array('conditions' => array('Milestone.company_id' => SES_COMP, 'Milestone.isactive' => $tsk_grp_fl, 'NOT' => array('Milestone.id' => $ec_mil)), 'fields' => array('Milestone.id', 'Milestone.uniq_id', 'Milestone.project_id', 'Milestone.title'), 'order' => 'Milestone.created DESC');
                    }
                } else {
                    $ec_mil = $this->Easycase->query("SELECT DISTINCT(EasycaseMilestone.milestone_id) as mid FROM easycase_milestones AS EasycaseMilestone WHERE EasycaseMilestone.project_id IN(SELECT PJU.project_id FROM project_users AS PJU WHERE PJU.company_id = " . SES_COMP . " AND PJU.user_id = " . SES_ID . " AND PJU.project_id = " . $curProjId . ")");
                    $cond = array('conditions' => array('Milestone.company_id' => SES_COMP, 'Milestone.isactive' => $tsk_grp_fl, 'Milestone.project_id' => $curProjId), 'fields' => array('Milestone.id', 'Milestone.uniq_id', 'Milestone.project_id', 'Milestone.title', 'Milestone.isactive'), 'order' => 'Milestone.created DESC');
                    if ($ec_mil) {
                        $ec_mil = array_unique(Hash::extract($ec_mil, '{n}.EasycaseMilestone.mid'));
                        $cond = array('conditions' => array('Milestone.company_id' => SES_COMP, 'Milestone.isactive' => $tsk_grp_fl, 'Milestone.project_id' => $curProjId, 'NOT' => array('Milestone.id' => $ec_mil)), 'fields' => array('Milestone.id', 'Milestone.uniq_id', 'Milestone.project_id', 'Milestone.title', 'Milestone.isactive'), 'order' => 'Milestone.created DESC');
                    }
                }
                $all_mileSton_names = $this->Milestone->find('all', $cond);
                if ($all_mileSton_names) {
                    $all_mileSton_names = Hash::combine($all_mileSton_names, '{n}.Milestone.id', '{n}.Milestone');
                    foreach ($all_mileSton_names as $mik => $miv) {
                        $all_mileSton_names[$mik]['title'] = htmlspecialchars_decode($miv['title']);
                    }
                }
            } else {
                $tot = $this->Easycase->query("SELECT FOUND_ROWS() as total");
                $CaseCount = $tot[0][0]['total'];
            }
        } else {
            $CaseCount = 0;
        }
        /* the total Spent hours Task wise */
        $spentHrs = array();
        if (in_array('spent_hour', $checkedFields)) {
            if ($projUniq == 'all') {
                $logProjectCond = " AND  LogTime.project_id IN (SELECT ProjectUser.project_id FROM project_users AS ProjectUser,projects as Project WHERE ProjectUser.user_id=" . SES_ID . " AND ProjectUser.project_id=Project.id AND Project.isactive='1' AND ProjectUser.company_id='" . SES_COMP . "')";
            } else {
                $logProjectCond = " AND  LogTime.project_id='".$curProjId."'";
            }

            $logQuery = "SELECT SUM(LogTime.total_hours) AS total,LogTime.task_id FROM log_times AS LogTime WHERE 1=1 $logProjectCond GROUP BY LogTime.task_id";
            $logts =  $this->LogTime->query($logQuery);
            if (!empty($logts)) {
                foreach ($logts as $k=>$v) {
                    $spentHrs[$v['LogTime']['task_id']] = $v[0]['total'];
                }
            }
        }
        /* End */
        $resCaseProj['caseCount'] = $CaseCount;
        $view = new View($this);
        $tz = $view->loadHelper('Tmzone');
        $dt = $view->loadHelper('Datetime');
        $cq = $view->loadHelper('Casequery');
        $frmt = $view->loadHelper('Format');
        $resCaseProj['caseAll'] = $caseAll;
        $resCaseProj['milesto_names'] = $mileSton_names;
        $resCaseProj['all_milesto_names'] = $all_mileSton_names;
        $priArr = array('high', 'medium', 'low');
        $stsArr = array(1 => 'New', 2 => 'In Progress', 3 => 'Closed', 4 => 'In Progress', 5 => 'Resolved');
        $sql = "SELECT Type.* FROM types AS Type WHERE Type.company_id = 0 OR Type.company_id =" . SES_COMP;
        $typeArr = $this->Easycase->query($sql);
        $curCreated = $tz->GetDateTime(SES_TIMEZONE, TZ_GMT, TZ_DST, TZ_CODE, GMT_DATETIME, "datetime");

        $milestone_pids = array_unique(Hash::extract($caseAll, '{n}.Easycase.project_id'));
        $cond_pnames = array('conditions' => array('Project.id' => $milestone_pids), 'fields' => array('Project.id', 'Project.name'));
        $all_prj_names = $this->Project->find('list', $cond_pnames);

        $content = '';
        if (in_array('date', $checkedFields)) {
            $content.= 'Date';
        }
        if (in_array('case_no', $checkedFields)) {
            $content == '' ? $content.= 'Task#' : $content.= ',Task#';
        }
        if (in_array('case_title', $checkedFields)) {
            $content == '' ? $content.= 'Title' : $content.= ',Title';
        }
        if (in_array('case_description', $checkedFields)) {
            $content == '' ? $content.= 'Description' : $content.= ',Description';
        }
        if ($gby == 'milestone') {
            if ($projUniq == 'all') {
                $content == '' ? $content.= 'Sprint/TaskGroup' : $content.=',Sprint/TaskGroup';
            } else {
                if ($_SESSION['project_methodology'] != 'scrum') {
                    $content == '' ? $content.= 'TaskGroup' : $content.=',TaskGroup';
                } else {
                    $content == '' ? $content.= 'Sprint' : $content.=',Sprint';
                }
            }
        }
        // if (in_array('task_parent', $checkedFields)) {
        //     $content == '' ? $content.= 'Parent' : $content.= ',Parent';
        // }
        if (in_array('project_name', $checkedFields)) {
            $content == '' ? $content.= 'Project' : $content.= ',Project';
        }
        if (in_array('case_type', $checkedFields)) {
            $content == '' ? $content.= 'Type' : $content.= ',Type';
        }
        // if (in_array('Label', $checkedFields)) {
        //     $content == '' ? $content.= 'Label' : $content.= ',Label';
        // }
        if (in_array('estimated_hour', $checkedFields)) {
            $content == '' ? $content.= 'Estimated Hour' : $content.= ',Estimated Hour';
        }
        if (in_array('spent_hour', $checkedFields)) {
            $content == '' ? $content.= 'Spent Hour' : $content.= ',Spent Hour';
        }
        if (in_array('assigned_to', $checkedFields)) {
            $content == '' ? $content.= 'Assigned To' : $content.= ',Assigned To';
        }
        if (in_array('case_priority', $checkedFields)) {
            $content == '' ? $content.= 'Priority' : $content.= ',Priority';
        }
        if (in_array('created_date', $checkedFields)) {
            $content == '' ? $content.= 'Created Date' : $content.= ',Created Date';
        }
        if (in_array('created_by', $checkedFields)) {
            $content == '' ? $content.= 'Created By' : $content.= ',Created By';
        }
        if (in_array('updated_date', $checkedFields)) {
            $content == '' ? $content.= 'Updated Date' : $content.= ',Updated Date';
        }
        if (in_array('case_status', $checkedFields)) {
            $content == '' ? $content.= 'Status' : $content.= ',Status';
        }
        if (in_array('gantt_start_date', $checkedFields)) {
            $content == '' ? $content.= 'Start Date' : $content.= ',Start Date';
        }
        if (in_array('due_date', $checkedFields)) {
            $content == '' ? $content.= 'Due Date' : $content.= ',Due Date';
        }
        if (in_array('comment', $checkedFields)) {
            $content == '' ? $content.= 'Comments' : $content.= ',Comments';
        }
        //Custom fields
        if (in_array('customField', $checkedFields) && $projUniq != 'all') {
            $this->loadModel('CustomField');
            $this->loadModel('CustomFieldValue');
            $allActiveFields = $this->CustomField->getAllActiveCustomFields();
            //Assign all headers
            if ($allActiveFields) {
                foreach ($allActiveFields as $k => $v) {
                    $content == '' ? $content.= $v : $content.= ','.$v;
                }
            }
            //$curProjId
            $task_ids = array_filter(array_unique(Hash::extract($resCaseProj['caseAll'], '{n}.Easycase.id')));
            $AllCustomFields = [];
            if ($task_ids) {
                $AllCustomFields = $this->CustomFieldValue->getAllCustomFieldByTaskIds($task_ids, SES_COMP);
                if ($AllCustomFields) {
                    $AllCustomFields = $this->CustomFieldValue->reorderCustomFieldArray($AllCustomFields, 'taskid', $dt, $tz);
                }
            }
        }
        //Custom fieldds end
        $content .= "\n";
        $csts_arr = array();
        if (is_array($resCaseProj) && count($resCaseProj) > 0) {
            // if (in_array('Label', $checkedFields)) {
            //     $easy_ids = Hash::extract($resCaseProj['caseAll'], '{n}.Easycase.id');
            //     $this->loadModel('EasycaseLabel');
            //     $esy_labels = $this->EasycaseLabel->geteasyLabels($easy_ids, SES_COMP);
            // }
            $csts_arr = $this->Easycase->getStatusFortasks($resCaseProj['caseAll']);
            $existingTaskProject = array();
            $totalRecors = 0;
            foreach ($resCaseProj['caseAll'] as $key => $val) {
                if ($val["Easycase"]['istype'] == 1) {
                    $existingTaskProject[$val["Easycase"]['project_id']][$val["Easycase"]['case_no']] = $val["Easycase"]['case_no'];
                } else {
                    if (!isset($existingTaskProject[$val["Easycase"]['project_id']][$val["Easycase"]['case_no']])) {
                        continue;
                    }
                }
                $updated = $tz->GetDateTime(SES_TIMEZONE, TZ_GMT, TZ_DST, TZ_CODE, $val['Easycase']['dt_created'], "datetime");
                $created = $tz->GetDateTime(SES_TIMEZONE, TZ_GMT, TZ_DST, TZ_CODE, $val['Easycase']['actual_dt_created'], "datetime");
                $dueDate = '';
                $gantt_start_date = '';
                if (!empty($val["Easycase"]['due_date']) && trim($val["Easycase"]['due_date']) != '0000-00-00 00:00:00' && !stristr($val["Easycase"]['due_date'], "1970-01-01")) {
                    //$dueDate = $val["Easycase"]['due_date'] != '' ? " ".date($CSV_DT_FORMAT, strtotime($val["Easycase"]['due_date'])) : '';
                    $du_dt = $val["Easycase"]['due_date'] != '' ? $tz->GetDateTime(SES_TIMEZONE, TZ_GMT, TZ_DST, TZ_CODE, $val['Easycase']['due_date'], "datetime") : '' ;
                    
                    $dueDate = $du_dt != '' ? " ".date($CSV_DT_FORMAT, strtotime($du_dt)) : '';
                }
                if (!empty($val["Easycase"]['gantt_start_date']) && trim($val["Easycase"]['gantt_start_date']) != '0000-00-00 00:00:00' && !stristr($val["Easycase"]['gantt_start_date'], "1970-01-01")) {
                    $st_dt = $val["Easycase"]['gantt_start_date'] != '' ? $tz->GetDateTime(SES_TIMEZONE, TZ_GMT, TZ_DST, TZ_CODE, $val['Easycase']['gantt_start_date'], "datetime") : '' ;
                    
                    $gantt_start_date = $st_dt != '' ? " ".date($CSV_DT_FORMAT, strtotime($st_dt)) : '';
                }
                //  $gantt_start_date = $val["Easycase"]['gantt_start_date'] != '' ? " ".date($CSV_DT_FORMAT, strtotime($val["Easycase"]['gantt_start_date'])) : '';
                $types = $cq->getTypeArr($val["Easycase"]['type_id'], $typeArr);
                $typeName = $types['Type']['name'];
                $assigned = $val["0"]['Assigned'] != '' ? $val["0"]['Assigned'] : 'Nobody';
                $estHour = $this->Format->format_second_hrmin($val['Easycase']['estimated_hours']);
                if (in_array('date', $checkedFields)) {
                    $content .= '" ' . date($CSV_DT_FORMAT, strtotime($val["Easycase"]['dt_created'])) . '",';
                }
                if (in_array('case_no', $checkedFields)) {
                    $content .='"' . $val["Easycase"]['case_no'] . '",';
                }
                if ($val["Easycase"]['istype'] == 2) {
                    if (in_array('case_title', $checkedFields)) {
                        $content .=",";
                    }
                    // if (in_array('task_parent', $checkedFields)) {
                    //     if ($val["Easycase"]['parent_task_id']) {
                    //         $parents = $this->Easycase->find('first', array('conditions'=>array('id'=>$val["Easycase"]['parent_task_id']),'fields'=>array('case_no')));
                    //         $content .='"' . $parents["Easycase"]['case_no'] . '",';
                    //     } else {
                    //         $content .='0,';
                    //     }
                    // }
                    if (in_array('project_name', $checkedFields)) {
                        $content .=",";
                    }
                    if ($gby == 'milestone') {
                        $content .=",";
                    }
                    if (in_array('case_title', $checkedFields)) {
                        $content .=",";
                    }
                } else {
                    if (in_array('case_title', $checkedFields)) {
                        $content .='"' . $this->Format->getReplacedStrng($frmt->formatTitle($val["Easycase"]['title'])) . '",';
                    }
                    if (in_array('case_description', $checkedFields)) {
                        $content .='"' . $this->getNewlinesInsingle($this->Format->getReplacedStrng($frmt->formatTitle($this->Format->stripHtml($val["Easycase"]['message'])))) . '",';
                    }
                    if ($gby == 'milestone') {
                        $content .='"' . $this->Format->getReplacedStrng($frmt->formatTitle($resCaseProj['milesto_names'][$val["EasycaseMilestone"]['mid']]['title'])) . '",';
                    }
                    // if (in_array('task_parent', $checkedFields)) {
                    //     if ($val["Easycase"]['parent_task_id']) {
                    //         $parents = $this->Easycase->find('first', array('conditions'=>array('id'=>$val["Easycase"]['parent_task_id']),'fields'=>array('case_no')));
                    //         $content .='"' . $parents["Easycase"]['case_no'] . '",';
                    //     } else {
                    //         $content .='0,';
                    //     }
                    // }
                    if (in_array('project_name', $checkedFields)) {
                        $content .='"' . $all_prj_names[$val["Easycase"]['project_id']] . '",';
                    }
                }
              
                if (in_array('case_type', $checkedFields)) {
                    $content .='"' . $typeName . '",';
                }
                // if (in_array('Label', $checkedFields)) {
                //     $content .='"' . $esy_labels[$val["Easycase"]['id']] . '",';
                // }
                if (in_array('estimated_hour', $checkedFields)) {
                    $content .='"' . $estHour . '",';
                }
                if (in_array('spent_hour', $checkedFields)) {
                    $spnt = isset($spentHrs[$val["Easycase"]['id']])?$spentHrs[$val["Easycase"]['id']]:0;
                    $content .='"' .  $this->Format->format_second_hrmin($spnt) . '",';
                }
                if (in_array('assigned_to', $checkedFields)) {
                    $content .='"' . $assigned . '",';
                }
                if (in_array('case_priority', $checkedFields)) {
                    $content .='"' . $priArr[$val["Easycase"]['priority']] . '",';
                }
                if (in_array('created_date', $checkedFields)) {
                    $content .='" ' . date($CSV_DT_FORMAT, strtotime($val["Easycase"]['actual_dt_created'])) . '",';
                }
                if (in_array('created_by', $checkedFields)) {
                    $content .='"' . $this->Format->getUserShortName($val["Easycase"]['user_id'])['User']['name'] . '",';
                }
                if (in_array('updated_date', $checkedFields)) {
                    #$content .='"' . $dt->facebook_style($updated, $curCreated, 'time') . '",';
                    $content .='" ' . date($CSV_DT_FORMAT, strtotime($updated)) . '",';
                }
                if (in_array('case_status', $checkedFields)) {
                    if ($val['Easycase']['custom_status_id']) {
                        $content .='"' . $csts_arr[$val["Easycase"]['custom_status_id']]['name'] . '",';
                    } else {
                        $content .='"' . $stsArr[$val["Easycase"]['legend']] . '",';
                    }
                }
                if (in_array('gantt_start_date', $checkedFields)) {
                    $content .='"' . $gantt_start_date . '",';
                }
                if (in_array('due_date', $checkedFields)) {
                    $content .='"' . $dueDate . '",';
                }
                if (in_array('comment', $checkedFields)) {
                    if ($val["Easycase"]['istype'] == 1) {
                        $content .=",";
                    } else {
//                        if (!empty($val["Easycase"]['message'])) {
                        $desp = $val["Easycase"]['message'];
//                        } else {
                        if (!empty($val["Easycase"]['project_id']) && !empty($val["Easycase"]['case_no'])) {
                            $query = "SELECT * FROM easycases as Easycase WHERE  id=" . $val["Easycase"]['id'] . " AND project_id='" . $val["Easycase"]['project_id'] . "' AND case_no=" . $val["Easycase"]['case_no'] . " AND istype='2' ORDER BY dt_created ASC";
                            $sqlcasedata = $this->Easycase->query($query);
                        }
//                        pr($sqlcasedata); exit;
                        $usrDtlsAll = $this->Easycase->getTaskUser($val["Easycase"]['project_id'], $val["Easycase"]['case_no']);
                        $userArr = array();
                        foreach ($usrDtlsAll as $ud) {
                            $userArr[$ud['User']['id']] = $ud;
                        }
                        $view = new View($this);
                        $tz = $view->loadHelper('Tmzone');
                        $dt = $view->loadHelper('Datetime');
                        $cq = $view->loadHelper('Casequery');
                        $frmt = $view->loadHelper('Format');
                    
                        $sqlcasedata = $this->Easycase->formatReplies($sqlcasedata, $userArr, $frmt, $cq, $tz, $dt);
                        $desp = !empty($sqlcasedata['sqlcasedata']['0']["Easycase"]['replyCap']) ? strip_tags($sqlcasedata['sqlcasedata']['0']["Easycase"]['replyCap']) : '';
                        $reply = !empty($sqlcasedata['sqlcasedata']['0']["Easycase"]['usrName']) ? strip_tags($sqlcasedata['sqlcasedata']['0']["Easycase"]['usrName']) : 'NA';
                        if (empty($desp)) {
                            $desp = !empty($val["Easycase"]['message']) ? $val["Easycase"]['message'] : 'No Comment';
                        }
                        $desp = $reply . ' - ' . $desp;
                        $content .='"' . $this->getNewlinesInsingle($this->Format->getReplacedStrng($frmt->formatTitle($this->Format->stripHtml($desp)))) . '",';
//                        $content .='"' . $reply . '",';
                    }
                }
                //Custom fields
                if (in_array('customField', $checkedFields) && $projUniq != 'all' && $allActiveFields) {
                    $tasktimeBalance = $this->Easycase->getTimeBalance($val["Easycase"], $allActiveFields);
                    $task_duration = $this->Easycase->getDurationOfTask($val["Easycase"], $allActiveFields);
                    $AllCustomFields[$val["Easycase"]['id']][$tasktimeBalance[0]]['CustomFieldValue']['value'] = $tasktimeBalance[1];
                    $AllCustomFields[$val["Easycase"]['id']][$task_duration[0]]['CustomFieldValue']['value'] = $task_duration[1];
                    foreach ($allActiveFields as $k => $v) {
                        if (isset($AllCustomFields[$val["Easycase"]['id']][$k])) {
                            if ($val["Easycase"]['legend'] != 3 && in_array($AllCustomFields[$val["Easycase"]['id']][$k]['CustomField']['placeholder'], ['variation','taskCmplDate','taskDuration'])) {
                                $content .=',';
                            } else {
                                $content .='"' . $AllCustomFields[$val["Easycase"]['id']][$k]['CustomFieldValue']['value'] . '",';
                            }
                        } else {
                            $content .=',';
                        }
                    }
                }
                //Custom fields end
                $content = trim($content, ',');
                $content .="\n";
                $totalRecors++;
                if ($totalRecors >= 5000) {
                    break;
                }
            }
            $content .= "\n" . "Export Date," . $this->Format->dateFormatReverse($tz->GetDateTime(SES_TIMEZONE, TZ_GMT, TZ_DST, TZ_CODE, GMT_DATETIME, "datetime"));
            $content .= "\n" . "Total," . $totalRecors . " records";
        }
        if (!is_dir(TASKLIST_CSV_PATH)) {
            @mkdir(TASKLIST_CSV_PATH, 0777, true);
        }

        $name = $projFil;
        if (trim($name) != '' && strlen($name) > 25) {
            $name = substr($name, 0, 24) . "_" . date('m-d-Y', strtotime(GMT_DATE)) .'_'.time(). "_tasklist.csv";
        } else {
            $name .= (trim($name) != '' ? "_" : '') . date('m-d-Y', strtotime(GMT_DATE)) .'_'.time(). "_tasklist.csv";
        }
        $download_name = date('m-d-Y', strtotime(GMT_DATE)) .'_'.time(). "_tasklist.csv";

        // echo $content;exit;
       
        // ob_clean();


        $file_path = TASKLIST_CSV_PATH . $name;
        $fp = @fopen($file_path, 'w+');
        fwrite($fp, $content);
        fclose($fp);

        //$this->response->header(array('Content-Encoding'=>'UTF-8','Content-type'=>'text/csv','charset'=>'UTF-8'));
        $this->response->charset('UTF-8');
        $this->response->type('csv');
        $this->response->file($file_path, array('download' => true, 'name' => urlencode($download_name)));
        return $this->response;
    }
    public function exportTaskcsv()
    {
        ini_set('max_execution_time', 0);
        ini_set('memory_limit', '-1');
        $this->loadModel('EasycaseLabel');
        $milestone_id = $this->request->data['Easycase']['milestone'];
        $this->Easycase->recursive = -1;
        $prj_unq_id = empty($this->data['Easycase']['project']) ? 'all' : $this->data['Easycase']['project'];
        $project_status = $this->data['Easycase']['is_active'];
        $qry = $this->Format->getSqlFields($this->data['Easycase'], $prj_unq_id);
        if ($this->request->data['Easycase']['comment'] == 2) {
            $istype = "Easycase.istype IN('1','2')";
            $title = " ";
        } elseif ($this->request->data['Easycase']['comment'] == 1) {
            $istype = "Easycase.istype IN('1')";
            $title = " AND Easycase.title != ''";
            $title = " AND Easycase.title != ''";
        }
        if ($prj_unq_id == 'all') {
            if ($this->request->data['Easycase']['comment'] == 1) {
                $orderby = "ORDER BY Project.name ASC";
            } elseif ($this->request->data['Easycase']['comment'] == 2) {
                $orderby = "ORDER BY Easycase.id ASC , Project.name ASC";
            }
        }
        if ($prj_unq_id != 'all') {
            if ($this->request->data['Easycase']['comment'] == 1) {
                $orderby = "ORDER BY Easycase.dt_created ASC";
            } elseif ($this->request->data['Easycase']['comment'] == 2) {
                $orderby = "ORDER BY Easycase.id ASC ,Easycase.dt_created ASC";
            }
        }
        if ($prj_unq_id == 'all') {
            $isLabel = '';
            if ($this->request->data['Easycase']['label'] != 'all') {
                $esy_labels = $this->EasycaseLabel->getLabelEcids('all', SES_COMP, $this->request->data['Easycase']['label']);
                if ($esy_labels) {
                    $isLabel = "Easycase.id IN(".implode(',', $esy_labels).") AND ";
                }
            }
            $statusCond = ($project_status != 0) ? "AND Project.isactive='" . $project_status . "'" : " ";
            $case_lists = $this->Easycase->query("
			SELECT 
				Easycase.id,Easycase.title,Easycase.custom_status_id,Easycase.legend,Easycase.priority,Easycase.istype,Easycase.project_id,
				Easycase.case_no,Easycase.user_id,Easycase.assign_to,Easycase.type_id,Easycase.message,Easycase.actual_dt_created,
				Easycase.due_date,Easycase.dt_created,Easycase.estimated_hours,Project.name,Easycase.title 
			FROM 
				easycases as Easycase, projects as Project 
			WHERE 
				Easycase.project_id=Project.id AND " .$isLabel. $istype . $title . " AND Easycase.isactive='1' AND 
				Easycase.project_id!=0 AND Easycase.project_id IN 
				(
					SELECT 
						ProjectUser.project_id 
					FROM 
						project_users AS ProjectUser,projects as Project 
					WHERE 
						ProjectUser.user_id=" . SES_ID . " AND ProjectUser.project_id=Project.id " . $statusCond . " AND Project.company_id='" . SES_COMP . "' " . $qry .
                ") " . $orderby);
            $projName = 'AllProject';
            $csv_output = "Project Name,";
        }
        if ($prj_unq_id != 'all') {
            $projArr = $this->Project->find('first', array('conditions' => array('Project.id' => $prj_unq_id, 'Project.company_id' => SES_COMP), 'fields' => array('Project.id')));
            if (count($projArr)) {
                $isLabel = '';
                if ($this->request->data['Easycase']['label'] != 'all') {
                    $esy_labels = $this->EasycaseLabel->getLabelEcids($projArr['Project']['id'], SES_COMP, $this->request->data['Easycase']['label']);
                    if ($esy_labels) {
                        $isLabel = "Easycase.id IN(".implode(',', $esy_labels).") AND ";
                    }
                }
                $curProjId = $projArr['Project']['id'];
                
                
                $sql = "SELECT 	
					Easycase.id,Easycase.title,Easycase.custom_status_id,Easycase.legend,Easycase.priority,Easycase.istype,Easycase.project_id,
					Easycase.case_no,Easycase.user_id,Easycase.assign_to,Easycase.type_id,Easycase.message,Easycase.actual_dt_created,
					Easycase.due_date,Easycase.dt_created,Easycase.estimated_hours,Project.name,Milestone.title 
				FROM 
					easycases as Easycase 
					LEFT JOIN projects as Project ON Easycase.project_id=Project.id 
					LEFT JOIN easycase_milestones as EasycaseMilestone ON Easycase.id=EasycaseMilestone.easycase_id 
					LEFT JOIN milestones as Milestone on Milestone.id=EasycaseMilestone.milestone_id   
				WHERE   " . $isLabel. $istype . $title . " AND Easycase.isactive='1' AND Easycase.project_id!=0 AND 
					Easycase.project_id = '" . $curProjId . "' " . $qry . '  ' . $orderby;

                //echo "<pre>";print_r($sql); exit;
                $case_lists = $this->Easycase->query($sql);
            }
            $projName = str_replace(" ", "_", ucwords($this->Format->getProjectName($curProjId)));
            $csv_output = "";
        }
        if ($this->request->data['Easycase']['comment'] == 1) {
            $csv_output .= "Tasks#,Title,Description,Status,Type,Label,TaskGroup,Assigned To,Priority,Due Date,Estimated Hour,Created By,Created Date,Updated Date\n";
        } elseif ($this->request->data['Easycase']['comment'] == 2) {
            $csv_output .= "Tasks#,Title,Description,Status,Type,Label,TaskGroup,Assigned To,Priority,Due Date,Estimated Hour,Created By,Created Date,Updated Date,Comments\n";
        }

        if ($case_lists) {
            $easy_ids = Hash::extract($case_lists, '{n}.Easycase.id');
            $esy_labels = $this->EasycaseLabel->geteasyLabels($easy_ids, SES_COMP);
        }
        $csts_arr = array();
        $csts_arr = $this->Easycase->getStatusFortasks($case_lists);
        $filename = htmlspecialchars_decode($projName) . "_" . date("dMY", time());
        header("Content-type: application/vnd.ms-excel");
        header("Content-disposition: csv" . date("Y-m-d") . ".csv");
        header("Content-disposition: filename=" . $filename . ".csv");
        
        $fp = @fopen('php://output', 'w+');
        fwrite($fp, $csv_output);
        foreach ($case_lists as $case_list) {
            $csv_outputs ='';
            $view = new View($this);
            $frmt = $view->loadHelper('Format');
            if ($case_list['Easycase']['custom_status_id']) {
                $status = $csts_arr[$case_list['Easycase']['custom_status_id']]['name'];
            } else {
                if ($case_list['Easycase']['legend'] == 1) {
                    $status = "New";
                } elseif ($case_list['Easycase']['legend'] == 2) {
                    $status = "Opened";
                } elseif ($case_list['Easycase']['legend'] == 3) {
                    $status = "Closed";
                } elseif ($case_list['Easycase']['legend'] == 4) {
                    $status = "Start";
                } elseif ($case_list['Easycase']['legend'] == 5) {
                    $status = "Resolved";
                }
            }
            $priority = "Low";
            if ($case_list['Easycase']['priority'] == 0) {
                $priority = "High";
            } elseif ($case_list['Easycase']['priority'] == 1) {
                $priority = "Medium";
            }
            if ($this->request->data['Easycase']['comment'] == 2 && $case_list['Easycase']['istype'] == 2) {
                if (!empty($case_list["Easycase"]['project_id']) && !empty($case_list["Easycase"]['case_no'])) {
                    $query = "SELECT * FROM easycases as Easycase WHERE  id=" . $case_list["Easycase"]['id'] . " AND project_id='" . $case_list["Easycase"]['project_id'] . "' AND case_no=" . $case_list["Easycase"]['case_no'] . " AND istype='2' ORDER BY dt_created ASC";
                    $sqlcasedata = $this->Easycase->query($query);
                }
                $usrDtlsAll = $this->Easycase->getTaskUser($case_list["Easycase"]['project_id'], $case_list["Easycase"]['case_no']);
                $userArr = array();

                foreach ($usrDtlsAll as $ud) {
                    $userArr[$ud['User']['id']] = $ud;
                }
                $tz = $view->loadHelper('Tmzone');
                $dt = $view->loadHelper('Datetime');
                $cq = $view->loadHelper('Casequery');
                $sqlcasedata = $this->Easycase->formatReplies($sqlcasedata, $userArr, $frmt, $cq, $tz, $dt, 0);
                $desp = !empty($sqlcasedata['sqlcasedata']['0']["Easycase"]['replyCap']) ? strip_tags($sqlcasedata['sqlcasedata']['0']["Easycase"]['replyCap']) : '';
                $reply = !empty($sqlcasedata['sqlcasedata']['0']["Easycase"]['usrName']) ? strip_tags($sqlcasedata['sqlcasedata']['0']["Easycase"]['usrName']) : 'NA';
                if (empty($desp)) {
                    $desp = !empty($case_list["Easycase"]['message']) ? $case_list["Easycase"]['message'] : 'No Comment';
                }
                $desp = $reply . ' - ' . $desp;
            }
            $createUserId = $case_list['Easycase']['user_id'];
            $assignUserId = $case_list['Easycase']['assign_to'];
            $Milestone = $case_list['Milestone']['title'];
            $getCreateUserName = $this->Format->getRequireUserName($createUserId, 1);
            $getAssignUserName = $this->Format->getRequireUserName($assignUserId, 1);
            $typeId = $case_list['Easycase']['type_id'];
            $getTypeName = $this->Format->getRequireTypeName($typeId);

            $projectNameAll = $case_list['Project']['name'];

            $case_no = $case_list['Easycase']['case_no'];
            if ($case_list['Easycase']['istype'] == 1) {
                // $title = '"' . str_replace('"', '""', $case_list['Easycase']['title']) . '"';
                $title = '"' . $this->Format->getReplacedStrng($frmt->formatTitle($case_list["Easycase"]['title'])) . '"';
                $description = '"' . str_replace('"', '""', strip_tags($case_list['Easycase']['message'])) . '"';
            } elseif ($case_list['Easycase']['istype'] == 2) {
                $title = '""';
                $description = '""';
            }

            $status = $status;
            $type = $getTypeName;
            $createdBy = $getCreateUserName;
            $assignedTo = $getAssignUserName;

            $easy_labelnm = (isset($esy_labels[$case_list['Easycase']['id']]))?$esy_labels[$case_list['Easycase']['id']]:'';
            $view = new View($this);
            $tz = $view->loadHelper('Tmzone');
            $updated = $tz->GetDateTime(SES_TIMEZONE, TZ_GMT, TZ_DST, TZ_CODE, $case_list['Easycase']['actual_dt_created'], "datetime");
            //$curCreated = $tz->GetDateTime(SES_TIMEZONE, TZ_GMT, TZ_DST, TZ_CODE, GMT_DATETIME, "datetime");
            $created = '"' . str_replace('"', '""', $this->Format->mdyFormat($updated, "time")) . '"';

            $due_date = "";
            if (!empty($case_list['Easycase']['due_date']) && trim($case_list['Easycase']['due_date']) != '0000-00-00 00:00:00' && !stristr($case_list['Easycase']['due_date'], "1970-01-01")) {
                $due_date = $tz->GetDateTime(SES_TIMEZONE, TZ_GMT, TZ_DST, TZ_CODE, $case_list['Easycase']['due_date'], "datetime");
                $due_date = '"' . date("m/d/Y", strtotime($due_date)) . '"';
            }
            $updated1 = $tz->GetDateTime(SES_TIMEZONE, TZ_GMT, TZ_DST, TZ_CODE, $case_list['Easycase']['dt_created'], "datetime");
            $updated = '"' . str_replace('"', '""', $this->Format->mdyFormat($updated1, "time")) . '"';
            if ($prj_unq_id == 'all') {
                $csv_outputs .= $projectNameAll . ",";
            }
            $estimated_hours = $this->Format->format_second_hrmin($case_list['Easycase']['estimated_hours']);
            $estimated_hours = '"' . str_replace('"', '""', $estimated_hours) . '"';

            if ($this->request->data['Easycase']['comment'] == 1) {
                $csv_outputs .= htmlspecialchars_decode($case_no) . "," . htmlspecialchars_decode($title) . "," . $this->getNewlinesInsingle(htmlspecialchars_decode($this->Format->stripHtml($description))) . "," . htmlspecialchars_decode($status) . "," . htmlspecialchars_decode($type) . ",". htmlspecialchars_decode($easy_labelnm) . "," . htmlspecialchars_decode($Milestone) . "," . htmlspecialchars_decode($assignedTo) . "," .$priority . ",". htmlspecialchars_decode($due_date) . "," . htmlspecialchars_decode($estimated_hours) . "," . htmlspecialchars_decode($createdBy) . "," . htmlspecialchars_decode($created) . "," . htmlspecialchars_decode($updated) . "\n";
            } elseif ($this->request->data['Easycase']['comment'] == 2) {
                $csv_outputs .= htmlspecialchars_decode($case_no) . "," . htmlspecialchars_decode($title) . "," . $this->getNewlinesInsingle(htmlspecialchars_decode($this->Format->stripHtml($description))) . "," . htmlspecialchars_decode($status) . "," . htmlspecialchars_decode($type) . ",". htmlspecialchars_decode($easy_labelnm) . "," . htmlspecialchars_decode($Milestone) . "," . htmlspecialchars_decode($assignedTo) . "," .$priority . "," . htmlspecialchars_decode($due_date) . "," . htmlspecialchars_decode($estimated_hours) . "," . htmlspecialchars_decode($createdBy) . "," . htmlspecialchars_decode($created) . "," . htmlspecialchars_decode($updated) . "," . $this->getNewlinesInsingle(htmlspecialchars_decode($this->Format->stripHtml($desp))) . "\n";
            }
            fwrite($fp, $csv_outputs);
        }
        fclose($fp);
        /*   $filename = htmlspecialchars_decode($projName) . "_" . date("dMY", time());
           header("Content-type: application/vnd.ms-excel");
           header("Content-disposition: csv" . date("Y-m-d") . ".csv");
           header("Content-disposition: filename=" . $filename . ".csv");
           print $csv_output;
           exit; */
        // print $csv_output;
        exit;
    }
    public function getNewlinesInsingle($inpt=null)
    {
        if ($inpt) {
            $inpt = trim(preg_replace('/\s+/', ' ', $inpt));
        }
        return $inpt;
    }
    public function exporttoCSV($projFil = null)
    {
        //ini_set('max_execution_time', 6); //increase max_execution_time to 10 min if data set is very large
        $this->Easycase->recursive = -1;
        $prj_unq_id = $projFil;
        if ($prj_unq_id != 'all') {
            $projArr = $this->Project->find('first', array('conditions' => array('Project.uniq_id' => $prj_unq_id, 'Project.isactive' => 1, 'Project.company_id' => SES_COMP), 'fields' => array('Project.id')));
            if (count($projArr)) {
                $curProjId = $projArr['Project']['id'];
                $case_lists = $this->Easycase->query("SELECT Easycase.*, Project.name FROM easycases as Easycase, projects as Project WHERE Easycase.project_id=Project.id AND Easycase.istype = 1 AND Easycase.title != '' AND Easycase.isactive='1' AND Easycase.project_id!=0 AND Easycase.project_id = '" . $curProjId . "' ORDER BY Easycase.dt_created ASC");
            }

            //$projectIdNew = $case_lists[0]['Easycase']['project_id'];
            //$projName     = str_replace(" ","_",$this->Format->getProjectName($projectIdNew));
            $projName = str_replace(" ", "_", $this->Format->getProjectName($curProjId));
        }
        if ($prj_unq_id == 'all') {
            //$case_lists = $this->Easycase->query("SELECT * FROM easycases as Easycase WHERE Easycase.istype =1 AND Easycase.title !='' AND Easycase.isactive='1' AND Easycase.project_id!=0 AND Easycase.project_id IN (SELECT ProjectUser.project_id FROM project_users AS ProjectUser,projects as Project WHERE ProjectUser.user_id=".SES_ID." AND ProjectUser.project_id=Project.id AND Project.isactive='1' AND Project.company_id='".SES_COMP."') ORDER BY Easycase.dt_created ASC");
            //echo "SELECT Easycase.*, Project.name FROM easycases as Easycase, projects as Project WHERE Easycase.project_id=Project.id AND Easycase.istype =1 AND Easycase.title !='' AND Easycase.isactive='1' AND Easycase.project_id!=0 AND Easycase.project_id IN (SELECT ProjectUser.project_id FROM project_users AS ProjectUser,projects as Project WHERE ProjectUser.user_id=".SES_ID." AND ProjectUser.project_id=Project.id AND Project.isactive='1' AND Project.company_id='".SES_COMP."') ORDER BY Project.name ASC";exit;
            $case_lists = $this->Easycase->query("SELECT Easycase.*, Project.name FROM easycases as Easycase, projects as Project WHERE Easycase.project_id=Project.id AND Easycase.istype =1 AND Easycase.title !='' AND Easycase.isactive='1' AND Easycase.project_id!=0 AND Easycase.project_id IN (SELECT ProjectUser.project_id FROM project_users AS ProjectUser,projects as Project WHERE ProjectUser.user_id=" . SES_ID . " AND ProjectUser.project_id=Project.id AND Project.isactive='1' AND Project.company_id='" . SES_COMP . "') ORDER BY Project.name ASC");
            $projName = 'AllProject';
        }
        $csv_output = "projectName,tasks#,title,status,type,created by,assigned to,created at,lastUpdated\n";

        foreach ($case_lists as $case_list) {
            if ($case_list['Easycase']['legend'] == 1) {
                $status = "New";
            } elseif ($case_list['Easycase']['legend'] == 2) {
                $status = "Opened";
            } elseif ($case_list['Easycase']['legend'] == 3) {
                $status = "Closed";
            } elseif ($case_list['Easycase']['legend'] == 4) {
                $status = "Start";
            } elseif ($case_list['Easycase']['legend'] == 5) {
                $status = "Resolved";
            }

            $createUserId = $case_list['Easycase']['user_id'];
            $assignUserId = $case_list['Easycase']['assign_to'];
            $getCreateUserName = $this->Format->getRequireUserName($createUserId);
            $getAssignUserName = $this->Format->getRequireUserName($assignUserId);

            $typeId = $case_list['Easycase']['type_id'];
            $getTypeName = $this->Format->getRequireTypeName($typeId);

            $projectNameAll = $case_list['Project']['name'];

            $case_no = $case_list['Easycase']['case_no'];
            $title = '"' . str_replace('"', '""', $case_list['Easycase']['title']) . '"';
            $status = $status;
            $type = $getTypeName;
            $createdBy = $getCreateUserName;
            $assignedTo = $getAssignUserName;
            //$created    = date('m-d-Y h:i:s',strtotime($case_list['Easycase']['dt_created']));
            $view = new View($this);
            $tz = $view->loadHelper('Tmzone');
            $updated = $tz->GetDateTime(SES_TIMEZONE, TZ_GMT, TZ_DST, TZ_CODE, $case_list['Easycase']['actual_dt_created'], "datetime");
            $curCreated = $tz->GetDateTime(SES_TIMEZONE, TZ_GMT, TZ_DST, TZ_CODE, GMT_DATETIME, "datetime");
            //$updated = $this->Format->GetDateTime(SES_TIMEZONE,TZ_GMT,TZ_DST,TZ_CODE,$case_list['Easycase']['dt_created'],"datetime");
            //$curCreated = $this->Format->GetDateTime(SES_TIMEZONE,TZ_GMT,TZ_DST,TZ_CODE,GMT_DATETIME,"datetime");
            $created = '"' . str_replace('"', '""', $this->Format->dateFormatOutputdateTime_day_EXPORT($updated, $curCreated)) . '"';

            $updated1 = $tz->GetDateTime(SES_TIMEZONE, TZ_GMT, TZ_DST, TZ_CODE, $case_list['Easycase']['dt_created'], "datetime");
            $curCreated1 = $tz->GetDateTime(SES_TIMEZONE, TZ_GMT, TZ_DST, TZ_CODE, GMT_DATETIME, "datetime");
            //$updated = $this->Format->GetDateTime(SES_TIMEZONE,TZ_GMT,TZ_DST,TZ_CODE,$case_list['Easycase']['dt_created'],"datetime");
            //$curCreated = $this->Format->GetDateTime(SES_TIMEZONE,TZ_GMT,TZ_DST,TZ_CODE,GMT_DATETIME,"datetime");
            $updated = '"' . str_replace('"', '""', $this->Format->dateFormatOutputdateTime_day_EXPORT($updated1, $curCreated1)) . '"';

            $csv_output .= $projectNameAll . "," . $case_no . "," . $title . "," . $status . "," . $type . "," . $createdBy . "," . $assignedTo . "," . $created . "," . $updated . "\n";
        }
        $filename = $projName . "_tasks_all_" . date("m-d-Y_H-i-s", time());

        header("Content-type: application/vnd.ms-excel");
        header("Content-disposition: csv" . date("Y-m-d") . ".csv");
        header("Content-disposition: filename=" . $filename . ".csv");

        print $csv_output;

        exit;
    }

    public function exportcase()
    {
        $this->layout = 'ajax';
        if (isset($this->request->data['check_csv'])) {
            if (isset($this->request->data['check_typ']) && (trim($this->request->data['check_typ']) == 'printcsv')) {
                $str_milestone = $this->request->data['check_csv'];
                $milestone = explode(",", $this->request->data['check_csv']);
                $name = '';
                foreach ($milestone as $key => $val) {
                    $msql = "SELECT title FROM milestones WHERE id='" . $val . "'";
                    $this->Easycase->recursive = -1;
                    $mresult = $this->Easycase->query($msql);
                    $name .= str_replace(" ", "_", str_replace('"', "", str_replace("'", "", $mresult['0']['milestones']['title'])));
                    $name .= "_";
                }
                if (strlen($name) > 25) {
                    $name = substr($name, 0, 24) . "_" . $this->Format->dateFormatReverse(GMT_DATE) . "_milestone~.csv";
                } else {
                    $name .= "_" . $this->Format->dateFormatReverse(GMT_DATE) . "milestone.csv";
                }
                $content = 'Project Name,Milestone Name,Task#,Title,Status,Type,Assigned To';
                $content .= "\n";
                $fp = fopen(CSV_PATH . $name, 'w+');
                foreach ($milestone as $key => $val) {
                    $sql = "SELECT x.projectname,x.milestonename,x.case_no,x.title,x.status,x.type,u.short_name FROM (SELECT b.projectname,b.milestonename,b.case_no,b.title,b.status,t.short_name as type,b.isActive,b.assign_to FROM ( SELECT a.* , p.name as projectname FROM (SELECT c.* , e.case_no , e.type_id, e.priority,e.title , e.message, IF(e.legend=1,'New',IF(e.legend=2,'Wip',IF(e.legend=3,'Closed',IF(e.legend=4,'Started','Resolved')))) AS status ,IF(e.istype=1,'Post','Comment') As isType,e.dt_created,e.isActive,IF(e.assign_to,e.assign_to,e.user_id) AS assign_to  FROM ( SELECT m.title as milestonename , em.easycase_id , em.project_id,em.user_id ,em.milestone_id FROM `milestones` as m , easycase_milestones  as em WHERE m.id = em.milestone_id and em.milestone_id =" . $val . " ) AS c , easycases e WHERE c.easycase_id = e.id AND e.isActive='1') AS a , projects p WHERE a.project_id = p.id) AS b , types as t WHERE b.type_id = t.id ) as x ,users u where x.assign_to = u.id";
                    $this->Easycase->recursive = -1;
                    $result = $this->Easycase->query($sql); //print_r($result);exit;
                    foreach ($result as $k => $v) {
                        if ($k) {
                            $v['x']['projectname'] = '';
                            $v['x']['milestonename'] = '';
                        }
                        $v['x'] = array_replace($v['x'], array('title' => str_replace('"', "", str_replace("'", "", $v['x']['title']))));
                        $content .= '"' . implode('","', $v['x']) . '"';
                        $content .="," . $v['u']['short_name'];
                        $content .= "\n";
                    }
                    $content .= "\n";
                }
                $content .= "\n" . "Export Date," . $this->Format->dateFormatReverse(GMT_DATETIME);
                fwrite($fp, $content);
                fclose($fp);
                header('Content-type: text/csv');
                header('Content-Disposition: attachment; filename=' . $name);
                @//ob_clean();
                flush();
                readfile(CSV_PATH . $name);
                unlink(CSV_PATH . $name);
                exit;
            }
        }
        exit;
    }

    public function ajaxemail($oauth_arg = null)
    {
        $oauth_return = 0;
        if (isset($this->data['type'])) {
            $json_data = $this->data['json_data'];
            if (is_array($json_data)) {
                $data = $json_data;
            } else {
                $data = json_decode($json_data, true);
            }
            $data['emailbody'] = $_SESSION['email']['email_body'];
            $data['msg'] = $_SESSION['email']['msg'];
            unset($_SESSION['email']);

            if (strstr($data['caseid_list'], ',') || trim($data['caseid_list'], ',')) {
                $commonArrId = explode(',', $data['caseid_list']);
                $CaseUserEmail = ClassRegistry::init('CaseUserEmail');
                foreach ($commonArrId as $commonCaseId) {
                    if (trim($commonCaseId)) {
                        $caseDataArr = $this->Easycase->find('first', array('conditions' => array('Easycase.id' => $commonCaseId), 'fields' => array('Easycase.id', 'Easycase.case_no', 'Easycase.project_id', 'Easycase.type_id', 'Easycase.priority', 'Easycase.title', 'Easycase.uniq_id', 'Easycase.assign_to', 'Easycase.client_status')));
                        $caseStsId = $caseDataArr['Easycase']['id'];
                        $data['caseNo'] = $caseDataArr['Easycase']['case_no'];
                        $data['projId'] = $caseDataArr['Easycase']['project_id'];
                        $data['caseTypeId'] = $caseDataArr['Easycase']['type_id'];
                        $data['casePriority'] = $caseDataArr['Easycase']['priority'];
                        //$data['emailTitle'] = $caseDataArr['Easycase']['title'];
                        //$data['emailTitle'] = htmlentities($this->Format->convert_ascii($caseDataArr['Easycase']['title']), ENT_QUOTES,'UTF-8');
                        $data['emailTitle'] = $caseDataArr['Easycase']['title'];

                        $data['caseUniqId'] = $closeStsUniqId = $caseDataArr['Easycase']['uniq_id'];
                        $data['caUid'] = $caseDataArr['Easycase']['assign_to'];
                        $data['is_client'] = $caseDataArr['Easycase']['client_status'];
                        //Added by Sunil
                        if ($data['csType'] == "Change Assignto" && $caseDataArr['Easycase']['assign_to']) {
                            $emailUsers = array($caseDataArr['Easycase']['assign_to']);
                        } else {
                            $emailUsers = $CaseUserEmail->getEmailUsers($commonCaseId);
                        }
                        //    echo "<pre>";print_r($emailUsers);exit;
                        $getEmailUser = $this->getAllExistingNotifyUser($data['projId'], $emailUsers);
                        $this->Postcase->mailToUser($data, $getEmailUser);
                        //End
                    }
                }
            }
        } else {
            if (isset($oauth_arg) && !empty($oauth_arg)) {
                $data = $oauth_arg;
                $oauth_return = 1;
            } else {
                $data = $this->data;
            }
            if ($data['caseIstype'] == 1) {
                //$getEmailUser = $this->ProjectUser->getAllNotifyUser($data['projId'],$data['emailUser'], 'new');
                $getEmailUser = $this->getAllExistingNotifyUser($data['projId'], $data['emailUser'], 'new');
            } else {
                //$getEmailUser = $this->ProjectUser->getAllNotifyUser($data['projId'], $data['emailUser'], 'reply');
                $getEmailUser = $this->getAllExistingNotifyUser($data['projId'], $data['emailUser'], 'reply');
            }
            if ($getEmailUser) {
                $this->Postcase->mailToUser($data, $getEmailUser);
            }

            if (intval($oauth_return)) {
                $ret = array('success' => "success");
                return json_encode($ret);
            }
        }
        echo 1;
        exit;
    }

    public function getAllExistingNotifyUser($project_id = null, $emailUser = array(), $type = 'case_status')
    {
        if (isset($project_id) && isset($type)) {
            $this->ProjectUser->recursive = -1;
            $fld = $type;
            $temp_var = '';
            if ($type == 'new' || $type == 'reply') {
                $fld = $type . "_case";
            }
            if ($type == 'new') {
                $temp_var = ', UserNotification.case_status';
            }
            $users = $this->ProjectUser->query("SELECT DISTINCT User.id, User.name, User.email,CompanyUser.is_client, UserNotification.{$fld}" . $temp_var . "  FROM users AS User, project_users AS ProjectUser, user_notifications AS UserNotification, company_users as CompanyUser WHERE User.id=ProjectUser.user_id AND User.id=UserNotification.user_id AND User.id=CompanyUser.user_id AND User.isactive='1' AND CompanyUser.is_active='1' AND CompanyUser.company_id=" . SES_COMP . " AND ProjectUser.project_id='" . $project_id . "' AND ProjectUser.company_id = '" . SES_COMP . "' AND ProjectUser.default_email='1'");
            $usrDtls = array();
            foreach ($users as $key => $value) {
                if ((($value['UserNotification'][$fld] == 1) && (in_array($value['User']['id'], $emailUser))) || ($type == 'new' && $value['UserNotification']['case_status'] == 1 && $value['UserNotification']['new_case'] != 1)) {
                    $value['User']['is_client'] = $value['CompanyUser']['is_client'];
                    if ($type == 'new' && $value['UserNotification']['case_status'] == 1 && $value['UserNotification']['new_case'] != 1) {
                        $value['User']['is_new'] = 1;
                    }
                    $usrDtls[]['User'] = $value['User'];
                }
            }
            return $usrDtls;
        }
    }

    public function ajax_common_breadcrumb()
    {
        $arr = array();
        $this->layout = 'ajax';
        $case_status = "all";
        $case_types = "all";
        $pri_fil = "all";
        $case_member = "all";
        $case_assignto = "all";
        $val = 0;
        $this->LoadModel("SearchFilter");
        $record = $this->SearchFilter->find('first', array('conditions' => array('SearchFilter.user_id' => SES_ID, 'SearchFilter.company_id' => SES_COMP, 'SearchFilter.name' => 'default')));
        $json_array = json_decode($record['SearchFilter']['json_array']);
        $json_arr = array();
        //For Case Status
        if (isset($this->params->data['caseStatus']) && $this->params->data['caseStatus']) {
            $case_status = $this->params->data['caseStatus'];
        } elseif (isset($json_array->STATUS)) {
            $case_status = $json_array->STATUS;
        } elseif ($_COOKIE['STATUS']) {
            $case_status = $_COOKIE['STATUS'];
        }
        $json_arr['STATUS'] = $this->params->data['caseStatus']; //set the array and save in database.
        if ($case_status && $case_status != "all") {
            $case_status = strrev($case_status);
            if (strstr($case_status, "-")) {
                $expst = explode("-", $case_status);
                foreach ($expst as $st) {
                    //$status.= $this->Format->displayStatus($st).", ";
                    $status .= "<span title='Task Status' onclick='openfilter_popup(1,\"dropdown_menu_all_filters\");allfiltervalue(\"status\");'>" . $this->Format->displayStatus($st) . "<a href='javascript:void(0);' onclick='common_reset_filter(\"taskstatus\",\"" . strrev($st) . "\",this);' class='fr'><i class='material-icons'>&#xE14C;</i></a></span>"; //$this->Format->displayStatus($st).", ";
                }
            } else {
                $status = "<span title='Task Status' onclick='openfilter_popup(1,\"dropdown_menu_all_filters\");allfiltervalue(\"status\");'>" . $this->Format->displayStatus($case_status) . "<a href='javascript:void(0);' onclick='common_reset_filter(\"taskstatus\",\"" . $case_status . "\",this);' class='fr'><i class='material-icons'>&#xE14C;</i></a></span>"; //$this->Format->displayStatus($case_status).", ";
            }
            $arr['case_status'] = trim($status, ', ');
            if ($json_arr['STATUS'] && $json_arr['STATUS'] != "all") {
                $val = 1;
            }
        } else {
            $arr['case_status'] = 'All';
        }

        if (isset($this->params->data['caseCustomStatus']) && $this->params->data['caseCustomStatus']) {
            $case_cstmstatus = $this->params->data['caseCustomStatus'];
        } elseif (isset($json_array->CUSTOM_STATUS)) {
            $case_cstmstatus = $json_array->CUSTOM_STATUS;
        } elseif ($_COOKIE['CUSTOM_STATUS']) {
            $case_cstmstatus = $_COOKIE['CUSTOM_STATUS'];
        }
        //For case types
        if (isset($this->params->data['caseTypes']) && $this->params->data['caseTypes']) {
            $case_types = $this->params->data['caseTypes'];
        } elseif (isset($json_array->CS_TYPES)) {
            $case_types = $json_array->CS_TYPES;
        } elseif ($_COOKIE['CS_TYPES']) {
            $case_types = $_COOKIE['CS_TYPES'];
        }
        $json_arr['CS_TYPES'] = $this->params->data['caseTypes']; //set case type
        $types = '';
        if ($case_types && $case_types != "all") {
            //$case_types = strrev($case_types);

            $view = new View($this);
            $cq = $view->loadHelper('Casequery');

            if (strstr($case_types, "-")) {
                $expst3 = explode("-", $case_types);
                foreach ($expst3 as $st3) {
                    $csTypArr = $cq->getTypeArr($st3, $GLOBALS['TYPE']);
                    $types.= "<span class='filter_opn' rel='tooltip' title='Task Type' onclick='openfilter_popup(1,\"dropdown_menu_all_filters\");allfiltervalue(\"types\");'>" . $csTypArr['Type']['short_name'] . "<a href='javascript:void(0);' onclick='common_reset_filter(\"tasktype\",\"" . $st3 . "\",this);' class='fr'><i class='material-icons'>&#xE14C;</i></a></span>"; //$this->Format->caseBcTypes($st3).", ";
                }
                $types = trim($types, ', ');
            } else {
                $csTypArr = $cq->getTypeArr($case_types, $GLOBALS['TYPE']);
                $types = "<span class='filter_opn' rel='tooltip' title='Task Type' onclick='openfilter_popup(1,\"dropdown_menu_all_filters\");allfiltervalue(\"types\");'>" . $csTypArr['Type']['short_name'] . "<a href='javascript:void(0);' onclick='common_reset_filter(\"tasktype\",\"" . $case_types . "\",this);' class='fr'><i class='material-icons'>&#xE14C;</i></a></span>"; //$this->Format->caseBcTypes($case_types);
            }
            $arr['case_types'] = $types;
            if ($json_arr['CS_TYPES'] && $json_arr['CS_TYPES'] != "all") {
                $val = 1;
            }
        } else {
            $arr['case_types'] = 'All';
        }

        //For Priority
        if (isset($this->params->data['priFil']) && $this->params->data['priFil']) {
            $pri_fil = $this->params->data['priFil'];
        } elseif (isset($json_array->PRIORITY)) {
            $pri_fil = $json_array->PRIORITY;
        } elseif ($_COOKIE['PRIORITY']) {
            $pri_fil = $_COOKIE['PRIORITY'];
        }
        $json_arr['PRIORITY'] = $this->params->data['priFil']; //set Priority
        if ($pri_fil && $pri_fil != "all") {
            if (strstr($pri_fil, "-")) {
                $expst2 = explode("-", $pri_fil);
                foreach ($expst2 as $st2) {
                    $pri .= "<span class='filter_opn' rel='tooltip' title='Priority' onclick='openfilter_popup(1,\"dropdown_menu_all_filters\");allfiltervalue(\"priority\");'>" . $st2 . "<a href='javascript:void(0);' onclick='common_reset_filter(\"priority\",\"" . $st2 . "\",this);' class='fr'><i class='material-icons'>&#xE14C;</i></a></span>";
                }
            } else {
                $pri = "<span class='filter_opn' rel='tooltip' title='Priority' onclick='openfilter_popup(1,\"dropdown_menu_all_filters\");allfiltervalue(\"priority\");'>" . $pri_fil . "<a href='javascript:void(0);' onclick='common_reset_filter(\"priority\",\"" . $pri_fil . "\",this);' class='fr'><i class='material-icons'>&#xE14C;</i></a></span>";
            }
            $arr['pri'] = $pri;
            if ($json_arr['PRIORITY'] && $json_arr['PRIORITY'] != "all") {
                $val = 1;
            }
        } else {
            $arr['pri'] = 'All';
        }

        //For Case Members
        if (isset($this->params->data['caseMember']) && $this->params->data['caseMember']) {
            $case_member = $this->params->data['caseMember'];
        } elseif (isset($json_array->MEMBERS)) {
            $case_member = $json_array->MEMBERS;
        } elseif ($_COOKIE['MEMBERS']) {
            $case_member = $_COOKIE['MEMBERS'];
        }
        $json_arr['MEMBERS'] = $this->params->data['caseMember']; //set Members
        if ($case_member && $case_member != "all") {
            if (strstr($case_member, "-")) {
                $expst4 = explode("-", $case_member);
                $cbymems = $this->Format->caseMemsList($expst4);
                foreach ($cbymems as $key => $st4) {
                    $mems .= "<span class='filter_opn' rel='tooltip' title='Created By " . $this->Format->caseMemsName($key) . "' onclick='openfilter_popup(1,\"dropdown_menu_all_filters\");allfiltervalue(\"users\");'>" . $st4 . "<a href='javascript:void(0);' onclick='common_reset_filter(\"members\",\"" . $key . "\",this);'  class='fr'><i class='material-icons'>&#xE14C;</i></a></span>";
                }
            } else {
                $mems = "<span class='filter_opn' rel='tooltip' title='Created By " . $this->Format->caseMemsName($case_member) . "' onclick='openfilter_popup(1,\"dropdown_menu_all_filters\");allfiltervalue(\"users\");'>" . $this->Format->caseMemsList($case_member) . "<a href='javascript:void(0);' onclick='common_reset_filter(\"members\",\"" . $case_member . "\",this);' class='fr'><i class='material-icons'>&#xE14C;</i></a></span>";
            }
            $arr['case_member'] = $mems;
            if ($json_arr['MEMBERS'] && $json_arr['MEMBERS'] != "all") {
                $val = 1;
            }
        } else {
            $arr['case_member'] = 'All';
        }
        //For AssignTo
        if (isset($this->params->data['caseAssignTo']) && $this->params->data['caseAssignTo']) {
            $case_assignto = $this->params->data['caseAssignTo'];
        } elseif (isset($json_array->ASSIGNTO)) {
            $case_assignto = $json_array->ASSIGNTO;
        } elseif ($_COOKIE['ASSIGNTO']) {
            $case_assignto = $_COOKIE['ASSIGNTO'];
        }
        $json_arr['ASSIGNTO'] = $this->params->data['caseAssignTo']; //Set Assign to
        if ($case_assignto && $case_assignto != "all" && $case_assignto != "unassigned") {
            if (strstr($case_assignto, "-")) {
                $expst5 = explode("-", $case_assignto);
                $asmembers = $this->Format->caseMemsList($expst5);
                foreach ($asmembers as $key => $st5) {
                    $asns .= "<span class='filter_opn' rel='tooltip' title='Assign To: " . $this->Format->caseMemsName($key) . "' onclick='openfilter_popup(1,\"dropdown_menu_all_filters\");allfiltervalue(\"assignto\");'>" . $st5 . "<a href='javascript:void(0);' onclick='common_reset_filter(\"assignto\",\"" . $key . "\",this);' class='fr'><i class='material-icons'>&#xE14C;</i></a></span>";
                }
            } else {
                $asns = "<span class='filter_opn' rel='tooltip' title='Assign To: " . $this->Format->caseMemsName($case_assignto) . "' onclick='openfilter_popup(1,\"dropdown_menu_all_filters\");allfiltervalue(\"assignto\");'>" . $this->Format->caseMemsList($case_assignto) . "<a href='javascript:void(0);' onclick='common_reset_filter(\"assignto\",\"" . $case_assignto . "\",this);' class='fr'><i class='material-icons'>&#xE14C;</i></a></span>";
            }
            $arr['case_assignto'] = $asns;
            if ($json_arr['ASSIGNTO'] && $json_arr['ASSIGNTO'] != "all" && $json_arr['ASSIGNTO'] != "unassigned") {
                $val = 1;
            }
        } elseif ($case_assignto && $case_assignto == "unassigned") {
            $asns = "<span class='filter_opn' rel='tooltip' title='Assign To: Nobody' onclick='openfilter_popup(1,\"dropdown_menu_all_filters\");allfiltervalue(\"assignto\");'>Unassigned<a href='javascript:void(0);' onclick='common_reset_filter(\"assignto\",\"" . $case_assignto . "\",this);' class='fr'><i class='material-icons'>&#xE14C;</i></a></span>";
            $arr['case_assignto'] = $asns;
            $val = 1;
        } else {
            $arr['case_assignto'] = 'All';
        }
        //For Case Date Status ....
        if (isset($this->params->data['casedate']) && $this->params->data['casedate']) {
            $date = $this->params->data['casedate'];
        } elseif (isset($json_array->DATE)) {
            $date = $json_array->DATE;
        } else {
            if (isset($this->params->data['resetall']) && $this->params->data['resetall'] == 0) {
                $date = "";
            } else {
                $date = $this->Cookie->read('DATE');
            }
        }
        $json_arr['DATE'] = $this->params->data['casedate']; //set $date
        if (!empty($date) && ($date != 'any')) {
            if ($json_arr['DATE'] && $json_arr['DATE'] != "any") {
                $val = 1;
            }
            if (trim($date) == 'one') {
                $arr['date'] = "<span class='filter_opn' rel='tooltip' title='Time' onclick='openfilter_popup(1,\"dropdown_menu_all_filters\");allfiltervalue(\"date\");'>Past hour<a href='javascript:void(0);' onclick='common_reset_filter(\"date\",\"\",this);' class='fr'><i class='material-icons'>&#xE14C;</i></a></span>";
            } elseif (trim($date) == '24') {
                $arr['date'] = "<span class='filter_opn' rel='tooltip' title='Time' onclick='openfilter_popup(1,\"dropdown_menu_all_filters\");allfiltervalue(\"date\");'>Past 24Hour<a href='javascript:void(0);' onclick='common_reset_filter(\"date\",\"\",this);' class='fr'><i class='material-icons'>&#xE14C;</i></a></span>";
            } elseif (trim($date) == 'week') {
                $arr['date'] = "<span class='filter_opn' rel='tooltip' title='Time' onclick='openfilter_popup(1,\"dropdown_menu_all_filters\");allfiltervalue(\"date\");');'>Past Week<a href='javascript:void(0);'  onclick='common_reset_filter(\"date\",\"\",this);' class='fr'><i class='material-icons'>&#xE14C;</i></a></span>";
            } elseif (trim($date) == 'month') {
                $arr['date'] = "<span class='filter_opn' rel='tooltip' title='Time' onclick='openfilter_popup(1,\"dropdown_menu_all_filters\");allfiltervalue(\"date\");'>Past month<a href='javascript:void(0);' onclick='common_reset_filter(\"date\",\"\",this);' class='fr'><i class='material-icons'>&#xE14C;</i></a></span>";
            } elseif (trim($date) == 'year') {
                $arr['date'] = "<span class='filter_opn' rel='tooltip' title='Time' onclick='openfilter_popup(1,\"dropdown_menu_all_filters\");allfiltervalue(\"date\");'>Past Year<a href='javascript:void(0);' onclick='common_reset_filter(\"date\",\"\",this);' class='fr'><i class='material-icons'>&#xE14C;</i></a></span>";
            } elseif (strstr(trim(urldecode($date)), ":")) {
                $arr['date'] = "<span class='filter_opn' rel='tooltip' title='Time' onclick='openfilter_popup(1,\"dropdown_menu_all_filters\");allfiltervalue(\"date\");'>" . str_replace(":", " - ", urldecode($date)) . "<a href='javascript:void(0);' onclick='common_reset_filter(\"date\",\"\",this);' class='fr'><i class='material-icons'>&#xE14C;</i></a></span>"; // str_replace(":"," - ",$date);
            }
        } else {
            $arr['date'] = "Any Time";
        }
        if (isset($this->params->data['caseduedate']) && $this->params->data['caseduedate']) {
            $duedate = $this->params->data['caseduedate'];
        } elseif (isset($json_array->DUE_DATE)) {
            $duedate = $json_array->DUE_DATE;
        } else {
            if (isset($this->params->data['resetall']) && $this->params->data['resetall'] == 0) {
                $duedate = "";
            } else {
                $duedate = $json_array->DUE_DATE;
            }
        }
        $json_arr['DUE_DATE'] = $this->params->data['caseduedate']; //set Due date
        if (!empty($duedate)) {
            if ($json_arr['DUE_DATE'] && $json_arr['DUE_DATE'] != "any") {
                $val = 1;
            }
            if (trim($duedate) == 'overdue') {
                $arr['duedate'] = "<span class='filter_opn' rel='tooltip' title='Due Date' onclick='openfilter_popup(1,\"dropdown_menu_all_filters\");allfiltervalue(\"duedate\");'>Overdue<a href='javascript:void(0);' onclick='common_reset_filter(\"duedate\",\"\",this);' class='fr'><i class='material-icons'>&#xE14C;</i></a></span>";
            } elseif (trim($duedate) == '24') {
                $arr['duedate'] = "<span class='filter_opn' rel='tooltip' title='Due Date' onclick='openfilter_popup(1,\"dropdown_menu_all_filters\");allfiltervalue(\"duedate\");'>Today<a href='javascript:void(0);' onclick='common_reset_filter(\"duedate\",\"\",this);' class='fr'><i class='material-icons'>&#xE14C;</i></a></span>";
            } elseif (strstr(trim(urldecode($duedate)), ":")) {
                $arr['duedate'] = "<span class='filter_opn' rel='tooltip' title='Due Date' onclick='openfilter_popup(1,\"dropdown_menu_all_filters\");allfiltervalue(\"duedate\");'>" . str_replace(":", " - ", urldecode($duedate)) . "<a href='javascript:void(0);' onclick='common_reset_filter(\"duedate\",\"\",this);' class='fr'><i class='material-icons'>&#xE14C;</i></a></span>"; // str_replace(":"," - ",$date);
            }
        } else {
            $arr['duedate'] = "Any Time";
        }
        // Case page
        if (isset($this->params->data['casePage']) && $this->params->data['casePage']) {
            $case_page = $this->params->data['casePage'];
        } elseif ($this->Cookie->read('PAGE')) {
            $case_page = $this->Cookie->read('PAGE');
        }
        // Case Search value
        if (isset($this->params->data['caseSearch']) && $this->params->data['caseSearch'] != "") {
            $case_search = trim(urldecode(htmlentities(strip_tags($this->params->data['caseSearch']))));
        } elseif ($_COOKIE['SEARCH']) {
            $case_search = trim(urldecode(htmlentities(strip_tags($_COOKIE['SEARCH']))));
        }
        if (isset($this->params->data['resetall'])) {
            $resetall = $this->params->data['resetall'];
        }
        if (isset($this->params->data['clearCaseSearch']) && $this->params->data['clearCaseSearch']) {
            $case_search = "";
        }
        if (isset($case_search) && $case_search) {
            $arr['case_search'] = "<span title='Search'>" . $case_search . "<a href='javascript:void(0);' onclick='common_reset_filter(\"search\",\"\",this);' class='fr'><i class='material-icons'>&#xE14C;</i></a></span>";
            $arr['search_case'] = $case_search;
            $val = 1;
        }
        if (isset($case_page) && $case_page && $case_page != 1 && $resetall == 0) {
            $arr['case_page'] = "<span class='filter_opn' rel='tooltip' title='Pagination'>Page: " . $case_page . "<a href='javascript:void(0);' onclick='common_reset_filter(\"casepage\",\"\",this);' class='fr'><i class='material-icons'>&#xE14C;</i></a></span>";
            $arr['page_case'] = $case_page;
            $val = 1;
        }

        $arr['mlstn'] = "All";
        // Task Sort order tagging
        if (isset($_COOKIE['TASKSORTBY']) && $_COOKIE['TASKSORTBY'] != "") {
            $tsortby = $_COOKIE['TASKSORTBY'];
            $tsortorder = $_COOKIE['TASKSORTORDER'];
            if ($_COOKIE['TASKSORTBY'] == 'caseno') {
                $tsortby = 'Task#';
            } elseif ($_COOKIE['TASKSORTBY'] == 'caseAt') {
                $tsortby = 'Assigned to';
            } elseif ($_COOKIE['TASKSORTBY'] == 'duedate') {
                $tsortby = 'Due Date';
            } else {
                $tsortby = ucfirst($tsortby);
            }
            if ($tsortorder == 'DESC') {
                $sorticon = 'tsk_desc_icon';
            } else {
                $sorticon = 'tsk_asc_icon';
            }
            //$arr['tasksortby'] = "<div class='filter_opn' rel='tooltip' title='Sort by ".$tsortby.": ".$tsortorder."' onclick='openfilter_popup(1,\"dropdown_menu_sortby_filters\");'><span class='fl'>".$tsortby."</span><i class='fl ".$sorticon."'></i><a href='javascript:void(0);' onclick='common_reset_filter(\"taskorder\",\"\",this);' class='fr'>X</a></div>";
            $arr['tasksortby'] = "<span class='filter_opn' rel='tooltip' style='position:relative;' title='Sort by " . $tsortby . ": " . $tsortorder . "' onclick='openfilter_popup(1,\"dropdown_menu_sortby_filters\");'>" . $tsortby . "<a href='javascript:void(0);' onclick='common_reset_filter(\"taskorder\",\"\",this);' class='fr'><i class='material-icons'>&#xE14C;</i></a></span>";
            $val = 1;
        }
        // Task Group by Tagging
        if (isset($_COOKIE['TASKGROUPBY']) && $_COOKIE['TASKGROUPBY'] != "") {
            $groupby = $_COOKIE['TASKGROUPBY'];
            if ($groupby == 'crtdate') {
                $gby = "Created Date";
            } elseif ($groupby == 'duedate') {
                $gby = 'Due Date';
            } elseif ($groupby == 'assignto') {
                $gby = 'Assigned to';
            } else {
                $gby = ucfirst($groupby);
            }
            if (strtolower($gby) != 'milestone') {
                $arr['taskgroupby'] = "<span class='filter_opn' rel='tooltip' title='Group by' onclick='openfilter_popup(1,\"dropdown_menu_groupby_filters\");'>" . $gby . "<a href='javascript:void(0);' onclick='common_reset_filter(\"taskgroupby\",\"\",this);' class='fr'><i class='material-icons'>&#xE14C;</i></a></span>";
                $val = 1;
            }
        }

        //if($this->params->data['caseMenuFilters'] == 'milestone') {
        if (isset($this->params->data['milestoneIds']) && $this->params->data['milestoneIds']) {
            $milestoneIds = $this->params->data['milestoneIds'];
        } elseif ($this->Cookie->read('MILESTONES')) {
            $milestoneIds = $this->Cookie->read('MILESTONES');
        }
        if (stristr($milestoneIds, "-")) {
            $cookies = trim(trim($milestoneIds, "-"));
            if ($cookies) {
                $ids = explode("-", $cookies);
                $mlsArr = $this->Milestone->find('first', array('conditions' => array('Milestone.id' => $ids, 'Milestone.isactive' => 1), 'fields' => array('Milestone.title')));
                $titl = ucfirst(trim($mlsArr['Milestone']['title']));
                if (strlen($titl) > 5) {
                    $titl = substr($titl, 0, 5) . "...";
                }
                $arr['mlstn'] = "<span class='filter_opn' rel='tooltip' title='Task Group'>" . $titl . "<a href='javascript:void(0);' onclick='common_reset_filter(\"mlstn\",\"\",this);' class='fr'><i class='material-icons'>&#xE14C;</i></a></span>";
                $val = 1;
            }
        }
        if ((isset($_COOKIE['TASKGROUP_FIL']) && trim($_COOKIE['TASKGROUP_FIL']) != 'all')) {
            if (trim($_COOKIE['TASKGROUP_FIL']) != 'all' && trim($_COOKIE['TASKGROUP_FIL']) != '') {
                $text = $_COOKIE['TASKGROUP_FIL'];
            }
            $arr['tskgrp'] = "<span class='filter_opn' rel='tooltip' title='" . ucfirst($text) . " Task Group'>" . ucfirst($text) . "<a href='javascript:void(0);' data-tgid='" . trim($text) . "' id='cls_task_grp' onclick='common_reset_filter(\"tskgrp\",\"\",this);' class='fr'><i class='material-icons'>&#xE14C;</i></a></span>";
            $val = 1;
        }
        //}
        #pr($json_arr);
        if ($record['SearchFilter']['id'] != '') {
            $data['SearchFilter']['id'] = $record['SearchFilter']['id'];
            $data['SearchFilter']['first_records'] = $record['SearchFilter']['first_records'];
        }
        $data['SearchFilter']['user_id'] = SES_ID;
        $data['SearchFilter']['name'] = 'default';
        $data['SearchFilter']['json_array'] = json_encode($json_arr);
        $data['SearchFilter']['company_id'] = SES_COMP;
        $this->SearchFilter->save($data);
        $arr['val'] = $val;
        echo json_encode($arr);
        exit;
    }

    // Jyoti start
    public function milestone_archive()
    {
        $this->layout = 'ajax';
        $milestoneid = $this->params->data['mid'];
        $milestone_title = $this->params->data['title1'];
        //echo $milestoneid;
        if ($milestoneid) {
            $this->Milestone->query("UPDATE milestones SET isactive=0 where id='" . $milestoneid . "'");
        }
        echo "Success";
        exit;
    }

    ## UPDATING THE SORTING ORDER FOR MILESTONE ########

    public function sort_event()
    {
        $this->layout = 'ajax';
        $this->loadmodel('EasycaseMilestone');
        $data = $this->params->query;
        $data = $data['sort'];
        foreach ($data as $key => $val) {
            $this->EasycaseMilestone->query('UPDATE easycase_milestones SET id_seq = ' . ($key + 1) . " WHERE easycase_id=" . $val);
        }
        echo 1;
        exit;
    }

    ##### EDIT THE REPLY TEXT ####################

    public function edit_reply()
    {
        $this->layout = 'ajax';
        $case_id = $this->data['id'];
        $this->set('proj_id', $this->data['projid']);
        $this->loadmodel('Easycase');
        $this->Easycase->recursive = -1;
        $rec = $this->Easycase->query('SELECT * FROM easycases WHERE id=' . $case_id . " LIMIT 1");
        //$this->set('reply_flag',isset($this->data['reply_flag'])?1:0);
        $this->set('reply_flag', 1);
        $this->set('case_info', $rec['0']);
    }

    #### EDITED TEXT OF REPLY ARE SAVED ###########

    public function save_editedvalue()
    {
        $this->layout = 'ajax';
        $caseno = $this->data['caseno'];
        $this->loadmodel('Easycase');
        $this->loadmodel('EasycaseMention');
        $thisCase = $this->Easycase->findById($this->data['id']);

        $canEdit = 0;
        if ((SES_TYPE == 1 || SES_TYPE == 2 || SES_TYPE == 3 || ($thisCase['Easycase']['legend'] == 1 && SES_ID == $thisCase['Easycase']['user_id'])) && $thisCase['Easycase']['message']) {
            $canEdit = 1;
        }

        if ($canEdit && trim($this->data['message'])) {
            $imgExtret = $this->getImageFromComment($this->data['message'], $thisCase['Easycase']['project_id'], $thisCase['Easycase']['id'], $thisCase['Easycase']['message']);
            $this->request->data['message'] = $imgExtret['comment'];
            $Easycases['id'] = $this->data['id'];
            $Easycases['message'] = $this->removepandaddbr($this->data['message']);
            $Easycases['updated_by'] = SES_ID;
            $Easycases['dt_created'] = GMT_DATETIME;
            if ($this->Easycase->save($Easycases)) {
                if (isset($imgExtret['is_paste_image']) && !empty($imgExtret['is_paste_image'])) {
                    $CaseEditorFile = ClassRegistry::init('CaseEditorFile');
                    $CaseEditorFile->recursive = -1;
                    $CaseEditorFile->updateAll(array('CaseEditorFile.is_deleted' => 2), array('CaseEditorFile.uniq_id' => $imgExtret['uid'], 'CaseEditorFile.company_id' => SES_COMP, 'CaseEditorFile.is_deleted' => 0));
                }
                $this->Easycase->query("UPDATE easycases SET updated_by='" . SES_ID . "', dt_created='" . GMT_DATETIME . "'  WHERE case_no='" . $caseno . "' AND istype=1 AND project_id=" . $this->data['proj_id']);
                $mention_array = array();
                if ($this->data['mention_array']['mention_type_id'] && $this->data['mention_array']['mention_type']) {
                    $mention_array = $this->data['mention_array'];
                }
                $esycs_dtl = $this->Easycase->find('first', array("conditions"=>array("Easycase.case_no"=>$caseno,"Easycase.istype"=>1,"Easycase.project_id"=>$this->data['proj_id'])));
                if (!empty($mention_array)) {
                    if (!empty($mention_array['mention_type_id']) && !empty($mention_array['mention_type'])) {
                        $mtask_id = $esycs_dtl["Easycase"]["id"];

                        $mcomment_id = $this->data['id'];
                        $is_save_mention = 0;
                        
                        if (!empty($mention_array['mention_type_id'])) {
                            $easycaseMentionList = $this->EasycaseMention->find('list', array('conditions'=>array('easycase_id'=>$mtask_id,'comment_id'=>$mcomment_id),'fields'=>array('id','mention_type_id')));
                            foreach ($easycaseMentionList as $kmm =>$vmm) {
                                foreach ($mention_array['mention_type_id'] as $kmt =>$vmt) {
                                    if ($vmn == $vmt) {
                                        $is_save_mention = 1;
                                    } else {
                                        $is_save_mention = 0;
                                        $Mcondition = array('EasycaseMention.easycase_id' => $mtask_id, 'EasycaseMention.comment_id' => $mcomment_id,'EasycaseMention.project_id' => $this->data['proj_id']);
                                        $this->EasycaseMention->deleteAll($Mcondition);
                                    }
                                }
                            }
                        } else {
                            $Mconditions = array('EasycaseMention.easycase_id' => $mtask_id, 'EasycaseMention.comment_id' => $mcomment_id,'EasycaseMention.project_id' => $this->data['proj_id']);
                            $this->EasycaseMention->deleteAll($Mconditions);
                            // $easycaseMentionList = $EasycaseMention->find('list',array('conditions'=>array('easycase_id'=>$mtask_id,'comment_id'=>0),'fields'=>array('id')));
                        }
                        if ($is_save_mention == 0) {
                            foreach ($mention_array['mention_type_id'] as $mk=>$mv) {
                                $marray = array();
                                $marray['EasycaseMention']['company_id'] = SES_COMP;
                                $marray['EasycaseMention']['project_id'] = $this->data['proj_id'];
                                $marray['EasycaseMention']['mention_type_id'] = $mv;
                                $marray['EasycaseMention']['mention_type'] = $mention_array['mention_type'][$mk] == "task" ? 2: 1 ;
                                $marray['EasycaseMention']['easycase_id'] = $mtask_id;
                                $marray['EasycaseMention']['comment_id'] = $mcomment_id;
                                $marray['EasycaseMention']['mention_message'] = $this->data['message'];
                                $marray['EasycaseMention']['created'] = GMT_DATETIME;
                                $marray['EasycaseMention']['mention_by'] = SES_ID;
                                $this->EasycaseMention->saveAll($marray);
                            }
                        }
                    }
                }
                $arr["message"] ="success";
                $arr["projId"] = $esycs_dtl["Easycase"]["project_id"];
                $arr["caseNo"] = $esycs_dtl["Easycase"]["case_no"];
                $arr["emailTitle"] = $esycs_dtl["Easycase"]["title"];
                $arr["emailMsg"] = $this->data['message'];
                $arr["casePriority"] =$esycs_dtl["Easycase"]["priority"];
                $arr["caseTypeId"] = $esycs_dtl["Easycase"]["type_id"];
                $arr["msg"] ="";
                $arr["emailbody"] = "";
                $arr["caseIstype"] = $esycs_dtl["Easycase"]["istype"];
                $arr["caUid"] =$esycs_dtl["Easycase"]["assign_to"];
                $arr["caseid"] =$esycs_dtl["Easycase"]["id"];
                $arr["caseUniqId"] =$esycs_dtl["Easycase"]["uniq_id"];
                $arr["mention_array"] =$mention_array;
                echo json_encode($arr);
                exit;
            } else {
                $arr["message"] ="fail";
                echo json_encode($arr);
                exit;
            }
        } else {
            $arr["message"] ="fail";
            echo json_encode($arr);
            exit;
        }
    }

    #### SAVE FILTER ###########

    public function ajax_save_filter()
    {
        $this->layout = 'ajax';
        //For Case Status
        if (isset($this->params->data['caseStatus']) && $this->params->data['caseStatus']) {
            $case_status = $this->params->data['caseStatus'];
        } elseif ($_COOKIE['STATUS']) {
            $case_status = $_COOKIE['STATUS'];
        }

        if ($case_status && $case_status != "all") {
            //$case_status = strrev($case_status);
            if (strstr($case_status, "-")) {
                $expst = explode("-", $case_status);
                foreach ($expst as $st) {
                    $status.= $this->Format->displayStatus($st) . ", ";
                }
            } else {
                $status = $this->Format->displayStatus($case_status) . ", ";
            }
            $arr['case_status'] = trim($status, ', ');
        //$val =1;
        } else {
            $arr['case_status'] = 'All';
        }
        //For Case Status
        if (isset($this->params->data['caseCustomStatus']) && $this->params->data['caseCustomStatus']) {
            $case_custom_status = $this->params->data['caseCustomStatus'];
        } elseif ($_COOKIE['CUSTOM_STATUS']) {
            $case_custom_status = $_COOKIE['CUSTOM_STATUS'];
        }
        if ($case_custom_status && $case_custom_status != "all") {
            //$case_status = strrev($case_status);
            if (strstr($case_custom_status, "-")) {
                $expst = explode("-", $case_custom_status);
                foreach ($expst as $st) {
                    $status.= $this->Format->displayCustomStatus($st) . ", ";
                }
            } else {
                $status = $this->Format->displayCustomStatus($case_status) . ", ";
            }
            $arr['case_custom_status'] = trim($status, ', ');
        //$val =1;
        } else {
            $arr['case_custom_status'] = 'All';
        }

        //For case types
        if (isset($this->params->data['caseType']) && $this->params->data['caseType']) {
            $case_types = $this->params->data['caseType'];
        } elseif ($_COOKIE['CS_TYPES']) {
            $case_types = $_COOKIE['CS_TYPES'];
        }
        $types = '';
        if ($case_types && $case_types != "all") {
            //$case_types = strrev($case_types);
            if (strstr($case_types, "-")) {
                $expst3 = explode("-", $case_types);
                foreach ($expst3 as $st3) {
                    $types.= $this->Format->caseBcTypes($st3) . ", ";
                }
                $types = trim($types, ', ');
            } else {
                $types = $this->Format->caseBcTypes($case_types);
            }
            $arr['case_types'] = $types;
        //$val =1;
        } else {
            $arr['case_types'] = 'All';
        }
        //For case Label
        if (isset($this->params->data['caseLabel']) && $this->params->data['caseLabel']) {
            $case_labels = $this->params->data['caseLabel'];
        } elseif ($_COOKIE['TASKLABEL']) {
            $case_labels = $_COOKIE['TASKLABEL'];
        }
        $lbls = '';
        if ($case_labels && $case_labels != "all") {
            if (strstr($case_labels, "-")) {
                $expst3 = explode("-", $case_labels);
                foreach ($expst3 as $st3) {
                    $lbls.= $this->Format->caseBcLabels($st3) . ", ";
                }
                $lbls = trim($lbls, ', ');
            } else {
                $lbls = $this->Format->caseBcLabels($case_labels);
            }
            $arr['case_labels'] = $lbls;
        //$val =1;
        } else {
            $arr['case_labels'] = 'All';
        }
        //For Priority
        if (isset($this->params->data['casePriority']) && $this->params->data['casePriority']) {
            $pri_fil = $this->params->data['casePriority'];
        } elseif ($_COOKIE['PRIORITY']) {
            $pri_fil = $_COOKIE['PRIORITY'];
        }
        if ($pri_fil && $pri_fil != "all") {
            if (strstr($pri_fil, "-")) {
                $expst2 = explode("-", $pri_fil);
                foreach ($expst2 as $st2) {
                    $pri.= $st2 . ", ";
                }
                $pri = trim($pri, ', ');
            } else {
                $pri = $pri_fil;
            }
            $arr['pri'] = $pri;
        //$val =1;
        } else {
            $arr['pri'] = 'All';
        }
        //For Case Members
        if (isset($this->params->data['caseMemeber']) && $this->params->data['caseMemeber']) {
            $case_member = $this->params->data['caseMemeber'];
        } elseif ($_COOKIE['MEMBERS']) {
            $case_member = $_COOKIE['MEMBERS'];
        }
        if ($case_member && $case_member != "all") {
            if (strstr($case_member, "-")) {
                $expst4 = explode("-", $case_member);
                foreach ($expst4 as $st4) {
                    $mems.= $this->Format->caseBcMems($st4) . ", ";
                }
            } else {
                $mems = $this->Format->caseBcMems($case_member) . ", ";
            }
            $arr['case_member'] = trim($mems, ', ');
        //$val =1;
        } else {
            $arr['case_member'] = 'All';
        }
        //For AssignTo
        if (isset($this->params->data['caseAssignTo']) && $this->params->data['caseAssignTo']) {
            $case_assignto = $this->params->data['caseAssignTo'];
        } elseif ($_COOKIE['ASSIGNTO']) {
            $case_assignto = $_COOKIE['ASSIGNTO'];
        }
        if ($case_assignto && $case_assignto != "all") {
            if (strstr($case_assignto, "-")) {
                $expst5 = explode("-", $case_assignto);
                foreach ($expst5 as $st5) {
                    $asns.= $this->Format->caseBcMems($st5) . ", ";
                }
            } else {
                $asns = $this->Format->caseBcMems($case_assignto) . ", ";
            }
            $arr['case_assignto'] = trim($asns, ', ');
            $val = 1;
        } else {
            $arr['case_assignto'] = 'All';
        }
        //For Case Date Status ....
        if (isset($this->params->data['caseDate']) && $this->params->data['caseDate']) {
            $date = $this->params->data['caseDate'];
        } else {
            $date = $this->Cookie->read('DATE');
        }
        if (!empty($date)) {
            //$val = 1;
            if (trim($date) == 'one') {
                $arr['date'] = "Past hour";
            } elseif (trim($date) == '24') {
                $arr['date'] = "Past 24Hour";
            } elseif (trim($date) == 'week') {
                $arr['date'] = "Past Week";
            } elseif (trim($date) == 'month') {
                $arr['date'] = "Past month";
            } elseif (trim($date) == 'year') {
                $arr['date'] = "Past Year";
            } elseif (strstr(trim($date), ":")) {
                $arr['date'] = str_replace(":", " - ", $date);
            }
        } else {
            $arr['date'] = "Any Time";
        }
        $duedate = $_COOKIE['DUE_DATE'];
        $this->set('assignto', $arr['case_assignto']);
        $this->set('memebers', $arr['case_member']);
        $this->set('priority', $arr['pri']);
        $this->set('type', $arr['case_types']);
        $this->set('label', $arr['case_labels']);
        $this->set('status', $arr['case_status']);
        $this->set('date', $arr['date']);
        $this->set('assignto_val', $case_assignto);
        $this->set('memebers_val', $case_member);
        $this->set('priority_val', $pri_fil);
        $this->set('type_val', $case_types);
        $this->set('status_val', $case_status);
        $this->set('date_val', $date);
        $this->set('duedate_val', $duedate);
        $this->set('search_val', $this->params->data['caseSearch']);
    }

    public function ajax_customfilter_save()
    {
        $this->layout = 'ajax';
        $caseStatus = $this->params->data['caseStatus'];
        $caseType = $this->params->data['caseType'];
        $caseLabel = $this->params->data['caseLabel'];
        $caseDate = $this->params->data['caseDate'];
        $casedueDate = $this->params->data['casedueDate'];
        $caseMemeber = $this->params->data['caseMemeber'];
        $caseComment = $this->params->data['caseComment'];
        $caseAssignTo = $this->params->data['caseAssignTo'];
        $casePriority = $this->params->data['casePriority'];
        $filterName = trim($this->params->data['filterName']);
        $projuniqid = $this->params->data['projuniqid'];
        $caseSearch = $this->params->data['caseSearch'];
        $this->loadModel('CustomFilter');
        $customFilters = $this->CustomFilter->find('first', array('conditions' => array('CustomFilter.filter_name' => $filterName, 'CustomFilter.company_id' => SES_COMP, 'CustomFilter.user_id' => SES_ID), 'fields' => array('CustomFilter.id'))); //,'CustomFilter.project_uniq_id'=>$projuniqid
        if (!empty($customFilters) && !empty($customFilters['CustomFilter']['id'])) {
            echo 'exists';
        } else {
            $this->CustomFilter->query("INSERT INTO custom_filters SET project_uniq_id='" . $projuniqid . "', company_id='" . SES_COMP . "', user_id='" . SES_ID . "', filter_name='" . $filterName . "',filter_date='" . $caseDate . "',filter_duedate='" . $casedueDate . "', filter_type_id='" . $caseType . "', filter_label_id='" . $caseLabel . "',filter_status='" . $caseStatus . "', filter_member_id='" . $caseMemeber."', filter_comment='" . $caseComment . "', filter_priority='" . $casePriority . "',filter_assignto='" . $caseAssignTo . "',filter_search='" . $caseSearch . "', dt_created='" . GMT_DATETIME . "'");
            echo "success";
        }
        exit;
    }

    public function ajax_customfilter_delete()
    {
        $this->layout = 'ajax';
        if (!empty($this->params->data['id'])) {
            $this->loadModel('CustomFilter');
            $customFilters = $this->CustomFilter->find('first', array('conditions' => array('CustomFilter.id' => $this->params->data['id']), 'fields' => array('CustomFilter.id')));
            if (!empty($customFilters) && !empty($customFilters['CustomFilter']['id'])) {
                $this->CustomFilter->id = $customFilters['CustomFilter']['id'];
                $res = $this->CustomFilter->delete();
                if ($res) {
                    echo "success";
                } else {
                    echo 'error';
                }
            } else {
                echo 'error';
            }
        }
        exit;
    }

    public function ajax_custom_filter_show()
    {
        $this->layout = 'ajax';
        $limit_1 = $this->params->data['limit1'];
        if (isset($limit_1)) {
            $limit1 = (int) $limit_1 + 3;
            $limit2 = 3;
        } else {
            $limit1 = 0;
            $limit2 = 3;
        }
        $this->loadModel('CustomFilter');
        $getcustomfilter = "SELECT SQL_CALC_FOUND_ROWS * FROM custom_filters AS CustomFilter WHERE CustomFilter.company_id = '" . SES_COMP . "' and CustomFilter.user_id =  '" . SES_ID . "' ORDER BY CustomFilter.dt_created DESC LIMIT $limit1,$limit2";
        $getfilter = $this->CustomFilter->query($getcustomfilter);
        $tot = $this->CustomFilter->query("SELECT FOUND_ROWS() as total");
        $this->set('getfilter', $getfilter);
        $this->set('limit1', $limit1);
        $this->set('totalfilter', $tot[0][0]['total']);
    }

    public function easycaseSql()
    {
        $sql = "SELECT DISTINCT Easycase.case_no, Easycase.project_id, COUNT(*) AS total FROM `easycases` AS Easycase WHERE Easycase.istype= 1 GROUP BY Easycase.case_no, Easycase.project_id ORDER BY Easycase.case_no DESC";
        $easycase = $this->Easycase->query($sql);
        foreach ($easycase as $key => $val) {
            if ($val['0']['total'] > 1) {
                $sql1 = "UPDATE easycases SET istype=2 WHERE case_no=" . $val['Easycase']['case_no'] . " AND project_id=" . $val['Easycase']['project_id'] . " AND case_count=0 AND istype=1";
                $this->Easycase->query($sql1);
                print $sql1 . "<br/>";
            }
        }
        exit;
    }

    public function ajax_duedate()
    {
        $this->layout = 'ajax';
        $this->set('due_date', $_COOKIE['DUE_DATE']);
    }

    public function ajax_task_recurring()
    {
        $this->layout = 'ajax';
        $recuringdata = ClassRegistry::init('RecurringEasycase')->find('all', array('conditions' => array('RecurringEasycase.easycase_id' => $this->data['cid'])));
        if ($recuringdata) {
            $arr['recurringData'] = $recuringdata;
        } else {
            $arr['recurringData'] = '';
        }
        echo json_encode($arr);
        exit;
    }
    public function edit_task_details()
    {
        $this->layout = 'ajax';
        $caseUid = $this->data['csUniqid'];
        $view = new View($this);
        $tz = $view->loadHelper('Tmzone');
        if ($caseUid) {
            //$casedetails = $this->Easycase->findByUniqId($caseUid);
            $casedetails = $this->Easycase->findByUniqId($caseUid, array('Easycase.*'), array('Easycase.id' => 'asc'));
            if ($casedetails) {
                $casedetails['Easycase']['allow_edit'] = $this->task_dependency($casedetails['Easycase']['id']);
                $projectdtls = ClassRegistry::init('Project')->find('first', array('conditions'=>array('Project.id'=>$casedetails['Easycase']['project_id']),'fields'=>array('name','uniq_id')));
                $arr['succ'] = 1;
                $casedetails['Easycase']['formatted_due_date'] = "";
                if ($casedetails['Easycase']['due_date'] && $casedetails['Easycase']['due_date'] != '0000-00-00 00:00:00' && $casedetails['Easycase']['due_date'] != '1970-01-01 00:00:00') {
                    $due_date = $tz->GetDateTime(SES_TIMEZONE, TZ_GMT, TZ_DST, TZ_CODE, $casedetails['Easycase']['due_date'], "datetime");
                    $casedetails['Easycase']['due_date'] = date('m/d/Y', strtotime($due_date));
                    $casedetails['Easycase']['formatted_due_date'] = date('M d , D', strtotime($due_date));
                } else {
                    $casedetails['Easycase']['due_date'] = '';
                }
                if ($casedetails['Easycase']['gantt_start_date'] && $casedetails['Easycase']['gantt_start_date'] != '0000-00-00 00:00:00' && $casedetails['Easycase']['gantt_start_date'] != '1970-01-01 00:00:00') {
                    $start_date = $tz->GetDateTime(SES_TIMEZONE, TZ_GMT, TZ_DST, TZ_CODE, $casedetails['Easycase']['gantt_start_date'], "datetime");
                    $casedetails['Easycase']['gantt_start_date'] = date('Y-m-d H:i:s', strtotime($start_date));
                    $casedetails['Easycase']['start_date'] = date('m/d/Y', strtotime($start_date));
                    $casedetails['Easycase']['formatted_start_date'] = date('M d , D', strtotime($start_date));
                } else {
                    $casedetails['Easycase']['gantt_start_date'] = '';
                }
                $casedetails['Easycase']['milestone'] = 'Default Task Group';
                $casedetails['Easycase']['milestone_id'] = '';

                $casedetails['Easycase']['project_name']= $projectdtls['Project']['name'];
                $casedetails['Easycase']['project_uniq_id']= $projectdtls['Project']['uniq_id'];
                //Checking for milestone and Getting the milestone details
                if ($_SESSION['project_methodology'] == 'scrum') {
                    $mlst_list = ClassRegistry::init('Milestone')->find('list', array('conditions' => array('project_id' => $casedetails['Easycase']['project_id'],'isactive'=>1), 'order' => 'end_date DESC'));
                } else {
                    $mlst_list = ClassRegistry::init('Milestone')->find('list', array('conditions' => array('project_id' => $casedetails['Easycase']['project_id']), 'order' => 'end_date DESC'));
                }
                $emdetails = ClassRegistry::init('EasycaseMilestone')->find('first', array('conditions' => array('project_id' => $casedetails['Easycase']['project_id'], 'easycase_id' => $casedetails['Easycase']['id'])));
                if ($emdetails) {
                    $casedetails['Easycase']['milestone'] = $mlst_list[$emdetails['EasycaseMilestone']['milestone_id']];
                    $casedetails['Easycase']['milestone_id'] = $emdetails['EasycaseMilestone']['milestone_id'];
                }
                $arr['mlst_list'] = '';
                /* converting HH:MM from sec for estimated hours */
                $hr = floor($casedetails['Easycase']['estimated_hours'] / 3600);
                $min = (floor($casedetails['Easycase']['estimated_hours'] % 3600) / 60 < 10 ? "0" : "") . floor(($casedetails['Easycase']['estimated_hours'] % 3600) / 60);
                $casedetails['Easycase']['estimated_hours'] = $hr . ":" . $min;
                $arr['data'] = $casedetails['Easycase'];
                if ($mlst_list) {
                    $arr['mlst_list'] = $mlst_list;
                }
                $files = ClassRegistry::init('CaseFile')->find('all', array('conditions' => array('CaseFile.easycase_id' => $casedetails['Easycase']['id']), 'fields' => array('CaseFile.id', 'CaseFile.file', 'CaseFile.display_name', 'CaseFile.file_size', 'CaseFile.count')));
                if ($files) {
                    $arr['files'] = $files;
                } else {
                    $arr['files'] = '';
                }
                //checklist
                $arr['checklists'] = array();
                $this->loadModel('CheckList');
                $AllchklstDtl = $this->CheckList->find('all', array('conditions' => array('CheckList.easycase_id' => $casedetails['Easycase']['id'], 'CheckList.project_id' => $casedetails['Easycase']['project_id']),'fields'=>array('CheckList.id','CheckList.uniq_id','CheckList.user_id','CheckList.title','CheckList.is_checked'),'order'=>array('CheckList.sequence'=>'DESC')));
                if (!empty($AllchklstDtl)) {
                    $frmt = $view->loadHelper('Format');
                    foreach ($AllchklstDtl as $key => $val) {
                        $arr['checklists'][$key] = $val;
                        $arr['checklists'][$key]['CheckList']['title'] = $frmt->formatCms($val['CheckList']['title']);
                    }
                }
                // Fetch custom field values of task
                $caseId = $casedetails['Easycase']['id'];
       
                $this->loadModel('CustomFieldValue');
                $getCustomFieldValues = $this->CustomFieldValue->getCaseCustomFields($caseId);
                $caseCFIdsArray = Hash::extract($getCustomFieldValues, "{n}.CustomField.id");
                $this->loadModel("CustomField");
                $taskCustomeFields = $this->CustomField->fetchActiveCustomField();
    
                foreach ($taskCustomeFields as $k=>$taskCustomeField) {
                    $cfId = $taskCustomeField['CustomField']['id'];
                    if (in_array($cfId, $caseCFIdsArray)) {
                        unset($taskCustomeFields[$k]);
                    }
                }
                $customFieldValues = array_merge($getCustomFieldValues, $taskCustomeFields);
     
                $arr['caseCustomFieldDetails'] = $customFieldValues;
                echo json_encode($arr);
                exit;
            } else {
                $arr['err'] = 1;
                $arr['msg'] = __('No matched record found with this id', true);
                echo json_encode($arr);
                exit;
            }
        } else {
            $arr['err'] = 1;
            $arr['msg'] = __('Invalid Case id', true);
            echo json_encode($arr);
            exit;
        }
    }

    //Move task from prject to project starts
    public function ajax_move_task_to_project()
    {
        $this->layout = 'ajax';
        $project_id = $this->params->data['project_id'];
        $case_id = $this->params->data['case_id'];
        $this->loadModel('Project');
        $this->Project->recursive = -1;
        $sql = "SELECT DISTINCT Project.name,Project.id,Project.uniq_id FROM projects AS Project,project_users AS ProjectUser WHERE Project.id = ProjectUser.project_id AND ProjectUser.user_id='" . SES_ID . "' AND ProjectUser.company_id='" . SES_COMP . "' AND Project.isactive='1' AND Project.name !='' ORDER BY ProjectUser.dt_visited DESC";
        $projects = $this->Project->query($sql);
        $thisProject = $this->Project->find('first', array('conditions' => array('id' => $project_id), 'fields' => array('name')));
        $thisProjectName = $thisProject['Project']['name'];
        $this->set('projectname', $thisProjectName);
        $this->set('projects', $projects);
        $this->set('project_id', $project_id);
        $this->set('case_id', $case_id);
        $this->set('is_multiple', $this->data['is_multiple']);
    }

    // Move project assignee when moving a task to another project
    public function move_assignee($caseId, $project_id, $old_project_id)
    {
        $this->loadModel('ProjectUser');
        $getAssigneeId = $this->Easycase->find('first', array('conditions' => array('id' => $caseId), 'fields' => array('assign_to')));
        if ($getAssigneeId && !empty($getAssigneeId['Easycase']['assign_to'])) {
            $assigneeDetails = $this->ProjectUser->find('first', array('conditions'=>array('ProjectUser.project_id'=>$old_project_id,'ProjectUser.user_id'=>$getAssigneeId['Easycase']['assign_to'],'ProjectUser.company_id'=>SES_COMP)));
            $checkUserExistance = $this->ProjectUser->find('first', array('conditions'=>array('ProjectUser.project_id'=>$project_id,'ProjectUser.user_id'=>$getAssigneeId['Easycase']['assign_to'],'ProjectUser.company_id'=>SES_COMP)));
            if (!$checkUserExistance && !empty($assigneeDetails)) {
                $createUser['id'] = '';
                $createUser['project_id'] = $project_id;
                $createUser['company_id'] = SES_COMP;
                $createUser['user_id'] = $getAssigneeId['Easycase']['assign_to'];
                $createUser['istype'] = $assigneeDetails['ProjectUser']['istype'];
                $createUser['default_email'] = $assigneeDetails['ProjectUser']['default_email'];
                $createUser['dt_visited'] = $assigneeDetails['ProjectUser']['dt_visited'];
                $createUser['role_id'] = $assigneeDetails['ProjectUser']['role_id'];
                $this->ProjectUser->create();
                $this->ProjectUser->save($createUser);
            }
        }
    }
    public function move_task_to_project()
    {
        $this->layout = 'ajax';
        $project_id = $this->params->data['project_id'];
        $old_project_id = $this->params->data['old_project_id'];
        $cond = ' 1 ';
        $postdata = $this->data;
        $this->loadModel('Project');
        // if(!$this->Project->compareProjectStatusgroup($old_project_id, $project_id)){
        // 	echo json_encode(array('success' => 0,'msg'=>__('Can not move task to a project having different status workflow.')));
        // 	exit;
        // }
        $caseId = $postdata['case_id'];
        if ($postdata['is_multiple']) {
            $selectedTask = $postdata['selected_task'];
            if ($selectedTask == 'alltask') {
                $getAllCases = $this->Easycase->query("select distinct case_no, id from easycases where project_id = $old_project_id order by id desc");
                $allCases=array();
                foreach ($getAllCases as $getAllCase) {
                    $allCases[] = $getAllCase['easycases']['case_no'];
                    if ($postdata['move_assignee'] && $postdata['move_assignee']==1) {
                        $this->move_assignee($getAllCase['easycases']['id'], $project_id, $old_project_id);
                    }
                }
                $case_no = $allCases;
            } else {
                $case_no = $this->params->data['case_no'];
            }
            $case_nos = implode(',', $case_no);
            $cond .= ' AND  FIND_IN_SET(case_no,"' . $case_nos . '") ';
            if ($postdata['move_assignee'] && $postdata['move_assignee']==1) {
                foreach ($caseId as $case) {
                    $this->move_assignee($case, $project_id, $old_project_id);
                }
            }
        } else {
            $case_no = $this->params->data['case_no'];
            $cond .= ' AND  case_no=' . $case_no . ' ';
            if ($postdata['move_assignee'] && $postdata['move_assignee']==1) {
                $this->move_assignee($caseId, $project_id, $old_project_id);
            }
        }
        //Getting highest count of case number of new project.
        #$sql = "SELECT MAX(case_no)+1 AS case_no FROM easycases AS Easycase WHERE project_id='" . $project_id . "'";
        #$max_case_no = $this->Easycase->query($sql);

        $max_case_no = $this->Easycase->find('first', array('conditions' => array('project_id' => $project_id), 'fields' => array('case_no'),'order'=>array('case_no'=>'DESC')));
        if (isset($max_case_no['Easycase']['case_no']) && !empty($max_case_no['Easycase']['case_no'])) {
            $max_case = $max_case_no['Easycase']['case_no']+1;
        } else {
            $max_case = 1;
        }

        //Getting all case ids which move to new project.
        $sql = "SELECT Easycase.id, Easycase.user_id, Easycase.type_id,Easycase.assign_to,GROUP_CONCAT(Easycase.id) as easycase_ids,Easycase.parent_task_id FROM easycases AS Easycase WHERE " . $cond . " AND project_id='" . $old_project_id . "' GROUP BY case_no";
        $cases = $this->Easycase->query($sql);
        /* Get the task status id of the new project */
        $status_group_id = $this->Project->find('first', array('conditions'=>array('Project.id'=>$project_id),'fields'=>'status_group_id'));
        if ($status_group_id['Project']['status_group_id'] == 0) {
            $newLegend = 1;
            $newCustomStatus = 0;
        } else {
            $this->loadModel('CustomStatus');
            $cusSts = $this->CustomStatus->find('first', array('conditions'=>array('CustomStatus.status_group_id'=>$status_group_id['Project']['status_group_id']),'fields'=>array('CustomStatus.id','CustomStatus.status_master_id'),'order'=>array('CustomStatus.seq'=>'ASC')));
            $newLegend = $cusSts['CustomStatus']['status_master_id'];
            $newCustomStatus = $cusSts['CustomStatus']['id'];
        }
        if (!empty($cases)) {
            $this->loadModel('Type');
            $this->loadModel('TypeCompany');
            $this->loadModel('CaseFile');
            $this->loadModel('CaseFileDrive');

            //get all children tasks to move in new project
            $easycase_ids = Hash::extract($cases, "{n}.Easycase.id");
            $childTasks = $this->Easycase->getSubTaskChild($easycase_ids, $old_project_id);
            if (!empty($childTasks)) {
                $child_case_no = Hash::extract($childTasks['data'], "{n}.Easycase.case_no");
                $childCases = $this->Easycase->find('all', array(
                    'conditions' => array('project_id' => $old_project_id, 'case_no' => $child_case_no),
                    'fields' => array('Easycase.id', 'Easycase.case_no', 'Easycase.user_id','Easycase.type_id', 'Easycase.assign_to', 'GROUP_CONCAT(Easycase.id) AS easycase_ids,Easycase.parent_task_id'),
                    'group' => 'case_no'
                ));
                if (!empty($childCases)) {
                    $cases = array_merge($cases, $childCases);
                    $postdata['is_multiple'] = 1;
                }
            }
            $easycase_ids_all = Hash::extract($cases, "{n}.Easycase.id");
            //end
            foreach ($cases as $key => $case) {
                $easycase['Easycase']['id'] = $case['Easycase']['id'];
                $easycase['Easycase']['project_id'] = $project_id;
                $easycase['Easycase']['case_no'] = $max_case;

                //Getting assign user is exist in new project or not
                /* if(($case['Easycase']['user_id'] == SES_ID) && ($case['Easycase']['user_id'] !== $case['Easycase']['assign_to'])) {
                  $assignto = $this->ProjectUser->find('first',array('conditions'=>array('ProjectUser.project_id'=>$project_id,'ProjectUser.user_id'=>$case['Easycase']['assign_to'],'ProjectUser.company_id'=>SES_COMP)));
                  if(isset($assignto) && empty($assignto)) {
                  $easycase['Easycase']['assign_to'] = SES_ID;
                  }
                  } */
                $typeInfo = $this->Type->find('first', array('conditions'=>array('Type.id'=>$case['Easycase']['type_id'])), false);
                if ($typeInfo['Type']['project_id'] != 0) {
                    $dt = $this->Type->find('first', array('conditions'=>array('Type.project_id'=>$project_id, 'OR'=>array('Type.short_name'=>$typeInfo['Type']['short_name'],'Type.name'=>$typeInfo['Type']['name']))));
                    if (!empty($dt)) {
                        $ttp_id = $dt['Type']['id'];
                    } else {
                        $createType['id'] = '';
                        $createType['company_id'] = SES_COMP;
                        $createType['project_id'] = $project_id;
                        $createType['short_name'] = $typeInfo['Type']['short_name'];
                        $createType['name'] = $typeInfo['Type']['name'];
                        $createType['seq_order'] = $typeInfo['Type']['seq_order'];
                        $this->Type->create();
                        $this->Type->save($createType);
                        $ttp_id = $this->Type->getLastInsertId();
                    }
                    $isActive = $this->TypeCompany->find('count', array('conditions'=>array('TypeCompany.company_id'=>SES_COMP,'TypeCompany.type_id'=>$ttp_id)));
                    if (!$isActive) {
                        $typeComp['company_id'] = SES_COMP;
                        $typeComp['type_id'] = $ttp_id;
                        $this->TypeCompany->create();
                        $this->TypeCompany->save($typeComp);
                    }
                } else {
                    $ttp_id = $case['Easycase']['type_id'];
                }
                //Move to new project
                if (strstr($case['0']['easycase_ids'], ',')) {
                    $casearr = explode(',', $case['0']['easycase_ids']);
                } else {
                    $casearr[] = $case['0']['easycase_ids'];
                }
                $prnt_task = null;
                if (!empty($case['Easycase']['parent_task_id'])) {
                    if (!in_array($case['Easycase']['parent_task_id'], $easycase_ids)) {
                        if ($this->Easycase->checkParentInProject($case['Easycase']['parent_task_id'], $project_id)) {
                            $prnt_task = $case['Easycase']['parent_task_id'];
                        }
                    } else {
                        $prnt_task = $case['Easycase']['parent_task_id'];
                    }
                }
                if ($this->Easycase->updateAll(array('Easycase.project_id' => $project_id, 'Easycase.case_no' => $max_case, 'Easycase.is_recurring' => 0, 'Easycase.depends' => null, 'Easycase.children' => null,'Easycase.parent_task_id' => $prnt_task ,'Easycase.type_id'=>$ttp_id, 'Easycase.legend' => $newLegend, 'Easycase.custom_status_id' => $newCustomStatus), array('Easycase.id' => $casearr, 'Easycase.project_id' => $old_project_id))) {
                    //Update case files
                    $this->CaseFile->updateAll(array('CaseFile.project_id' => $project_id), array('CaseFile.easycase_id' => $casearr, 'CaseFile.project_id' => $old_project_id, 'CaseFile.company_id' => SES_COMP));
                    //Update case files drives
                    $this->CaseFileDrive->updateAll(array('CaseFileDrive.project_id' => $project_id), array('CaseFileDrive.easycase_id' => $casearr, 'CaseFileDrive.project_id' => $old_project_id));
                    //Update Case Recent
                    $this->CaseRecent->updateAll(array('CaseRecent.project_id' => $project_id), array('CaseRecent.easycase_id' => $casearr, 'CaseRecent.project_id' => $old_project_id));
                    //Update Case User ViewS
                    $this->CaseUserView->updateAll(array('CaseUserView.project_id' => $project_id), array('CaseUserView.easycase_id' => $casearr, 'CaseUserView.project_id' => $old_project_id));
                    //Update Case Activity
                    $this->CaseActivity->updateAll(array('CaseActivity.project_id' => $project_id, 'CaseActivity.case_no' => $max_case), array('CaseActivity.easycase_id' => $casearr, 'CaseActivity.project_id' => $old_project_id));
                    //Update Log Time
                    $this->LogTime->updateAll(array('LogTime.project_id' => $project_id,), array('LogTime.task_id' => $casearr, 'LogTime.project_id' => $old_project_id));
                    //Delete milestone Linking for the moved task
                    $this->EasycaseMilestone->deleteAll(array('EasycaseMilestone.easycase_id' => $casearr, 'EasycaseMilestone.project_id' => $old_project_id));
                    //Delete Easycase Linking for the moved task
                    $this->loadModel('EasycaseLinking');
                    $this->EasycaseLinking->deleteAll(array('EasycaseLinking.easycase_id' => $casearr, 'EasycaseLinking.project_id' => $old_project_id));
                    //Delete Easycase Label for the moved task
                    $this->loadModel('EasycaseLabel');
                    $this->EasycaseLabel->deleteAll(array('EasycaseLabel.easycase_id' => $casearr, 'EasycaseLabel.project_id' => $old_project_id));
                    //Delete Easycase Favourite for the moved task
                    $this->loadModel('EasycaseFavourite');
                    $this->EasycaseFavourite->deleteAll(array('EasycaseFavourite.easycase_id' => $casearr, 'EasycaseFavourite.project_id' => $old_project_id));
                    /* Delete previous RA **/
                    if ($this->Format->isResourceAvailabilityOn()) {
                        foreach ($casearr as $casek=>$casev) {
                            $this->Format->delete_booked_hours(array('easycase_id' => $casev, 'project_id' =>$old_project_id), 1);
                        }
                    }
                    /* End */

                    /* remove easycase id from other dependant tasks from depends and  children column */
                    if (is_array($casearr) && count($casearr) > 0) {
                        foreach ($casearr as $id) {
                            $this->update_dependancy($id, $old_project_id);
                        }
                    }

                    $msg = array('message'=>'success');
                } else {
                    $msg =  array('message'=>'failure');
                }
                if ($postdata['is_multiple']) {
                    $max_case++;
                }
            }
            $cases_updated = Hash::extract($cases, "{n}.Easycase.id");
            $msg['case_updated'] = $cases_updated;
        } else {
            $msg =  array('message'=>'failure');
        }
        $msg['msg'] = '';
        print json_encode($msg);
        exit;
    }

    //Move task from prject to project starts
    public function ajax_copy_task_to_project()
    {
        $this->layout = 'ajax';
        $project_id = $this->params->data['project_id'];
        $case_id = $this->params->data['case_id'];
        $this->loadModel('Project');
        $this->Project->recursive = -1;
        $sql = "SELECT DISTINCT Project.name,Project.id,Project.uniq_id FROM projects AS Project,
		project_users AS ProjectUser WHERE Project.id = ProjectUser.project_id AND ProjectUser.user_id='" . SES_ID . "'
		    AND ProjectUser.company_id='" . SES_COMP . "' AND Project.isactive='1' AND Project.name !='' ORDER BY ProjectUser.dt_visited DESC";
        $projects = $this->Project->query($sql);
        $this->set('projects', $projects);
        $this->set('project_id', $project_id);
        $this->set('case_id', $case_id);
        $this->set('is_multiple', $this->data['is_multiple']);
    }

    public function escapeSearchTxt($txt='')
    {
        if (!empty($txt)) {
            $escape = "";
            $txt_esc = addslashes(trim(urldecode($txt)));
            if (strpos($txt_esc, '\\') !== false) {
                $escape = " ESCAPE '~'";
            }
            return $escape;
        }
    }
    public function copy_task_to_project()
    {
        $this->layout = 'ajax';
        $postdata = $this->data;
        $project_id = $postdata['project_id'];
        $old_project_id = $postdata['old_project_id'];
        $case_no = $postdata['case_no'];
        $task_id_map = array();

        $this->loadModel('Project');
        $this->loadModel('EasycaseLabel');
        // if(!$this->Project->compareProjectStatusgroup($old_project_id, $project_id)){
        // 	echo json_encode(array('success' => 0,'msg'=>'Can not copy task to a project having different workflow.'));
        // 	exit;
        // }
        //Getting highest count of case number of new project.
        $sql = "SELECT MAX(case_no)+1 AS case_no FROM easycases AS Easycase WHERE project_id='" . $project_id . "'";
        $max_case_no = $this->Easycase->query($sql);
        if (isset($max_case_no['0']['0']['case_no']) && !empty($max_case_no['0']['0']['case_no'])) {
            $max_case = $max_case_no['0']['0']['case_no'];
        } else {
            $max_case = 1;
        }

        $this->Easycase->bindModel(array(
            'hasMany' => array(
                'CaseFile' => array('className' => 'CaseFile'),
                'CaseFileDrive' => array('className' => 'CaseFileDrive'),
                'EasycaseMilestone' => array('className' => 'EasycaseMilestone')
            )), false);

        $fields = array('Easycase.id', 'Easycase.case_count', 'Easycase.type_id', 'Easycase.priority', 'Easycase.title', 'Easycase.message',
            'Easycase.estimated_hours', 'Easycase.hours', 'Easycase.due_date', 'Easycase.istype', 'Easycase.legend', 'Easycase.isactive',
            'Easycase.format', 'Easycase.reply_type', 'Easycase.gantt_start_date', 'Easycase.parent_task_id', 'Easycase.case_no', 'Easycase.parent_task_id', 'Easycase.story_point', 'Easycase.custom_status_id');

        /*$cases = $this->Easycase->find('all', array(
            'conditions' => array('Easycase.case_no' => $case_no,'OR'=>array('Easycase.parent_task_id' => '','Easycase.parent_task_id IS NULL'), 'Easycase.project_id' => $old_project_id, 'Easycase.istype' => 1),
            'fields' => $fields,
            'order' => array('Easycase.id' => 'ASC')
        ));*/
        $cases = $this->Easycase->find('all', array(
            'conditions' => array('Easycase.case_no' => $case_no, 'Easycase.project_id' => $old_project_id, 'Easycase.istype' => 1),
            'fields' => $fields,
            'order' => array('Easycase.id' => 'ASC')
        ));
        $easycase_ids = Hash::extract($cases, "{n}.Easycase.id");
        //get all children tasks to move in new project
        $childTasks = $this->Easycase->getSubTaskChild($easycase_ids, $old_project_id);
        if (!empty($childTasks)) {
            $child_case_no = Hash::extract($childTasks['data'], "{n}.Easycase.case_no");
            $childCases = $this->Easycase->find('all', array(
                'conditions' => array('project_id' => $old_project_id, 'case_no' => $child_case_no, 'Easycase.istype' => 1),
                'fields' => $fields,
                'order' => array('Easycase.id' => 'ASC')
            ));
            if (!empty($childCases)) {
                $cases = array_merge($cases, $childCases);
                $postdata['is_multiple'] = 1;
            }
        }
        //end
        /* Get the task status id of the new project */
        $status_group_id = $this->Project->find('first', array('conditions'=>array('Project.id'=>$project_id),'fields'=>'status_group_id'));
        if ($status_group_id['Project']['status_group_id'] == 0) {
            $newLegend = 1;
            $newCustomStatus = 0;
        } else {
            $this->loadModel('CustomStatus');
            $cusSts = $this->CustomStatus->find('first', array('conditions'=>array('CustomStatus.status_group_id'=>$status_group_id['Project']['status_group_id']),'fields'=>array('CustomStatus.id','CustomStatus.status_master_id'),'order'=>array('CustomStatus.seq'=>'ASC')));
            $newLegend = $cusSts['CustomStatus']['status_master_id'];
            $newCustomStatus = $cusSts['CustomStatus']['id'];
        }
        if (!empty($cases)) {
            $parent_ids = Hash::combine($cases, "{n}.Easycase.id", "{n}.Easycase.parent_task_id");
            $this->loadModel('CaseFile');
            $this->loadModel('CaseFileDrive');
            $this->loadModel('CaseUserEmail');
            $this->loadModel('Type');
            $this->loadModel('TypeCompany');
            $this->Easycase->recursive = -1;
            $arr_duplicate = array();
            foreach ($cases as $key => $case) {
                if (!in_array($case['Easycase']['id'], $arr_duplicate)) {
                    array_push($arr_duplicate, $case['Easycase']['id']);
                } else {
                    continue;
                }
                $easycase = array();
                $easycase['Easycase'] = $case['Easycase'];
                $easycase['Easycase']['project_id'] = $project_id;
                $easycase['Easycase']['case_no'] = $max_case;
                $easycase['Easycase']['uniq_id'] = $this->Format->generateUniqNumber();
                $easycase['Easycase']['user_id'] = SES_ID;
                $str_scch = addslashes(trim(urldecode($easycase['Easycase']['title'] . ' - copy')));
                $str_scch_1 = addslashes(trim(urldecode($easycase['Easycase']['title'])));
                $str_scch_2 = addslashes(trim(urldecode($easycase['Easycase']['title'] . ' - copy (%')));
                                
                $escChar = $this->escapeSearchTxt($str_scch);
                $escChar_1 = $this->escapeSearchTxt($str_scch_1);
                $escChar_2 = $this->escapeSearchTxt($str_scch_2);
                $copycheck = $this->Easycase->query('SELECT Easycase.title FROM easycases AS Easycase '
                        . 'WHERE Easycase.project_id = ' . $project_id . ' AND Easycase.istype = 1 '
                        . 'AND (Easycase.title LIKE "' .$str_scch.'"'.$escChar.' '
                        . 'OR Easycase.title LIKE "' .$str_scch_1. '"'.$escChar_1.' '
                        . 'OR Easycase.title LIKE "' .$str_scch_2. '"'.$escChar_2.') '
                        . 'ORDER BY Easycase.title DESC');
                /*$copycheck = $this->Easycase->query('SELECT Easycase.title FROM easycases AS Easycase '
                        . 'WHERE Easycase.project_id = ' . $project_id . ' AND Easycase.istype = 1 '
                        . 'AND (Easycase.title = "' . $easycase['Easycase']['title'] . ' - copy" '
                        . 'OR Easycase.title = "' . $easycase['Easycase']['title'] . '" '
                        . 'OR Easycase.title LIKE "' . $easycase['Easycase']['title'] . ' - copy (%") '
                        . 'ORDER BY Easycase.title DESC');*/
                if (!empty($copycheck)) {
                    if (preg_match("/\(\d\)$/", $copycheck[0]['Easycase']['title'], $match) && $copycheck[0]['Easycase']['title'] != $easycase['Easycase']['title']) {
                        $cnt = (int) substr($match[0], 1, -1);
                        $cnt+=1;
                        $easycase['Easycase']['title'] = $easycase['Easycase']['title'] . ' - copy (' . $cnt . ')';
                    } else {
                        if ($copycheck[0]['Easycase']['title'] == $easycase['Easycase']['title'] . ' - copy') {
                            $easycase['Easycase']['title'] = $easycase['Easycase']['title'] . ' - copy (2)';
                        } else {
                            $easycase['Easycase']['title'] = $easycase['Easycase']['title'] . ' - copy';
                        }
                    }
                }
                $easycase['Easycase']['assign_to'] = 0;
                $easycase['Easycase']['case_count'] = 0;
                $easycase['Easycase']['dt_created'] = GMT_DATETIME;
                $easycase['Easycase']['gantt_start_date'] = $easycase['Easycase']['gantt_start_date'];
                $easycase['Easycase']['actual_dt_created'] = GMT_DATETIME;
                /*check the task type and update */
                $typeInfo = $this->Type->find('first', array('conditions'=>array('Type.id'=>$case['Easycase']['type_id'])), false);
                if ($typeInfo['Type']['project_id'] != 0) {
                    $dt = $this->Type->find('first', array('conditions'=>array('Type.project_id'=>$project_id, 'OR'=>array('Type.short_name'=>$typeInfo['Type']['short_name'],'Type.name'=>$typeInfo['Type']['name']))));
                    if (!empty($dt)) {
                        $ttp_id = $dt['Type']['id'];
                    } else {
                        $createType['id'] = '';
                        $createType['company_id'] = SES_COMP;
                        $createType['project_id'] = $project_id;
                        $createType['short_name'] = $typeInfo['Type']['short_name'];
                        $createType['name'] = $typeInfo['Type']['name'];
                        $createType['seq_order'] = $typeInfo['Type']['seq_order'];
                        $this->Type->create();
                        $this->Type->save($createType);
                        $ttp_id = $this->Type->getLastInsertId();
                    }
                    $isActive = $this->TypeCompany->find('count', array('conditions'=>array('TypeCompany.company_id'=>SES_COMP,'TypeCompany.type_id'=>$ttp_id)));
                    if (!$isActive) {
                        $typeComp['company_id'] = SES_COMP;
                        $typeComp['type_id'] = $ttp_id;
                        $this->TypeCompany->create();
                        $this->TypeCompany->save($typeComp);
                    }
                } else {
                    $ttp_id = $case['Easycase']['type_id'];
                }
                $easycase['Easycase']['type_id'] = $ttp_id;
                /* END*/
                $t_old_case_id = $easycase['Easycase']['id'];
                unset($easycase['Easycase']['id']);
                if (empty($case['CaseFile'])) {
                    $easycase['Easycase']['format'] = 2;
                }
                $mid = 0;
                if (isset($postdata['taskCopy'])) {
                    $easycase['EasycaseMilestone'] = $case['EasycaseMilestone'];

                    unset($easycase['EasycaseMilestone'][0]['id']);
                    unset($easycase['EasycaseMilestone'][0]['easycase_id']);
                    unset($easycase['EasycaseMilestone'][0]['created']);

                    $mid = $easycase['EasycaseMilestone'][0]['milestone_id'];
                }
                #$easycase['Easycase']['parent_task_id'] = $task_id_map[$case['parent_task_id']];
                #pr($easycase);
                #exit;
                $easycase['Easycase']['legend'] = $newLegend;
                $easycase['Easycase']['custom_status_id'] = $newCustomStatus;
                if ($this->Easycase->saveAll($easycase)) {
                    $ecid = $this->Easycase->getLastInsertID();
                    $labels = $this->EasycaseLabel->find('all', array('conditions'=>array('EasycaseLabel.easycase_id' => $postdata['case_id'],'EasycaseLabel.project_id' => $postdata['old_project_id'])));
                    // echo "<pre>"; print_r($labels); exit;
                    foreach ($labels as $key => $value) {
                        $labels['EasycaseLabel']['label_id'] =  $labels[$key]['EasycaseLabel']['label_id'];
                        $labels['EasycaseLabel']['company_id'] = $labels[$key]['EasycaseLabel']['company_id'];
                        $labels['EasycaseLabel']['project_id'] = $labels[$key]['EasycaseLabel']['project_id'];
                        $labels['EasycaseLabel']['easycase_id'] = $ecid;
                        if ($this->EasycaseLabel->saveAll($labels)) {
                        } else {
                        }
                    }
                    $task_id_map[$case['Easycase']['id']] = $ecid;
                    if (!empty($case['CaseFile'])) {
                        foreach ($case['CaseFile'] as $k => $v) {
                            if ($t_old_case_id == $v['easycase_id']) {
                                $caseFl = array();
                                $caseFlD = array();
                                if ($v['downloadurl']) {
                                    $caseFl = $v;
                                    foreach ($case['CaseFileDrive'] as $kd => $vd) {
                                        $temp_d = json_decode($vd['file_info'], true);
                                        if (trim($temp_d['title']) == trim($v['file'])) {
                                            $caseFlD = $vd;
                                        }
                                    }
                                    unset($caseFl['id']);
                                    unset($caseFlD['id']);
                                    $caseFlD['easycase_id'] = $ecid;
                                    $caseFlD['project_id'] = $project_id;
                                    $caseFl['easycase_id'] = $ecid;
                                    $caseFl['project_id'] = $project_id;
                                    $caseFl['user_id'] = SES_ID;
                                    $this->CaseFile->saveAll($caseFl);
                                    $this->CaseFileDrive->saveAll($caseFlD);
                                } else {
                                    $caseFl = $v;
                                    unset($caseFl['id']);
                                    $caseFl['easycase_id'] = $ecid;
                                    $caseFl['project_id'] = $project_id;
                                    $fil_name = $this->Postcase->copyTaskFiles($v['file']);
                                    $caseFl['file'] = $fil_name;
                                    $caseFl['thumb'] = 'thumb_' . $fil_name;
                                    $this->CaseFile->saveAll($caseFl);
                                }
                            }
                        }
                    }
                    $UserEmail = array();
                    $UserEmail['easycase_id'] = $ecid;
                    $UserEmail['user_id'] = SES_ID;
                    $UserEmail['ismail'] = 1;
                    $this->CaseUserEmail->saveAll($UserEmail);
                    if ($postdata['is_multiple'] == 0 && isset($postdata['taskCopy'])) {
                        $msg = json_encode(array('id' => $ecid, 'mid' => $mid));
                    } else {
                        $msg = 1;
                    }
                } else {
                    $msg = 0;
                }
                if ($postdata['is_multiple']) {
                    $max_case++;
                }
            }
            if (!empty($parent_ids)) {
                #$parent_ids = array_filter($parent_ids);
                foreach ($parent_ids as $task_id => $parent_id) {
                    if (!empty($parent_id)) {
                        // Update: parent_task_id is set to a numerical value
                        $this->Easycase->id = $task_id_map[$task_id];
                        $this->Easycase->save(array('parent_task_id' => $task_id_map[$parent_id]));
                    }
                }
            }
        } else {
            $msg = 0;
        }
        echo json_encode(array('success' => $msg, 'msg'=>''));
        exit;
    }

    //Move task from prject to project ends
    /**
     * @method: Public kanban_task() Used for the kanban view of the tasks
     * @author GDR <abc@mydomain.com>
     * @return JSON json data will be returned and is going to be used in Json kanban_task template
     */
    public function kanban_task()
    {
        $this->layout = 'ajax';
        $kanbanTaskList = array();

        //$page_limit = CASE_PAGE_LIMIT;
        $kanbanTotalDisplay = $page_limit = 20;
        $this->_datestime();

        $search_key = $this->data['search_key']; // searching value

        $projUniq = $this->data['projFil']; // Project Uniq ID
        $projIsChange = $this->data['projIsChange']; // Project Uniq ID

        $caseStatus = $this->data['caseStatus']; // Filter by Status(legend)
        $caseCustomStatus = $this->params->data['caseCustomStatus']; // Filter by Custom Status
        $priorityFil = $this->data['priFil']; // Filter by Priority
        $caseTypes = $this->data['caseTypes']; // Filter by case Types
        $caseLabel = $this->data['caseLabel']; // Filter by case Label
        $caseUserId = $this->data['caseMember']; // Filter by Member
        $caseComment = $this->data['caseComment']; // Filter by Member
        $caseTaskgroup = $this->data['caseTaskgroup']; // Filter by Member
        $caseAssignTo = $this->data['caseAssignTo']; // Filter by AssignTo
        $caseDate = $this->data['caseDate']; // Sort by Date
        $caseSrch = $this->data['caseSearch']; // Search by keyword
        $casePage = $this->data['casePage']; // Pagination
        $caseUniqId = $this->data['caseId']; // Case Uniq ID to close a case
        $caseTitle = $this->data['caseTitle']; // Case Uniq ID to close a case
        $caseDueDate = $this->data['caseDueDate']; // Sort by Due Date

        $caseNum = $this->data['caseNum']; // Sort by Due Date
        $caseLegendsort = $this->data['caseLegendsort']; // Sort by Case Status
        $caseAtsort = $this->data['caseAtsort']; // Sort by Case Status
        $startCaseId = $this->data['startCaseId']; // Start Case
        $caseResolve = $this->data['caseResolve']; // Resolve Case
        $caseNew = $this->data['caseNew']; // New Case

        $caseMenuFilters = $this->data['caseMenuFilters']; // Resolve Case
        $milestoneIds = $this->data['milestoneIds']; // Resolve Case
        $milestoneUid = $this->data['milestoneUid'];
        if (strpos($milestoneUid, 'custom-') !== false) {
            $milestoneUid ='';
        }
        $caseCreateDate = $this->data['caseCreateDate']; // Sort by Created Date
        @$case_srch = $this->data['case_srch'];
        @$case_date = urldecode($this->data['case_date']);
        @$case_duedate = $this->data['case_due_date'];
        @$milestone_type = $this->data['mstype'];
        $changecasetype = $this->data['caseChangeType'];
        $caseChangeDuedate = $this->data['caseChangeDuedate'];
        $caseChangePriority = $this->data['caseChangePriority'];
        $caseChangeAssignto = $this->data['caseChangeAssignto'];
        $customfilterid = $this->data['customfilter'];
        $detailscount = $this->data['data']['detailscount']; // Count number to open casedetails
        $morecontent = $this->data['morecontent'];
        $ErestrictedQuery =$restrictedQuery = "";
        $qryTasgroup = "";
        if (!$this->Format->isAllowed('View All Task', $roleAccess)) {
            $ErestrictedQuery = " AND (E.assign_to=" . SES_ID . " OR E.user_id=".SES_ID.")";
            $restrictedQuery = " AND (Easycase.assign_to=" . SES_ID . " OR Easycase.user_id=".SES_ID.")";
        }
        $clt_sql = 1;
        if ($this->Auth->user('is_client') == 1) {
            $clt_sql = "((Easycase.client_status = " . $this->Auth->user('is_client') . " AND Easycase.user_id = " . $this->Auth->user('id') . ") OR Easycase.client_status != " . $this->Auth->user('is_client') . ")";
        }
        if ($customfilterid) {
            $this->loadModel('CustomFilter');
            //$getcustomfilter = "SELECT  * FROM custom_filters AS CustomFilter WHERE CustomFilter.company_id = '".SES_COMP."' and CustomFilter.user_id =  '".SES_ID."' and CustomFilter.id=".$customfilterid." ORDER BY CustomFilter.dt_created DESC ";
            $getfilter = $this->CustomFilter->find('first', array('conditions' => array('CustomFilter.company_id' => SES_COMP, 'CustomFilter.user_id' => SES_ID, 'CustomFilter.id' => $customfilterid), 'order' => 'CustomFilter.dt_created DESC'));
            $caseStatus = $getfilter['CustomFilter']['filter_status'];
            $caseCustomStatus = $getfilter[0]['CustomFilter']['filter_custom_status'];
            $priorityFil = $getfilter['CustomFilter']['filter_priority'];
            $caseTypes = $getfilter['CustomFilter']['filter_type_id'];
            $caseUserId = $getfilter['CustomFilter']['filter_member_id'];
            $caseComment = $getfilter['CustomFilter']['filter_comment'];
            $caseTaskgroup = $getfilter['CustomFilter']['filter_taskgroup'];
            $caseAssignTo = $getfilter['CustomFilter']['filter_assignto'];
            $caseDate = $getfilter['CustomFilter']['filter_date'];
            $case_duedate = $getfilter['CustomFilter']['filter_duedate'];
            $caseSrch = $getfilter['CustomFilter']['filter_search'];
        }
        if ($caseMenuFilters) {
            setcookie('CURRENT_FILTER', $caseMenuFilters, COOKIE_REM, '/', DOMAIN_COOKIE, false, false);
        } else {
            setcookie('CURRENT_FILTER', $caseMenuFilters, COOKIE_REM, '/', DOMAIN_COOKIE, false, false);
        }
        $caseUrl = $this->data['caseUrl'];
        $curProjId = null;
        $curProjShortName = null;
        $curProjStsGroup = 0;
        if ($projUniq != 'all') {
            $this->ProjectUser->bindModel(array('belongsTo' => array('Project')));
            $projArr = $this->ProjectUser->find('first', array('conditions' => array('Project.uniq_id' => $projUniq, 'ProjectUser.user_id' => SES_ID, 'Project.isactive' => 1, 'ProjectUser.company_id' => SES_COMP), 'fields' => array('Project.id', 'Project.short_name', 'ProjectUser.id','Project.status_group_id')));
            if (count($projArr)) {
                $curProjId = $projArr['Project']['id'];
                $curProjStsGroup = $projArr['Project']['status_group_id'];
                $curProjShortName = $projArr['Project']['short_name'];

                //Updating ProjectUser table to current date-time
                if ($projIsChange != $projUniq) {
                    $ProjectUser['id'] = $projArr['ProjectUser']['id'];
                    $ProjectUser['dt_visited'] = GMT_DATETIME;
                    $this->ProjectUser->save($ProjectUser);
                }
            }
        }
        $view = new View($this);
        $tz = $view->loadHelper('Tmzone');
        $dt = $view->loadHelper('Datetime');
        $cq = $view->loadHelper('Casequery');
        $frmt = $view->loadHelper('Format');
        ########Get all Milestone ###############
        if ($projUniq != 'all' && $milestoneUid) {
            $msOrder = " ORDER BY CASE WHEN TG.milestone_id IS NULL THEN 99999999999999 ELSE TG.m_order END  ASC, TG.milestone_id ASC  ";//" ORDER BY E.end_date ASC,E.Mtitle ASC  ";
            $all_miles_query =  "SELECT TG.* FROM (SELECT Milestone.id,Milestone.uniq_id,Milestone.title,Milestone.project_id,c.milestone_id,c.m_order,COUNT(c.easycase_id) AS totalcases,GROUP_CONCAT(c.easycase_id) AS `caseids` FROM milestones AS Milestone LEFT JOIN easycase_milestones AS c ON Milestone.id = c.milestone_id LEFT JOIN easycases as E On E.id = c.easycase_id  WHERE `Milestone`.`project_id` =" . $curProjId . " AND `Milestone`.`company_id` = " . SES_COMP .$ErestrictedQuery. " GROUP BY Milestone.id ) AS TG $msOrder "; //AND ((E.istype=1 AND E.isactive= 1) OR E.id IS NULL)
        $allMilestones = $this->Milestone->query($all_miles_query);
        
        
            $default_tasks_sql = "SELECT count(Easycase.id) as total FROM (SELECT Easycase.* FROM easycases as Easycase LEFT JOIN easycase_milestones AS EasycaseMilestone ON EasycaseMilestone.easycase_id=Easycase.id LEFT JOIN milestones AS Milestone ON Milestone.id=EasycaseMilestone.milestone_id WHERE  Easycase.istype='1' AND Easycase.isactive='1' AND " . $clt_sql . $restrictedQuery. " AND Easycase.isactive=1 AND Milestone.id IS NULL AND Easycase.project_id='$curProjId' AND Easycase.project_id!=0 ) AS Easycase LEFT JOIN users User ON Easycase.assign_to=User.id";
            $default_task_count = $this->Easycase->query($default_tasks_sql);
        
            $default_tasks_close_sql = "SELECT count(Easycase.id) as total FROM (SELECT Easycase.* FROM easycases as Easycase LEFT JOIN easycase_milestones AS EasycaseMilestone ON EasycaseMilestone.easycase_id=Easycase.id LEFT JOIN milestones AS Milestone ON Milestone.id=EasycaseMilestone.milestone_id WHERE  Easycase.istype='1' AND Easycase.isactive='1' AND " . $clt_sql. $restrictedQuery . " AND Easycase.isactive=1 AND Easycase.legend = 3 AND Milestone.id IS NULL AND Easycase.project_id='$curProjId' AND Easycase.project_id!=0 ) AS Easycase LEFT JOIN users User ON Easycase.assign_to=User.id";
            $default_task_close_count = $this->Easycase->query($default_tasks_close_sql);
        
            $all_tasks_sql = "SELECT count(Easycase.id) as total FROM (SELECT Easycase.* FROM easycases as Easycase LEFT JOIN easycase_milestones AS EasycaseMilestone ON EasycaseMilestone.easycase_id=Easycase.id LEFT JOIN milestones AS Milestone ON Milestone.id=EasycaseMilestone.milestone_id WHERE  Easycase.istype='1' AND Easycase.isactive='1' AND " . $clt_sql . $restrictedQuery. " AND Easycase.isactive=1 AND Easycase.project_id='$curProjId' AND Easycase.project_id!=0 ) AS Easycase LEFT JOIN users User ON Easycase.assign_to=User.id";
            $all_task_count = $this->Easycase->query($all_tasks_sql);
        
            $all_tasks_close_sql = "SELECT count(Easycase.id) as total FROM (SELECT Easycase.* FROM easycases as Easycase LEFT JOIN easycase_milestones AS EasycaseMilestone ON EasycaseMilestone.easycase_id=Easycase.id LEFT JOIN milestones AS Milestone ON Milestone.id=EasycaseMilestone.milestone_id WHERE  Easycase.istype='1' AND Easycase.isactive='1' AND " . $clt_sql. $restrictedQuery . " AND Easycase.isactive=1 AND Easycase.legend = 3 AND Easycase.project_id='$curProjId' AND Easycase.project_id!=0 ) AS Easycase LEFT JOIN users User ON Easycase.assign_to=User.id";
            $all_task_close_count = $this->Easycase->query($all_tasks_close_sql);
        
        
            $mstIds = Hash::extract($allMilestones, '{n}.TG.id');
        } else {
            $mstIds= array();
        }
        $closedtskmile = array();
        $tottskmile = array();
        if (count($mstIds) > 0) {
            $totmiles =  $this->Milestone->query("SELECT EasycaseMilestone.milestone_id,COUNT(Easycase.id) as totcase FROM easycase_milestones AS EasycaseMilestone LEFT JOIN easycases as Easycase ON   EasycaseMilestone.easycase_id=Easycase.id WHERE Easycase.istype='1' AND Easycase.isactive='1' AND " . $clt_sql . $restrictedQuery. " AND EasycaseMilestone.milestone_id IN (" . implode(',', $mstIds) . ") GROUP BY  EasycaseMilestone.milestone_id");
            $closemiles =  $this->Milestone->query("SELECT EasycaseMilestone.milestone_id,COUNT(Easycase.id) as totcase FROM easycase_milestones AS EasycaseMilestone LEFT JOIN easycases as Easycase ON   EasycaseMilestone.easycase_id=Easycase.id WHERE Easycase.istype='1' AND Easycase.isactive='1' AND " . $clt_sql . $restrictedQuery. " AND Easycase.legend='3' AND EasycaseMilestone.milestone_id IN (" . implode(',', $mstIds) . ") GROUP BY  EasycaseMilestone.milestone_id");
            foreach ($closemiles as $k=>$v) {
                $closedtskmile[$v['EasycaseMilestone']['milestone_id']] = $v[0]['totcase'];
            }
            foreach ($totmiles as $k=>$v) {
                $tottskmile[$v['EasycaseMilestone']['milestone_id']] = $v[0]['totcase'];
            }
        }
        ######### Filete with Milestone ##########
        if ($milestoneUid) {
            //$mlist = $this->Milestone->find('first',array('conditions'=>array('Milestone.uniq_id'=>$milestoneUid),'fields'=>'Milestone.id,Milestone.title'));
            $mls = $this->Milestone->query("SELECT `Milestone`.`id`,`Milestone`.`title`,`Milestone`.`project_id`,`Milestone`.`end_date`,`Milestone`.`uniq_id`,`Milestone`.`isactive`,`Milestone`.`user_id`,COUNT(c.easycase_id) AS totalcases,GROUP_CONCAT(c.easycase_id) AS `caseids`  FROM milestones AS `Milestone` LEFT JOIN easycase_milestones AS c ON Milestone.id = c.milestone_id WHERE `Milestone`.`uniq_id` ='" . $milestoneUid . "'  AND `Milestone`.`company_id` = " . SES_COMP);
            if (!$mls[0]['Milestone']['id']) {
                $mls_cases = $this->Milestone->query("select uniq_id from milestones where id = (select milestone_id from easycase_milestones where easycase_id =(select id from easycases where uniq_id = '" . $milestoneUid . "' and istype=1))");
                $milestoneUid = $mls_cases[0]['milestones']['uniq_id'];
                $mls = $this->Milestone->query("SELECT `Milestone`.`id`,`Milestone`.`title`,`Milestone`.`project_id`,`Milestone`.`end_date`,`Milestone`.`uniq_id`,`Milestone`.`isactive`,`Milestone`.`user_id`,COUNT(c.easycase_id) AS totalcases,GROUP_CONCAT(c.easycase_id) AS `caseids`  FROM milestones AS `Milestone` LEFT JOIN easycase_milestones AS c ON Milestone.id = c.milestone_id WHERE `Milestone`.`uniq_id` ='" . $mls_cases[0]['milestones']['uniq_id'] . "'  AND `Milestone`.`company_id` = " . SES_COMP);
            }

            $resCaseProj['mlstTitle'] = $mls[0]['Milestone']['title'];
            $resCaseProj['mlstId'] = $mls[0]['Milestone']['id'];
            $resCaseProj['mlstUid'] = $milestoneUid;
            $resCaseProj['mlstProjId'] = $mls[0]['Milestone']['project_id'];
            $resCaseProj['mlsttotalCs'] = $mls[0][0]['totalcases'];
            $resCaseProj['mlsttype'] = $mls[0]['Milestone']['isactive'];

            $curCreated = $tz->GetDateTime(SES_TIMEZONE, TZ_GMT, TZ_DST, TZ_CODE, GMT_DATETIME, "datetime");
            $curTime = date('H:i:s', strtotime($curCreated));

            $closed_cases = $this->Milestone->query("SELECT EasycaseMilestone.milestone_id,COUNT(Easycase.id) as totcase FROM easycase_milestones AS EasycaseMilestone LEFT JOIN easycases as Easycase ON   EasycaseMilestone.easycase_id=Easycase.id WHERE Easycase.istype='1' AND Easycase.isactive='1' AND Easycase.legend='3' ". $restrictedQuery." AND EasycaseMilestone.milestone_id='" . $mls[0]['Milestone']['id'] . "'  GROUP BY  EasycaseMilestone.milestone_id");
            $tot_closed_case = $closed_cases[0][0]['totcase'];

            $endDate = $mls[0]['Milestone']['end_date'] . " " . $curTime;
            $days = $dt->dateDiff($endDate, $curCreated);
            $mlstDT = '';
            if (trim($mls[0]['Milestone']['end_date']) != '0000-00-00') {
                $mlstDT = $dt->dateFormatOutputdateTime_day($mls[0]['Milestone']['end_date'], GMT_DATETIME, 'week');
            }
            $totalCs = $mls[0][0]['totalcases'];
            $totalClosedCs = 0;
            if ($tot_closed_case) {
                $totalClosedCs = $tot_closed_case;
            }
            $fill = 0;
            if ($totalClosedCs != 0) {
                $fill = round((($totalClosedCs / $totalCs) * 100));
            }

            $resCaseProj['intEndDate'] = strtotime($endDate);
            $resCaseProj['mlstdays_diff'] = $days;
            $resCaseProj['mlstDT'] = $mlstDT;
            $resCaseProj['mlstFill'] = $fill;
            $resCaseProj['totalClosedCs'] = $totalClosedCs;
            $resCaseProj['totalCs'] = $totalCs;

            $qry .=' AND EasycaseMilestone.milestone_id=' . $mls[0]['Milestone']['id'];
            $qry_sub .=' AND EasycaseMilestone.milestone_id=' . $mls[0]['Milestone']['id'];
        //$resCaseProj['mlstTitle'] = $mlist['Milestone']['title'];
            //$resCaseProj['mlstId'] = $mlist['Milestone']['id'];
        } else {
            $qry = "";
            $resCaseProj['mlstTitle'] = '';
            $resCaseProj['mlstId'] = '';

            ######### Filter by CaseUniqId ##########
            if (trim($caseUrl)) {
                $qry.= " AND Easycase.uniq_id='" . $caseUrl . "'";
            }
            $is_def_status_enbled = 0;
            ######### Filter by Custom Status ##########
            if (trim($caseCustomStatus) && $caseCustomStatus != "all") {
                $is_def_status_enbled = 1;
                $filterenabled = 1;
                $qry.= " AND (";
                $qry.= $this->Format->customStatusFilter($caseCustomStatus, $projUniq, $caseStatus, 1);
                $stsLegArr = $caseCustomStatus . "-" . "";
                $expStsLeg = explode("-", $stsLegArr);
            }
            ######### Filter by Status ##########
            if (trim($caseStatus) && $caseStatus != "all") {
                $filterenabled = 1;
                if (!$is_def_status_enbled) {
                    $qry.= " AND (";
                } else {
                    $qry.= " OR ";
                }
                $qry.= $this->Format->statusFilter($caseStatus, '', 1);
                $qry .= ")";
                $stsLegArr = $caseStatus . "-" . "";
                $expStsLeg = explode("-", $stsLegArr);
                if (!in_array("upd", $expStsLeg)) {
                    $qry.= " AND Easycase.type_id !=10";
                }
            } else {
                if (trim($caseCustomStatus) && $caseCustomStatus != "all") {
                    $qry .= ")";
                }
            }
            /*######### Filter by Status ##########
            if ($caseStatus != "all") {
                $qry.= $this->Format->statusFilter($caseStatus);
                $stsLegArr = $caseStatus . "-" . "";
                $expStsLeg = explode("-", $stsLegArr);
                if (!in_array("upd", $expStsLeg)) {
                    $qry.= " AND Easycase.type_id !=10";
                }
            }

            ######### Filter by Custom Status ##########
            if (trim($caseCustomStatus) && $caseCustomStatus != "all") {
                $filterenabled = 1;
                $qry.= $this->Format->customStatusFilter($caseCustomStatus, $projUniq,$caseStatus);
                $stsLegArr = $caseCustomStatus . "-" . "";
                $expStsLeg = explode("-", $stsLegArr);
                        }*/
            ######### Filter by Case Types ##########
            if ($caseTypes && $caseTypes != "all") {
                $qry.= $this->Format->typeFilter($caseTypes);
            }
            ######### Filter by Case Label ##########
            if (trim($caseLabel) && $caseLabel != "all") {
                $qry.= $this->Format->labelFilter($caseLabel, $curProjId, SES_COMP, SES_TYPE, SES_ID);
            }
            ######### Filter by Priority ##########
            if ($priorityFil && $priorityFil != "all") {
                $qry.= $this->Format->priorityFilter($priorityFil, $caseTypes);
            }
            ######### Filter by Member ##########
            if ($caseUserId && $caseUserId != "all") {
                $qry.= $this->Format->memberFilter($caseUserId);
            }
            ######### Filter by Comments ##########
            if ($caseComment && $caseComment != "all") {
                $qry.= $this->Format->commentFilter($caseComment, $curProjId, $case_date);
            }
            ######### Filter by Comments ##########
            if ($caseTaskgroup && $caseTaskgroup != "all") {
                $qryTasgroup.= $this->Format->taskgroupFilter($caseTaskgroup);
            }
            ######### Filter by AssignTo ##########
            if ($caseAssignTo && $caseAssignTo != "all") {
                $qry.= $this->Format->assigntoFilter($caseAssignTo);
            }

            ######### Search by KeyWord ##########
            $searchcase = "";
            if (trim(urldecode($caseSrch)) && (trim($case_srch) == "")) {
                $searchcase = $this->Format->caseKeywordSearch($caseSrch, 'full');
            }
            if (trim(urldecode($case_srch)) != "") {
                $searchcase = "AND (Easycase.case_no = '$case_srch')";
            }

            if (trim(urldecode($caseSrch))) {
                if ((substr($caseSrch, 0, 1)) == '#') {
                    $tmp = explode("#", $caseSrch);
                    $casno = trim($tmp['1']);
                    $searchcase = " AND (Easycase.case_no = '" . $casno . "')";
                }
            }
            $cond_easycase_actuve = "";
            if ((isset($case_srch) && !empty($case_srch)) || isset($caseSrch) && !empty($caseSrch)) {
                $cond_easycase_actuve = "";
            } else {
                $cond_easycase_actuve = "AND Easycase.isactive=1";
            }
            if (trim($case_date) != "") {
                $frmTz = '+00:00';
                $toTz = $this->Tmzone->getGmtTz(TZ_GMT, TZ_DST);
                $GMT_DATE =$this->Tmzone->GetDateTime(SES_TIMEZONE, TZ_GMT, TZ_DST, TZ_CODE, GMT_DATETIME, "datetime");
                
                if (trim($case_date) == 'one') {
                    $one_date = date('Y-m-d H:i:s', strtotime($GMT_DATE) - 3600);
                    $qry.= " AND CONVERT_TZ(Easycase.dt_created,'".$frmTz."','".$toTz."') >='" . $one_date . "'";
                } elseif (trim($case_date) == '24') {
                    $day_date = date("Y-m-d H:i:s", strtotime($GMT_DATE. " -1 day"));
                    $qry.= " AND CONVERT_TZ(Easycase.dt_created,'".$frmTz."','".$toTz."') >='" . $day_date . "'";
                } elseif (trim($case_date) == 'week') {
                    $week_date = date("Y-m-d H:i:s", strtotime($GMT_DATE . " -1 week"));
                    $qry.= " AND CONVERT_TZ(Easycase.dt_created,'".$frmTz."','".$toTz."') >='" . $week_date . "'";
                } elseif (trim($case_date) == 'month') {
                    $month_date = date("Y-m-d H:i:s", strtotime($GMT_DATE . " -1 month"));
                    $qry.= " AND CONVERT_TZ(Easycase.dt_created,'".$frmTz."','".$toTz."') >='" . $month_date . "'";
                } elseif (trim($case_date) == 'year') {
                    $year_date = date("Y-m-d H:i:s", strtotime($GMT_DATE . " -1 year"));
                    $qry.= " AND CONVERT_TZ(Easycase.dt_created,'".$frmTz."','".$toTz."') >='" . $year_date . "'";
                } elseif (strstr(trim($case_date), ":")) {
                    $ar_dt = explode(":", trim($case_date));
                    $frm_dt = $ar_dt['0'];
                    $to_dt = $ar_dt['1'];
                    //$qry.= " AND DATE(Easycase.dt_created) >= '" . date('Y-m-d H:i:s', strtotime($frm_dt)) . "' AND DATE(Easycase.dt_created) <= '" . date('Y-m-d H:i:s', strtotime($to_dt)) . "'";
                    $qry.= " AND DATE(CONVERT_TZ(Easycase.dt_created,'".$frmTz."','".$toTz."')) >= '" . date('Y-m-d', strtotime($frm_dt)) . "' AND DATE(CONVERT_TZ(Easycase.dt_created,'".$frmTz."','".$toTz."')) <= '" . date('Y-m-d', strtotime($to_dt)) . "'";
                }
            }
            if (trim($case_duedate) != "") {
                $frmTz = '+00:00';
                $toTz = $this->Tmzone->getGmtTz(TZ_GMT, TZ_DST);
                $GMT_DATE =$this->Tmzone->GetDateTime(SES_TIMEZONE, TZ_GMT, TZ_DST, TZ_CODE, GMT_DATETIME, "date");
                if (trim($case_duedate) == '24') {
                    $day_date = date("Y-m-d H:i:s", strtotime(date("Y-m-d H:i:s", strtotime(date("Y-m-d H:i:s"))) . " +1 day"));
                    $qry.= " AND (DATE(CONVERT_TZ(Easycase.due_date,'".$frmTz."','".$toTz."')) ='" . $GMT_DATE . "')";
                } elseif (trim($case_duedate) == 'overdue') {
                    $week_date = date("Y-m-d H:i:s", strtotime(date("Y-m-d H:i:s", strtotime(date("Y-m-d H:i:s"))) . " +1 week"));
                    $qry .= " AND ( DATE(CONVERT_TZ(Easycase.due_date,'".$frmTz."','".$toTz."')) <'" . $GMT_DATE . "') AND (Easycase.legend =1 || Easycase.legend=2) ";
                } elseif (strstr(trim($case_duedate), ":")) {
                    $ar_dt = explode(":", trim($case_duedate));
                    $frm_dt = $ar_dt['0'];
                    $to_dt = $ar_dt['1'];
                    $qry.= " AND DATE(CONVERT_TZ(Easycase.due_date,'".$frmTz."','".$toTz."')) >= '" . date('Y-m-d', strtotime($frm_dt)) . "' AND DATE(CONVERT_TZ(Easycase.due_date,'".$frmTz."','".$toTz."')) <= '" . date('Y-m-d', strtotime($to_dt)) . "'";
                }
            }

            ######### Filter by Assign To ##########
            if ($caseMenuFilterskanban == "assigntome") {
                $qry.= " AND (Easycase.assign_to=" . SES_ID . ")";
            }
            ######### Filter by Delegate To ##########
            elseif ($caseMenuFilterskanban == "delegateto") {
                $qry.= " AND Easycase.assign_to!=0 AND Easycase.assign_to!=" . SES_ID . " AND Easycase.user_id=" . SES_ID;
            } elseif ($caseMenuFilterskanban == "closecase") {
                $qry.= " AND Easycase.legend='3' AND Easycase.type_id !='10'";
            } elseif ($caseMenuFilterskanban == "overdue") {
                $cur_dt = date('Y-m-d H:i:s', strtotime(GMT_DATETIME));
                $qry.= " AND Easycase.due_date !='' AND Easycase.due_date != '0000-00-00 00:00:00' AND Easycase.due_date !='1970-01-01 00:00:00' AND Easycase.due_date < '" . $cur_dt . "' AND (Easycase.legend !=3) ";
            } elseif ($caseMenuFilterskanban == "highpriority") {
                $qry.= " AND Easycase.priority ='0' ";
            } elseif ($caseMenuFilterskanban == "newwip") {
                $qry.= " AND (Easycase.legend='1' OR Easycase.legend='2')  AND Easycase.type_id !='10'";
            } elseif ($caseMenuFilterskanban == "openedtasks") {
                $qry.= " AND (Easycase.legend='1' OR Easycase.legend='2' OR Easycase.legend='5' OR Easycase.legend='4')  AND Easycase.type_id !='10'";
            } elseif ($caseMenuFilterskanban == "closedtasks") {
                $qry.= " AND Easycase.legend='3' AND Easycase.type_id !='10'";
            }
        }
        $msQuery1 = " ";

        $resCaseProj['page_limit'] = $page_limit;
        $resCaseProj['csPage'] = $casePage;
        $resCaseProj['caseUrl'] = $caseUrl;
        $resCaseProj['projUniq'] = $projUniq;
        $resCaseProj['csdt'] = $caseDate;
        $resCaseProj['csTtl'] = $caseTitle;
        $resCaseProj['csDuDt'] = $caseDueDate;
        $resCaseProj['csEstHrsSrt'] = $caseEstHours;
        $resCaseProj['csCrtdDt'] = $caseCreateDate;
        $resCaseProj['csNum'] = $caseNum;
        $resCaseProj['csLgndSrt'] = $caseLegendsort;
        $resCaseProj['csAtSrt'] = $caseAtsort;
        $resCaseProj['caseMenuFilters'] = $caseMenuFilters;
        $resCaseProj['morecontent'] = $morecontent;

        if ($projUniq) {
            //$this->Easycase->query('SET CHARACTER SET utf8');
            $page = $casePage;
            $newTask_limit = $this->data['newTask_limit'];
            $inProgressTask_limit = $this->data['inProgressTask_limit'];
            $resolvedTask_limit = $this->data['resolvedTask_limit'];
            $closedTask_limit = $this->data['closedTask_limit'];
            //$limit1 = $page*$page_limit-$page_limit;
            $limit2 = $page_limit;
            $lim2 = $kanbanTotalDisplay;
            $lim1 = $page * $lim2;
            $usrCndn = ' AND  project_id=Easycase.project_id ';
            if (SES_TYPE == 3) {
                $usrCndn = " AND user_id = " . SES_ID. ' AND  project_id=Easycase.project_id ';
            }
            if ($projUniq == 'all') {
                /*if (($morecontent && $morecontent == 'newTask') || !$morecontent) {
                    $caseAll['newTask'] = $this->Easycase->query("SELECT  Easycase.*,User.short_name,IF((Easycase.assign_to = 0 OR Easycase.assign_to =" . SES_ID . "),'Me',User.short_name) AS Assigned ,(SELECT sum(total_hours) as secds FROM log_times WHERE task_id = Easycase.id $usrCndn) AS spent_hrs FROM ( SELECT Easycase.* FROM easycases as Easycase LEFT JOIN easycase_milestones AS EasycaseMilestone ON Easycase.id= EasycaseMilestone.easycase_id WHERE Easycase.istype='1' AND Easycase.isactive=1  " . $cond_easycase_actuve . " AND Easycase.project_id!=0 AND Easycase.project_id IN (SELECT ProjectUser.project_id FROM project_users AS ProjectUser,projects as Project WHERE ProjectUser.user_id=" . SES_ID . " AND ProjectUser.project_id=Project.id AND Project.isactive='1' AND ProjectUser.company_id='" . SES_COMP . "') " . $searchcase . " " . trim($qry) . "  ORDER BY  Easycase.dt_created DESC) AS Easycase LEFT JOIN users User ON Easycase.assign_to=User.id WHERE Easycase.legend = 1 AND " . $clt_sql . " ORDER BY Easycase.dt_created DESC LIMIT $newTask_limit,$limit2");
                }
                if (($morecontent && $morecontent == 'inprogressTask') || !$morecontent) {
                    $caseAll['inprogressTask'] = $this->Easycase->query("SELECT  Easycase.*,User.short_name,IF((Easycase.assign_to = 0 OR Easycase.assign_to =" . SES_ID . "),'Me',User.short_name) AS Assigned,(SELECT sum(total_hours) as secds FROM log_times WHERE task_id = Easycase.id $usrCndn) AS spent_hrs FROM ( SELECT Easycase.* FROM easycases as Easycase LEFT JOIN easycase_milestones AS EasycaseMilestone ON Easycase.id= EasycaseMilestone.easycase_id WHERE Easycase.istype='1' AND Easycase.isactive=1  " . $cond_easycase_actuve . " AND Easycase.project_id!=0 AND Easycase.project_id IN (SELECT ProjectUser.project_id FROM project_users AS ProjectUser,projects as Project WHERE ProjectUser.user_id=" . SES_ID . " AND ProjectUser.project_id=Project.id AND Project.isactive='1' AND ProjectUser.company_id='" . SES_COMP . "') " . $searchcase . " " . trim($qry) . "  ORDER BY  Easycase.dt_created DESC) AS Easycase LEFT JOIN users User ON Easycase.assign_to=User.id WHERE Easycase.legend = 2 OR Easycase.legend = 4 AND " . $clt_sql . " ORDER BY Easycase.dt_created DESC LIMIT $inProgressTask_limit,$limit2");
                }
                if (($morecontent && $morecontent == 'resolvedTask') || !$morecontent) {
                    $caseAll['resolvedTask'] = $this->Easycase->query("SELECT  Easycase.*,User.short_name,IF((Easycase.assign_to = 0 OR Easycase.assign_to =" . SES_ID . "),'Me',User.short_name) AS Assigned,(SELECT sum(total_hours) as secds FROM log_times WHERE task_id = Easycase.id $usrCndn) AS spent_hrs FROM ( SELECT Easycase.* FROM easycases as Easycase LEFT JOIN easycase_milestones AS EasycaseMilestone ON Easycase.id= EasycaseMilestone.easycase_id WHERE Easycase.istype='1' AND Easycase.isactive=1  " . $cond_easycase_actuve . " AND Easycase.project_id!=0 AND Easycase.project_id IN (SELECT ProjectUser.project_id FROM project_users AS ProjectUser,projects as Project WHERE ProjectUser.user_id=" . SES_ID . " AND ProjectUser.project_id=Project.id AND Project.isactive='1' AND ProjectUser.company_id='" . SES_COMP . "') " . $searchcase . " " . trim($qry) . "  ORDER BY  Easycase.dt_created DESC) AS Easycase LEFT JOIN users User ON Easycase.assign_to=User.id WHERE Easycase.legend = 5 AND " . $clt_sql . " ORDER BY Easycase.dt_created DESC LIMIT $resolvedTask_limit,$limit2");
                }
                if (($morecontent && $morecontent == 'closedTask') || !$morecontent) {
                    $caseAll['closedTask'] = $this->Easycase->query("SELECT  Easycase.*,User.short_name,IF((Easycase.assign_to = 0 OR Easycase.assign_to =" . SES_ID . "),'Me',User.short_name) AS Assigned,(SELECT sum(total_hours) as secds FROM log_times WHERE task_id = Easycase.id $usrCndn) AS spent_hrs FROM ( SELECT Easycase.* FROM easycases as Easycase LEFT JOIN easycase_milestones AS EasycaseMilestone ON Easycase.id= EasycaseMilestone.easycase_id WHERE Easycase.istype='1' AND Easycase.isactive=1  " . $cond_easycase_actuve . " AND Easycase.project_id!=0 AND Easycase.project_id IN (SELECT ProjectUser.project_id FROM project_users AS ProjectUser,projects as Project WHERE ProjectUser.user_id=" . SES_ID . " AND ProjectUser.project_id=Project.id AND Project.isactive='1' AND ProjectUser.company_id='" . SES_COMP . "') " . $searchcase . " " . trim($qry) . "  ORDER BY  Easycase.dt_created DESC) AS Easycase LEFT JOIN users User ON Easycase.assign_to=User.id WHERE Easycase.legend = 3 AND " . $clt_sql . " ORDER BY Easycase.dt_created DESC LIMIT $closedTask_limit,$limit2");
                }*/
                
                $caseAll['allTask'] = $this->Easycase->query("SELECT Easycase.*,User.short_name,IF((Easycase.assign_to = 0 OR Easycase.assign_to =" . SES_ID . "),'Me',User.short_name) AS Assigned,(SELECT sum(total_hours) as secds FROM log_times WHERE task_id = Easycase.id $usrCndn) AS spent_hrs FROM ( SELECT Easycase.id,Easycase.uniq_id,Easycase.case_no,Easycase.case_count,Easycase.project_id,Easycase.user_id,Easycase.updated_by,Easycase.type_id,Easycase.priority,Easycase.title,Easycase.estimated_hours,Easycase.hours,Easycase.completed_task,Easycase.assign_to,Easycase.gantt_start_date,Easycase.due_date,Easycase.istype,Easycase.client_status,Easycase.format,Easycase.status,Easycase.legend,Easycase.is_recurring,Easycase.isactive,Easycase.dt_created,Easycase.actual_dt_created,Easycase.reply_type,Easycase.is_chrome_extension,Easycase.from_email,Easycase.depends,Easycase.children,Easycase.temp_est_hours,Easycase.seq_id,Easycase.parent_task_id,Easycase.story_point,Easycase.thread_count,Easycase.custom_status_id,if(Easycase.custom_status_id=0,Easycase.legend, Easycase.custom_status_id) as custom_legend,EasycaseMilestone.milestone_id as milestone_id FROM easycases as Easycase LEFT JOIN easycase_milestones AS EasycaseMilestone ON Easycase.id= EasycaseMilestone.easycase_id WHERE istype='1' AND Easycase.isactive=1 " . $cond_easycase_actuve . " AND Easycase.project_id IN (SELECT ProjectUser.project_id FROM project_users AS ProjectUser,projects as Project WHERE ProjectUser.user_id=" . SES_ID . " AND ProjectUser.project_id=Project.id AND Project.isactive='1' AND ProjectUser.company_id='" . SES_COMP . "') AND Easycase.project_id!=0  AND Easycase.title LIKE '%$search_key%' " . $searchcase . " " . trim($qry) . " ) AS Easycase LEFT JOIN users User ON Easycase.assign_to=User.id WHERE 1 AND " . $clt_sql. $restrictedQuery . " ORDER BY Easycase.custom_legend ASC,Easycase.seq_id ASC,Easycase.dt_created DESC");
                
                $allCSByProj = $this->Format->getStatusByProject('all');
            } else {
                /*$caseAll['newTask'] = $this->Easycase->query("SELECT Easycase.*,User.short_name,IF((Easycase.assign_to = 0 OR Easycase.assign_to =" . SES_ID . "),'Me',User.short_name) AS Assigned,(SELECT sum(total_hours) as secds FROM log_times WHERE task_id = Easycase.id $usrCndn) AS spent_hrs FROM ( SELECT Easycase.* FROM easycases as Easycase LEFT JOIN easycase_milestones AS EasycaseMilestone ON Easycase.id= EasycaseMilestone.easycase_id WHERE istype='1' AND Easycase.isactive=1 " . $cond_easycase_actuve . " AND Easycase.project_id='$curProjId' AND Easycase.project_id!=0  AND Easycase.title LIKE '%$search_key%' " . $searchcase . " " . trim($qry) . " ) AS Easycase LEFT JOIN users User ON Easycase.assign_to=User.id WHERE Easycase.legend = 1 AND " . $clt_sql . " ORDER BY Easycase.seq_id ASC,Easycase.dt_created DESC LIMIT $newTask_limit,$limit2");
                pr($caseAll);*/
                
                $kfields = "Easycase.id,Easycase.uniq_id,Easycase.case_no,Easycase.case_count,Easycase.project_id,Easycase.user_id,Easycase.updated_by,Easycase.type_id,Easycase.priority,Easycase.title,Easycase.estimated_hours,Easycase.hours,Easycase.completed_task,Easycase.assign_to,Easycase.gantt_start_date,Easycase.due_date,Easycase.istype,Easycase.client_status,Easycase.format,Easycase.status,Easycase.legend,Easycase.is_recurring,Easycase.isactive,Easycase.dt_created,Easycase.actual_dt_created,Easycase.reply_type,Easycase.is_chrome_extension,Easycase.from_email,Easycase.depends,Easycase.children,Easycase.temp_est_hours,Easycase.seq_id,Easycase.parent_task_id,Easycase.story_point,Easycase.thread_count,Easycase.custom_status_id,if(Easycase.custom_status_id=0,Easycase.legend, Easycase.custom_status_id) as custom_legend,EasycaseMilestone.milestone_id as milestone_id";
                
              
                if (!empty($morecontent)) {
                    if (isset($this->data['getcount']) && $this->data['getcount']==1) {
                        $kanbanQuery = "SELECT Count(Easycase.id) AS cnt,IF(Easycase.custom_status_id = 0, Easycase.legend, 
               Easycase.custom_status_id) AS custom_legend 
        FROM   easycases AS Easycase LEFT JOIN easycase_milestones AS EasycaseMilestone ON Easycase.id= EasycaseMilestone.easycase_id
        WHERE istype='1' AND Easycase.isactive=1 " . $cond_easycase_actuve . " AND Easycase.project_id='$curProjId' AND Easycase.project_id!=0  AND Easycase.title LIKE '%$search_key%' " . $searchcase ." ".$qryTasgroup . " " . trim($qry) . " AND IF(Easycase.custom_status_id = 0, Easycase.legend, 
               Easycase.custom_status_id) = '$morecontent'  AND " . $clt_sql. $restrictedQuery . " GROUP BY custom_legend";
                    } else {
                        $kanbanQuery = "SELECT Easycase.*,User.short_name,IF((Easycase.assign_to = 0 OR Easycase.assign_to =" . SES_ID . "),'Me',User.short_name) AS Assigned,(SELECT parent_task_id from easycases where id=Easycase.parent_task_id AND Easycase.project_id='$curProjId' AND Easycase.project_id!=0) AS is_sub_sub_task,(SELECT count(parent_task_id) from easycases as E1 where E1.parent_task_id IN (SELECT id from easycases as E2 where E2.parent_task_id = Easycase.id AND Easycase.project_id='$curProjId' AND Easycase.project_id!=0) AND E1.project_id!=0 AND E1.project_id='$curProjId') AS sub_sub_task, (SELECT sum(total_hours) as secds FROM log_times WHERE task_id = Easycase.id $usrCndn) AS spent_hrs FROM ( SELECT $kfields FROM easycases as Easycase LEFT JOIN easycase_milestones AS EasycaseMilestone ON Easycase.id= EasycaseMilestone.easycase_id 
                    $groupConcatCustomQuery  WHERE istype='1' AND Easycase.isactive=1 " . $cond_easycase_actuve . " AND Easycase.project_id='$curProjId' AND Easycase.project_id!=0  AND Easycase.title LIKE '%$search_key%' " . $searchcase ." ".$qryTasgroup ." " . trim($qry) . " ) AS Easycase LEFT JOIN users User ON Easycase.assign_to=User.id WHERE 1 AND Easycase.custom_legend = '$morecontent' AND " . $clt_sql. $restrictedQuery . " ORDER BY Easycase.custom_legend ASC,Easycase.seq_id ASC,Easycase.dt_created DESC LIMIT $lim1,$lim2";
                    }
                   
                    $caseAll['allTask'] = $this->Easycase->query($kanbanQuery);
                } else {
                    if (isset($this->data['getcount']) && $this->data['getcount']==1) {
                        $kanbanQuery = "SELECT Count(Easycase.id) AS cnt,IF(Easycase.custom_status_id = 0, IF(Easycase.legend=4, 2, Easycase.legend), 
               Easycase.custom_status_id) AS custom_legend 
        FROM   easycases AS Easycase LEFT JOIN easycase_milestones AS EasycaseMilestone ON Easycase.id= EasycaseMilestone.easycase_id 
        WHERE  istype='1' AND Easycase.isactive=1 " . $cond_easycase_actuve . " AND Easycase.project_id='$curProjId' AND Easycase.project_id!=0  AND Easycase.title LIKE '%$search_key%' " . $searchcase ." ".$qryTasgroup. " " . trim($qry) ." AND " . $clt_sql. $restrictedQuery . " GROUP BY custom_legend";
                        $caseAll['allTask'] = $this->Easycase->query($kanbanQuery);
                    } else {

                /*$groupConcatCustomQuery = " INNER JOIN (SELECT easycases.id,substring_index(GROUP_CONCAT(easycases.id ORDER BY easycases.seq_id ASC, easycases.dt_created DESC ),',',$kanbanTotalDisplay) grouped_legend FROM easycases LEFT JOIN easycase_milestones AS em ON easycases.id= em.easycase_id WHERE  easycases.istype = '1' AND easycases.isactive = 1 AND easycases.project_id = '$curProjId' AND easycases.project_id != 0  AND easycases.title LIKE '%$search_key%' " . str_replace('Easycase', 'easycases', $searchcase) ." ".str_replace('EasycaseMilestone','em',$qryTasgroup). " " . str_replace('Easycase', 'easycases',str_replace(trim($qry_sub),'',trim($qry))) . " GROUP BY IF(easycases.custom_status_id = 0, easycases.legend,easycases.custom_status_id)) group_max ON FIND_IN_SET(Easycase.id, grouped_legend) "; */

                        $groupConcatCustomQuery ="";
                        $allCustom_legend = array();

                        $custmStatus = $this->Easycase->query("SELECT IF(Easycase.custom_status_id = 0, IF(Easycase.legend=4, 2, Easycase.legend), 
               Easycase.custom_status_id) AS custom_legend FROM easycases AS Easycase WHERE  istype='1' AND Easycase.isactive=1 AND Easycase.project_id='$curProjId' AND Easycase.project_id!=0 GROUP BY custom_legend");

                        $caseAll['allTask'] = array();
                        if (count($custmStatus) > 0) {
                            $allCustom_legend = Hash::extract($custmStatus, '{n}.{n}.custom_legend');

                            foreach ($allCustom_legend as $k=>$v) {
                                // $legend_specialCond = " CASE WHEN Easycase.legend=4 THEN Easycase.legend IN(2,4) ELSE Easycase.legend = $v END ";

                                // $customCondd = " AND CASE WHEN Easycase.custom_status_id=0 THEN $legend_specialCond ELSE Easycase.custom_status_id = $v END ";

                                $customCondd =" AND IF(Easycase.custom_status_id = 0, IF(Easycase.legend=4, 2, Easycase.legend), 
               Easycase.custom_status_id) = $v";

                                $kanbanQuery = "SELECT Easycase.*,User.short_name,IF((Easycase.assign_to = 0 OR Easycase.assign_to =" . SES_ID . "),'Me',User.short_name) AS Assigned,(SELECT parent_task_id from easycases where id=Easycase.parent_task_id AND Easycase.project_id='$curProjId' AND Easycase.project_id!=0) AS is_sub_sub_task,(SELECT count(parent_task_id) from easycases as E1 where E1.parent_task_id IN (SELECT id from easycases as E2 where E2.parent_task_id = Easycase.id AND Easycase.project_id='$curProjId' AND Easycase.project_id!=0) AND E1.project_id!=0 AND E1.project_id='$curProjId') AS sub_sub_task, (SELECT sum(total_hours) as secds FROM log_times WHERE task_id = Easycase.id $usrCndn) AS spent_hrs FROM ( SELECT $kfields FROM easycases as Easycase LEFT JOIN easycase_milestones AS EasycaseMilestone ON Easycase.id= EasycaseMilestone.easycase_id 
                $groupConcatCustomQuery  WHERE istype='1' AND Easycase.isactive=1 " . $cond_easycase_actuve . " AND Easycase.project_id='$curProjId' AND Easycase.project_id!=0 $customCondd AND Easycase.title LIKE '%$search_key%' " . $searchcase ." ".$qryTasgroup. " " . trim($qry) . ") AS Easycase LEFT JOIN users User ON Easycase.assign_to=User.id WHERE 1 AND " . $clt_sql. $restrictedQuery . " ORDER BY Easycase.custom_legend ASC,Easycase.seq_id ASC,Easycase.dt_created DESC LIMIT $kanbanTotalDisplay";
                                $cusdata = $this->Easycase->query($kanbanQuery);
                    
                   
                                if (count($cusdata) > 0) {
                                    $caseAll['allTask'] =  array_merge($caseAll['allTask'], $cusdata);
                                }
                            }
                        } else {
                            $kanbanQuery = "SELECT Easycase.*,User.short_name,IF((Easycase.assign_to = 0 OR Easycase.assign_to =" . SES_ID . "),'Me',User.short_name) AS Assigned,(SELECT parent_task_id from easycases where id=Easycase.parent_task_id AND Easycase.project_id='$curProjId' AND Easycase.project_id!=0) AS is_sub_sub_task,(SELECT count(parent_task_id) from easycases as E1 where E1.parent_task_id IN (SELECT id from easycases as E2 where E2.parent_task_id = Easycase.id AND Easycase.project_id='$curProjId' AND Easycase.project_id!=0) AND E1.project_id!=0 AND E1.project_id='$curProjId') AS sub_sub_task, (SELECT sum(total_hours) as secds FROM log_times WHERE task_id = Easycase.id $usrCndn) AS spent_hrs FROM ( SELECT $kfields FROM easycases as Easycase LEFT JOIN easycase_milestones AS EasycaseMilestone ON Easycase.id= EasycaseMilestone.easycase_id 
                $groupConcatCustomQuery  WHERE istype='1' AND Easycase.isactive=1 " . $cond_easycase_actuve . " AND Easycase.project_id='$curProjId' AND Easycase.project_id!=0  AND Easycase.title LIKE '%$search_key%' " . $searchcase ." ".$qryTasgroup. " " . trim($qry) . " ) AS Easycase LEFT JOIN users User ON Easycase.assign_to=User.id WHERE 1 AND " . $clt_sql. $restrictedQuery . " ORDER BY Easycase.custom_legend ASC,Easycase.seq_id ASC,Easycase.dt_created DESC";
                
                            $caseAll['allTask'] = $this->Easycase->query($kanbanQuery);
                        }
                    }
                

                
                    // pr($caseAll['allTask']);exit;
                }
                if (isset($this->data['getcount']) && $this->data['getcount']==1) {
                    foreach ($caseAll['allTask'] as $k=>$v) {
                        // if($v[0]['custom_legend'] == 4){

                        // }
                        $caseAll['allTask'][$k][0]['total_page'] = ceil($v[0]['cnt']/$kanbanTotalDisplay);
                    }
                    echo json_encode($caseAll);
                    exit;
                }
                
                $allCSByProj = $this->Format->getStatusByProject($curProjId);
                
                /*if (($morecontent && $morecontent == 'newTask') || !$morecontent) {
                    $caseAll['newTask'] = $this->Easycase->query("SELECT Easycase.*,User.short_name,IF((Easycase.assign_to = 0 OR Easycase.assign_to =" . SES_ID . "),'Me',User.short_name) AS Assigned,(SELECT sum(total_hours) as secds FROM log_times WHERE task_id = Easycase.id $usrCndn) AS spent_hrs FROM ( SELECT Easycase.* FROM easycases as Easycase LEFT JOIN easycase_milestones AS EasycaseMilestone ON Easycase.id= EasycaseMilestone.easycase_id WHERE istype='1' AND Easycase.isactive=1 " . $cond_easycase_actuve . " AND Easycase.project_id='$curProjId' AND Easycase.project_id!=0  AND Easycase.title LIKE '%$search_key%' " . $searchcase . " " . trim($qry) . " ) AS Easycase LEFT JOIN users User ON Easycase.assign_to=User.id WHERE Easycase.legend = 1 AND " . $clt_sql . " ORDER BY Easycase.seq_id ASC,Easycase.dt_created DESC LIMIT $newTask_limit,$limit2");
                }
                if (($morecontent && $morecontent == 'inprogressTask') || !$morecontent) {
                    $caseAll['inprogressTask'] = $this->Easycase->query("SELECT Easycase.*,User.short_name,IF((Easycase.assign_to = 0 OR Easycase.assign_to =" . SES_ID . "),'Me',User.short_name) AS Assigned,(SELECT sum(total_hours) as secds FROM log_times WHERE task_id = Easycase.id $usrCndn) AS spent_hrs FROM ( SELECT Easycase.* FROM easycases as Easycase LEFT JOIN easycase_milestones AS EasycaseMilestone ON Easycase.id= EasycaseMilestone.easycase_id WHERE istype='1' AND Easycase.isactive=1 " . $cond_easycase_actuve . " AND Easycase.project_id='$curProjId' AND Easycase.project_id!=0  AND Easycase.title LIKE '%$search_key%' " . $searchcase . " " . trim($qry) . " ) AS Easycase LEFT JOIN users User ON Easycase.assign_to=User.id WHERE (Easycase.legend = 2) OR (Easycase.legend = 4) AND " . $clt_sql . " ORDER BY Easycase.seq_id ASC,Easycase.dt_created DESC LIMIT $inProgressTask_limit,$limit2");
                }
                if (($morecontent && $morecontent == 'resolvedTask') || !$morecontent) {
                    $caseAll['resolvedTask'] = $this->Easycase->query("SELECT Easycase.*,User.short_name,IF((Easycase.assign_to = 0 OR Easycase.assign_to =" . SES_ID . "),'Me',User.short_name) AS Assigned,(SELECT sum(total_hours) as secds FROM log_times WHERE task_id = Easycase.id $usrCndn) AS spent_hrs FROM ( SELECT Easycase.* FROM easycases as Easycase LEFT JOIN easycase_milestones AS EasycaseMilestone ON Easycase.id= EasycaseMilestone.easycase_id WHERE istype='1' AND Easycase.isactive=1 " . $cond_easycase_actuve . " AND Easycase.project_id='$curProjId' AND Easycase.project_id!=0 AND Easycase.title LIKE '%$search_key%'  " . $searchcase . " " . trim($qry) . " ) AS Easycase LEFT JOIN users User ON Easycase.assign_to=User.id WHERE Easycase.legend = 5 AND " . $clt_sql . " ORDER BY Easycase.seq_id ASC,Easycase.dt_created DESC LIMIT $resolvedTask_limit,$limit2");
                }
                if (($morecontent && $morecontent == 'closedTask') || !$morecontent) {
                    $caseAll['closedTask'] = $this->Easycase->query("SELECT Easycase.*,User.short_name,IF((Easycase.assign_to = 0 OR Easycase.assign_to =" . SES_ID . "),'Me',User.short_name) AS Assigned,(SELECT sum(total_hours) as secds FROM log_times WHERE task_id = Easycase.id $usrCndn) AS spent_hrs FROM ( SELECT Easycase.* FROM easycases as Easycase LEFT JOIN easycase_milestones AS EasycaseMilestone ON Easycase.id= EasycaseMilestone.easycase_id WHERE istype='1' AND Easycase.isactive=1  " . $cond_easycase_actuve . " AND Easycase.project_id='$curProjId' AND Easycase.project_id!=0 AND Easycase.title LIKE '%$search_key%' " . $searchcase . " " . trim($qry) . " ) AS Easycase LEFT JOIN users User ON Easycase.assign_to=User.id WHERE Easycase.legend = 3 AND " . $clt_sql . " ORDER BY Easycase.seq_id ASC,Easycase.dt_created DESC LIMIT $closedTask_limit,$limit2");
                }*/
            }
            $msQ = "";

            if ($projUniq != 'all') {
                /*

                //Existing methods
                   $usrDtlsAll = $this->ProjectUser->query("SELECT DISTINCT User.id, User.name, User.email, User.istype,User.email,User.short_name,User.photo FROM users as User,easycases as Easycase WHERE (Easycase.user_id=User.id || Easycase.updated_by=User.id || Easycase.assign_to=User.id) AND Easycase.project_id='" . $curProjId . "' AND Easycase.isactive='1' AND " . $clt_sql. $restrictedQuery . " AND Easycase.istype IN('1','2') ORDER BY User.short_name");
                 */
            
                /* Optimized on 15.12.2020 by Tapan Sir */
                $usrDtlsAll = $this->ProjectUser->query("SELECT User.id, User.name, User.email, User.istype,User.email,User.short_name,User.photo FROM users as User,easycases as Easycase WHERE Easycase.user_id=User.id  AND Easycase.project_id='" . $curProjId . "' AND Easycase.isactive='1' AND " . $clt_sql. $restrictedQuery . " AND Easycase.istype IN('1','2') union SELECT User.id, User.name, User.email, User.istype,User.email,User.short_name,User.photo FROM users as User,easycases as Easycase WHERE Easycase.updated_by=User.id  AND Easycase.project_id='" . $curProjId . "' AND Easycase.isactive='1' AND " . $clt_sql. $restrictedQuery . " AND Easycase.istype IN('1','2') union SELECT User.id, User.name, User.email, User.istype,User.email,User.short_name,User.photo FROM users as User,easycases as Easycase WHERE Easycase.assign_to=User.id  AND Easycase.project_id='" . $curProjId . "' AND Easycase.isactive='1' AND " . $clt_sql. $restrictedQuery . " AND Easycase.istype IN('1','2') ");
            } else {
                //need to modify
                $usrDtlsAll = $this->ProjectUser->query("SELECT DISTINCT User.id, User.name, User.email, User.istype,User.email,User.short_name,User.photo FROM users as User,easycases as Easycase WHERE (Easycase.user_id=User.id || Easycase.updated_by=User.id || Easycase.assign_to=User.id) AND Easycase.project_id IN (SELECT ProjectUser.project_id FROM project_users AS ProjectUser,projects as Project WHERE ProjectUser.user_id=" . SES_ID . " AND ProjectUser.project_id=Project.id AND Project.isactive='1' AND ProjectUser.company_id='" . SES_COMP . "') AND Easycase.isactive='1' AND " . $clt_sql. $restrictedQuery . " AND Easycase.istype IN('1','2') ORDER BY User.short_name");
            }
            $usrDtlsArr = array();
            $usrDtlsPrj = array();
            foreach ($usrDtlsAll as $ud) {
                if (isset($ud[0])) {
                    $usrDtlsArr[$ud[0]['id']]['User'] = $ud[0];
                } else {
                    $usrDtlsArr[$ud['User']['id']] = $ud;
                }
            }
        } else {
            $CaseCount = 0;
        }
        $resCaseProj['caseCount'] = $CaseCount;
        $frmtCaseAll = array();
        $customStatusByProject = array();
        if (isset($allCSByProj)) {
            foreach ($allCSByProj as $k=>$v) {
                if (isset($v['StatusGroup']['CustomStatus'])) {
                    $customStatusByProject[$v['Project']['id']] = $v['StatusGroup']['CustomStatus'];
                }
            }
        }
        $resCaseProj['customStatusByProject'] = $customStatusByProject;
        if (isset($caseAll) && !empty($caseAll)) {
            $related_tasks = array();
            if (is_array($caseAll) && count($caseAll) > 0) {
                //$parent_task_id = array_filter(Hash::combine($caseAll, '{s}.{n}.Easycase.id', '{s}.{n}.Easycase.parent_task_id'));
                //$related_tasks = !empty($parent_task_id) ? $this->Easycase->getSubTasks($parent_task_id) : array();
                $related_tasks = array();

                //$taskIds = Hash::extract($caseAll, '{s}.{n}.Easycase.id');
                $dependency = array();
                /*if (is_array($taskIds) && count($taskIds) > 0) {
                    $this->loadModel('EasycaseLink');
                    $links = $this->EasycaseLink->find('all', array('conditions' => array('OR' => array('EasycaseLink.source' => $taskIds, 'EasycaseLink.target' => $taskIds))));
                    if (is_array($links) && count($links) > 0) {
                        foreach ($links as $link) {
                            $dependency['children'][$link['EasycaseLink']['source']][] = $link['EasycaseLink']['target'];
                            $dependency['depends'][$link['EasycaseLink']['target']][] = $link['EasycaseLink']['source'];
                        }
                    }
                }*/
            }
            $frmtCaseAll = $this->Easycase->formatKanbanTask($caseAll, $CaseCount, $caseMenuFilters, $c, $m, $projUniq, $usrDtlsArr, $frmt, $dt, $tz, $cq, $dependency);
        }
        $act_milstone = 0;
        $inact_milstone = 0;
        if ($projUniq) {
            if ($projUniq != 'all') {
                $minstcnt = $this->Milestone->query('SELECT COUNT(*) AS `count`,Milestone.isactive FROM `milestones` AS `Milestone`  WHERE `Milestone`.`project_id` = ' . $curProjId . ' AND `Milestone`.`company_id` = ' . SES_COMP . ' GROUP BY `Milestone`.`isactive`');
                $clt_sql = "";
                if ($this->Auth->user('is_client') == 1) {
                    $clt_sql = " AND ((Easycase.client_status = " . $this->Auth->user('is_client') . " AND Easycase.user_id = " . $this->Auth->user('id') . ") OR Easycase.client_status != " . $this->Auth->user('is_client') . ") ";
                }
                $cntdefaulttaskgroup = $this->Easycase->query("SELECT COUNT(*) AS count FROM easycases AS Easycase LEFT JOIN  easycase_milestones AS EasycaseMilestone ON EasycaseMilestone.easycase_id= Easycase.id WHERE `Easycase`.`project_id` = $curProjId AND `Easycase`.`istype` = 1 AND `Easycase`.`isactive` = 1 AND EasycaseMilestone.id IS NULL $clt_sql $restrictedQuery");
                if ($minstcnt) {
                    foreach ($minstcnt as $k => $v) {
                        if (count($minstcnt) == 2) {
                            if ($v['Milestone']['isactive'] == 1) {
                                $act_milstone = $v[0]['count'];
                            }
                            if ($v['Milestone']['isactive'] == 0) {
                                $inact_milstone = $v[0]['count'];
                            }
                        } else {
                            if ($v['Milestone']['isactive'] == 1) {
                                $act_milstone = $v[0]['count'];
                            } else {
                                $inact_milstone = $v[0]['count'];
                            }
                        }
                    }
                }
                if ($cntdefaulttaskgroup[0][0]['count'] >0) {
                    $act_milstone = $act_milstone +1;
                }
            }
        }

        $dynamic_sts_arr = array('kanban_board_1'=>_('New'),'kanban_board_2'=>_('In Progress'),'kanban_board_5'=>_('Resolved'),'kanban_board_3'=>_('Closed'));
        if ($curProjStsGroup) {
            $sts_arr = $this->Format->getCustomTaskStatus($curProjStsGroup);
            if ($sts_arr) {
                $dynamic_sts_arr = $this->Format->preprCustomKanban($sts_arr, 'kanban_board_');
            }
        } elseif ($projUniq == 'all') {
            $sts_arr = $this->Format->getCustomTaskStatus(-1);
            if ($sts_arr) {
                $dynamic_sts_arr = $this->Format->preprCustomKanban($sts_arr, 'kanban_board_');
            }
        }
        $resCaseProj['dynamic_sts_arr'] = $dynamic_sts_arr;
        #pr($allCSByProj);
        #pr($frmtCaseAll);exit;
        $this->loadModel('EasycaseMilestone');
        if (isset($frmtCaseAll) && !empty($frmtCaseAll)) {
            $all_task_ids = array_unique(array_filter(Hash::extract($frmtCaseAll, '{s}.{n}.Easycase.id')));
            $all_proj_ids = array_unique(array_filter(Hash::extract($allCSByProj, '{n}.Project.id')));
            
            $EasycaseFavourite = ClassRegistry::init('EasycaseFavourite');
            //$favouriteconditions = array('EasycaseFavourite.easycase_id'=>$all_task_ids,'EasycaseFavourite.project_id'=>$all_proj_ids,'EasycaseFavourite.company_id'=>SES_COMP,'EasycaseFavourite.user_id'=>SES_ID);
            $favouriteconditions = array('EasycaseFavourite.project_id'=>$all_proj_ids,'EasycaseFavourite.company_id'=>SES_COMP,'EasycaseFavourite.user_id'=>SES_ID);
            $easycase_favourite = $EasycaseFavourite->find('list', array('fields'=>array('EasycaseFavourite.easycase_id','EasycaseFavourite.id'),'conditions'=>$favouriteconditions));
            if ($easycase_favourite) {
                foreach ($frmtCaseAll as $key => $value) {
                    foreach ($value as $key1 => $value1) {
                        if (!empty($easycase_favourite[$value1['Easycase']['id']])) {
                            $frmtCaseAll[$key][$key1]['Easycase']['isFavourite'] = 1;
                            $frmtCaseAll[$key][$key1]['Easycase']['favouriteColor'] = '#FFDC77';
                        } else {
                            $frmtCaseAll[$key][$key1]['Easycase']['isFavourite'] = 0;
                            $frmtCaseAll[$key][$key1]['Easycase']['favouriteColor'] = '#888888';
                        }
                    }
                }
            }
        }
        $resCaseProj['caseAll'] = $frmtCaseAll;

        $ParenttaskIds = array();
        $resCaseProj['task_parent_ids'] = $ParenttaskIds;
        $resCaseProj['newTask_limit'] = isset($frmtCaseAll['newTask']) ? (count($frmtCaseAll['newTask']) + $newTask_limit) : $newTask_limit;
        $resCaseProj['inProgressTask_limit'] = isset($frmtCaseAll['inprogressTask']) ? (count($frmtCaseAll['inprogressTask']) + $inProgressTask_limit) : $inProgressTask_limit;
        $resCaseProj['resolvedTask_limit'] = isset($frmtCaseAll['resolvedTask']) ? (count($frmtCaseAll['resolvedTask']) + $resolvedTask_limit) : $resolvedTask_limit;
        $resCaseProj['closedTask_limit'] = isset($frmtCaseAll['closedTask']) ? (count($frmtCaseAll['closedTask']) + $closedTask_limit) : $closedTask_limit;
        $curCreated = $tz->GetDateTime(SES_TIMEZONE, TZ_GMT, TZ_DST, TZ_CODE, GMT_DATETIME, "datetime");
        $friday = date('Y-m-d', strtotime($curCreated . "next Friday"));
        $monday = date('Y-m-d', strtotime($curCreated . "next Monday"));
        $tomorrow = date('Y-m-d', strtotime($curCreated . "+1 day"));

        $resCaseProj['intCurCreated'] = strtotime($curCreated);
        $resCaseProj['mdyCurCrtd'] = date('m/d/Y', strtotime($curCreated));
        $resCaseProj['mdyFriday'] = date('m/d/Y', strtotime($friday));
        $resCaseProj['mdyMonday'] = date('m/d/Y', strtotime($monday));
        $resCaseProj['mdyTomorrow'] = date('m/d/Y', strtotime($tomorrow));
        $resCaseProj['all_task_group'] = $allMilestones;
        $resCaseProj['all_closed'] = $closedtskmile;
        $resCaseProj['all_tot'] = $tottskmile;
        $resCaseProj['all_default'] = ($default_task_count[0][0]['total'])?$default_task_count[0][0]['total']:0;
        $resCaseProj['all_default_closed'] = ($default_task_close_count[0][0]['total'])?$default_task_close_count[0][0]['total']:0;
        $resCaseProj['all_task_cnt'] = ($all_task_count[0][0]['total'])?$all_task_count[0][0]['total']:0;
        $resCaseProj['all_task_cnt_closed'] = ($all_task_close_count[0][0]['total'])?$all_task_close_count[0][0]['total']:0;

        if ($projUniq != 'all') {
            $projUser = array();
            if ($projUniq) {
                $projUser = array($projUniq => $this->Easycase->getMemebers($projUniq));
            }
            $resCaseProj['projUser'] = $projUser;
        }
        #pr($resCaseProj);exit;
        $resCaseProj['inact_milstone'] = $inact_milstone;
        $resCaseProj['act_milstone'] = $act_milstone;
        $resCaseProj['related_tasks'] = $related_tasks;
        $resCaseProj['curProjStsGroup'] = $curProjStsGroup;

        if ($projUniq != 'all') {
            $ps = $this->Project->find('first', array('conditions'=>array('uniq_id'=>$projUniq),'fields'=>array('project_methodology_id')));
        }
        $resCaseProj['project_methodology_id'] = (isset($ps['Project']['project_methodology_id']) && !empty($ps['Project']['project_methodology_id']))?$ps['Project']['project_methodology_id']:1;
        //$db =ConnectionManager::getDataSource('default');
        // $db->showLog();exit;
        $this->set('kanbanTaskList', json_encode($resCaseProj));
    }

    /**
     * @method public ajax_startcase() Change the caselegend to inprogress
     * @author GDR <abc@mydomain.com>
     * @return json
     */
    public function taskactions()
    {
        $postdata = $this->data;
        $commonCaseId = $this->data['taskId'];
        /* dependency check */
        $deny_arr = array('close', 'start', 'resolve', 'cmpltsk');
        $allowed = in_array($this->data['type'], $deny_arr) ? $this->task_dependency($commonCaseId) : "Yes";
        $is_active= $this->Easycase->find('first', array('conditions'=>array('Easycase.id'=>$this->data['parent_task']), 'fields'=>array('Easycase.isactive')));
        $is_active = $is_active['Easycase']['isactive'];
        //$allowed = $this->task_dependency($commonCaseId);
        if ($allowed == 'No') {
            $response['err'] = 1;
            $response['msg'] = __('Dependant tasks are not closed.', true);
        } else {
            if ($this->data['type'] == 'close') {
                //on close of parent task close all children tasks
                $task_detail = $this->Easycase->find('first', array('conditions' => array('id' => $postdata['taskId']), 'fields' => array('project_id')));
                $child_tasks = $this->Easycase->getSubTaskChild($postdata['taskId'], $task_detail['Easycase']['project_id']);
                //closing parent task
                $response = $this->Easycase->actionOntask($postdata['taskId'], $postdata['taskUid'], $postdata['type']);
                //closing children tasks
                if (!empty($child_tasks['data'])) {
                    $is_resourceon = $this->Format->isResourceAvailabilityOn();
                    $response['checkParentids'] = array($postdata['taskId']);
                    foreach ($child_tasks['data'] as $case) {
                        if ($case['Easycase']['legend'] != '3') {
                            array_push($response['checkParentids'], $case['Easycase']['id']);
                            //$response = $this->Easycase->actionOntask($case['Easycase']['id'], $case['Easycase']['uniq_id'], $postdata['type']);
                            $allowed = in_array($this->data['type'], $deny_arr) ? $this->task_dependency($case['Easycase']['id']) : "Yes";
                            //$allowed = $this->task_dependency($case['Easycase']['id']);
                            if ($allowed != 'No') {
                                $this->Easycase->actionOntask($case['Easycase']['id'], $case['Easycase']['uniq_id'], $postdata['type']);
                                if ($is_resourceon) {
                                    $this->Format->delete_booked_hours(array('easycase_id' => $case['Easycase']['id'], 'project_id' => $task_detail['Easycase']['project_id']));
                                }
                            }
                        }
                    }
                }
            } else {
                //die('else');
                $response = $this->Easycase->actionOntask($postdata['taskId'], $postdata['taskUid'], $postdata['type']);
            }
            if ($this->data['type'] != "close" && $this->data['type'] != 'resolve') {
                $this->loadModel("Project");
                $this->loadModel("Milestone");
                $this->loadModel("EasycaseMilestone");
                $this->Project->recursive = -1;
                $projectsInfo =  $this->Project->find('first', array('conditions'=>array('Project.id'=>$response['data']['closeStsPid']),'fields'=>array('Project.project_methodology_id')));
                if ($projectsInfo['Project']['project_methodology_id'] ==2) {
                    $this->EasycaseMilestone->bindModel(array('belongsTo'=>array('Milestone')));
                    $this->EasycaseMilestone->recursive = 2;

                    $easy_mile = $this->EasycaseMilestone->find('first', array('conditions'=>array('EasycaseMilestone.easycase_id'=>$response['data']['caseStsId'],'EasycaseMilestone.project_id'=>$response['data']['closeStsPid'] ),'fields'=>array('EasycaseMilestone.id','Milestone.id','Milestone.is_started','Milestone.id','Milestone.isactive')));

                    if ($easy_mile['Milestone']['is_started'] == 1 && $easy_mile['Milestone']['isactive'] ==0) {
                        // $this->loadModel('SprintCompleteReport');
                        // $this->Easycase->recursive = -1;
                        // $easyDt = $this->Easycase->find('first',array('conditions'=>array('Easycase.id'=>$response['data']['caseStsId'])));
                        // $scr['SprintCompleteReport']['task_id'] = $response['data']['caseStsId'];
                        // $scr['SprintCompleteReport']['project_id'] = $response['data']['closeStsPid'];
                        // $scr['SprintCompleteReport']['milestone_id'] = $easy_mile['Milestone']['id'];
                        // $scr['SprintCompleteReport']['tasks_detail'] = json_encode($easyDt);
                        //if($this->SprintCompleteReport->save($scr)){
                        $this->EasycaseMilestone->id = $easy_mile['EasycaseMilestone']['id'];
                        $this->EasycaseMilestone->delete();
                        //}
                    }
                }
            }
            //Update issue in github
            $response['isAssignedUserFree'] = 1;
            if ($this->Format->isResourceAvailabilityOn()) {
                if ($response['succ'] == 1 && $this->data['type'] == "close") {
                    $this->Easycase->recurssive = -1;
                    $easycase = $this->Easycase->find('first', array('conditions' => array('Easycase.id' => $this->data['taskId']), 'field' => array('Easycase.project_id')));
                    $this->Format->delete_booked_hours(array('easycase_id' => $easycase['Easycase']['id'], 'project_id' => $easycase['Easycase']['project_id']));
                } else {
                    if ($response['prev_legend'] == 3) {
                        $postParam = $this->Easycase->find('first', array('conditions' => array('Easycase.id' => $this->data['taskId'])));
                        if ($postParam['Easycase']['gantt_start_date'] != '' && $postParam['Easycase']['assign_to'] != 0) {
                            $isAssignedUserFree = $this->Postcase->setBookedData($postParam, $postParam['Easycase']['estimated_hours'], $postParam['Easycase']['id'], SES_COMP);
                            $response['isAssignedUserFree'] = $isAssignedUserFree;
                            $postParam['Easycase']['gantt_start_date'] = $this->Tmzone->GetDateTime(SES_TIMEZONE, TZ_GMT, TZ_DST, TZ_CODE, $postParam['Easycase']['gantt_start_date'], "date");
                            $postParam['Easycase']['due_date'] = $this->Tmzone->GetDateTime(SES_TIMEZONE, TZ_GMT, TZ_DST, TZ_CODE, $postParam['Easycase']['due_date'], "date");
                            $response['task_details'] = $postParam;
                        }
                    }
                }
            }
            if (isset($this->data['link_task']) && $this->data['link_task'] ==1) {
                $response['link_parent'] = $this->data['parent_task'];
                $response['projUniqId'] = $this->data['projUniq'];
                $response['csProjIdRep'] = $this->data['projID'];
            }
            if ($response['pub_msg']) {
                if (!stristr(HTTP_ROOT, 'payzilla.in') && !stristr(HTTP_ROOT, 'orangegigs.com')) {
                    //$this->Postcase->iotoserver($response['pub_msg']);
                    $response['iotoserver'] = $response['pub_msg'];
                    if ($this->request->data['type'] != "priority") {
                    }
                }
            }
        }
        $response['parent_id'] = '';
        $response['is_inactive_case'] = 0;
        $get_parent_task = $this->Easycase->getParentTask($postdata['taskId']);
        if ($get_parent_task && !empty($get_parent_task['Easycase']['parent_task_id'])) {
            $response['parent_id'] = $get_parent_task['Easycase']['parent_task_id'];
        }
        $response['milestone_id'] = $this->Easycase->getMilestoneIds($postdata['taskId'], $response['project_id']);
        $response['is_active'] = $is_active;
        echo json_encode($response);
        exit;
    }

    public function getActionResponse()
    {
        $postdata = $this->data;
        $commonCaseId = $this->data['taskId'];
        $response = $this->Easycase->actionOntask($postdata['taskId'], $postdata['taskUid'], $postdata['type']);
        echo json_encode($response);
        exit;
    }
    /**
     * @method mydashboard
     * @author Sunil
     * @return html
     */
    public function mydashboard()
    {
        if (!empty($this->params->query('project_url'))) {
            $_SESSION['project_url'] = $this->params->query('project_url');
            $this->redirect("/mydashboard");
        }
        if (!empty($this->request->query['case_search'])) {
            $this->redirect('/dashboard?search=' . $this->request->query['case_search'] . '#tasks');
        }
        $dashboard_order = $GLOBALS['DASHBOARD_ORDER'];
        if ($_COOKIE['DASHBOARD_ORDER']) {
            $dashboard = explode("::", $_COOKIE['DASHBOARD_ORDER']);
            if (!empty($dashboard['0'])) {
                if (strpos($dashboard['0'], "_")) {
                    $info = explode("_", $dashboard['0']);
                    if (!empty($info) && ($info['0'] == SES_ID) && ($info['1'] == SES_COMP)) {
                        $order = explode(",", $dashboard['1']);
                        if (!empty($order) && !in_array('7', $order) && in_array('8', $order) && in_array('9', $order)) {
                            $cnt = 1;
                            unset($dashboard_order);
                            foreach ($order as $value) {
                                $dashboard_order[$cnt] = $GLOBALS['DASHBOARD_ORDER'][$value];
                                $cnt++;
                            }
                        }
                    }
                }
            }
        }
        $task_type = $GLOBALS['TYPE'];
        $this->set(compact('dashboard_order', 'task_type'));
        setcookie('DEFAULT_PAGE', 'mydashboard', COOKIE_REM, '/', DOMAIN_COOKIE, false, false);

        //Notify a new user logged in
        //$this->Postcase->iotoserverlogout(array('channel' => SES_COMP, 'userId' => SES_ID));

        if (SES_TYPE < 3) {
            $this->loadModel('Project');
            $this->Project->recursive = -1;
            $this->loadModel('LogTime');
            $this->loadModel('CompanyUser');
            $this->loadModel('CaseFile');
            $prjct_list = $this->Project->find('list', array('conditions' => array('Project.company_id' => SES_COMP, 'Project.isactive' => 1), 'fields' => array('Project.id', 'Project.name'), 'order' => 'Project.name ASC'));
            $prjcnt = $this->Project->find('all', array('conditions' => array('Project.company_id' => SES_COMP), 'fields' => array('Project.id')));
            $activeprjs = $this->Project->find('all', array('conditions' => array('Project.company_id' => SES_COMP, 'Project.isactive' => 1), 'fields' => array('Project.id')));
            $completedprjs = $this->Project->find('all', array('conditions' => array('Project.company_id' => SES_COMP, 'Project.isactive' => 2), 'fields' => array('Project.id')));
            $users = $this->CompanyUser->find('all', array('conditions' => array('CompanyUser.company_id' => SES_COMP, 'CompanyUser.is_active' => 1), 'fields' => array('CompanyUser.user_id')));
            $projectIds = Hash::extract($activeprjs, '{n}.Project.id');
            $usedspace = $this->CaseFile->getStorage();
            $clt_sql = "";
            if ($this->Auth->user('is_client') == 1) {
                $clt_sql = " AND ((Easycase.client_status = " . $this->Auth->user('is_client') . " AND Easycase.user_id = " . $this->Auth->user('id') . ") OR Easycase.client_status != " . $this->Auth->user('is_client') . ") ";
            }
            #$projQry = " AND LogTime.project_id IN (" . implode(',', $projectIds) . ")";
            /* find total billable and non-billable time */
            $projQry = " AND LogTime.project_id IN (SELECT ProjectUser.project_id FROM project_users AS ProjectUser,projects as Project WHERE ProjectUser.company_id=" . SES_COMP . " AND ProjectUser.project_id=Project.id AND Project.isactive='1') ";
            $count_sql = 'SELECT sum(total_hours) as secds '
                    . 'FROM log_times AS `LogTime` '
                    . "LEFT JOIN easycases AS Easycase ON Easycase.id=LogTime.task_id AND LogTime.project_id=Easycase.project_id "
                    . 'WHERE Easycase.isactive =1 ' . $projQry . ' ' . $clt_sql . '  ';
            #echo $count_sql;exit;
            $cntlog = $this->LogTime->query($count_sql);
            $totalhours = $cntlog[0][0]['secds'];

            $totalTasks_sql = "SELECT count(id) as total_tasks from easycases as Easycase where Easycase.isactive = 1 AND Easycase.istype = 1 AND Easycase.project_id IN (SELECT ProjectUser.project_id FROM project_users AS ProjectUser,projects as Project WHERE ProjectUser.company_id=" . SES_COMP . " AND ProjectUser.project_id=Project.id AND Project.isactive='1') " . $clt_sql . "";
            $total_tasks = $this->Easycase->query($totalTasks_sql);
            $closedTasks_sql = "SELECT count(id) as closed_tasks from easycases as Easycase where Easycase.isactive = 1 AND Easycase.istype = 1 AND Easycase.legend = 3 AND Easycase.project_id IN (SELECT ProjectUser.project_id FROM project_users AS ProjectUser,projects as Project WHERE ProjectUser.company_id=" . SES_COMP . " AND ProjectUser.project_id=Project.id AND Project.isactive='1') " . $clt_sql . "";
            $closed_tasks = $this->Easycase->query($closedTasks_sql);
            $dates = $this->Format->date_filter('last30days', $curDateTime);
            $last30dayscreatedprjs = $this->Project->find('all', array('conditions' => array('Project.company_id' => SES_COMP, "DATE(Project.dt_created) BETWEEN '" . $dates['strddt'] . "' AND '" . $dates['enddt'] . "' "), 'fields' => array('Project.id')));
            $this->set('prjcnt', count($prjcnt));
            $this->set('actvprjcnt', count($activeprjs));
            $this->set('cmpldprjcnt', count($completedprjs));
            $this->set('last30dayscreatedprjcnt', count($last30dayscreatedprjs));
            $this->set('usrcnt', count($users));
            $this->set('usedspace', $usedspace);
            $this->set('totalhours', $totalhours);
            $this->set('totaltasks', $total_tasks[0][0]['total_tasks']);
            $this->set('closedtasks', $closed_tasks[0][0]['closed_tasks']);
            $this->set('prjct_list', $prjct_list);
            $this->render('admin_mydashboard');
        } else {
            $clt_sql = "";
            if ($this->Auth->user('is_client') == 1) {
                $clt_sql = " AND ((Easycase.client_status = " . $this->Auth->user('is_client') . " AND Easycase.user_id = " . $this->Auth->user('id') . ") OR Easycase.client_status != " . $this->Auth->user('is_client') . ") ";
            }
            #$projQry = " AND LogTime.project_id IN (" . implode(',', $projectIds) . ")";
            /* find total billable and non-billable time */
            if (PROJ_UNIQ_ID != 'all') {
                $cond = "Project.uniq_id = '" . $project_uid . "' AND";
            }
            $projQry = " AND LogTime.project_id IN (SELECT ProjectUser.project_id FROM project_users AS ProjectUser,projects as Project WHERE " . $cond . " ProjectUser.user_id=" . SES_ID . " AND ProjectUser.company_id=" . SES_COMP . " AND ProjectUser.project_id=Project.id AND Project.isactive='1')";
            $count_sql = 'SELECT sum(total_hours) as secds '
                    . 'FROM log_times AS `LogTime` '
                    . "LEFT JOIN easycases AS Easycase ON Easycase.id=LogTime.task_id AND LogTime.project_id=Easycase.project_id "
                    . 'WHERE Easycase.isactive =1 AND LogTime.user_id= ' . SES_ID . ' AND LogTime.task_date > (task_date -(60*60*24*7)) ' . $projQry . ' ' . $clt_sql . '  ';
//            echo $count_sql;exit;
            $cntlog = $this->LogTime->query($count_sql);
            $totalhours = $cntlog[0][0]['secds'];
            $this->set('totalhours', $totalhours);
        }
    }

    /**
     * @method ajax_save_dashboard_order
     * @author Sunil
     * @return boolean
     */
    public function ajax_save_dashboard_order()
    {
        $this->layout = 'ajax';
        $order = (!empty($this->params->data['order'])) ? $this->params->data['order'] : '';
        if ($order) {
            $list = explode("&", $order);
            foreach ($list as $key => $value) {
                $sequency = $sequency . "," . substr($value, strpos($value, "=") + 1);
            }
            $sequency = trim($sequency, ",");
            $dashboard_order = SES_ID . "_" . SES_COMP . "::" . $sequency;
            setcookie('DASHBOARD_ORDER', $dashboard_order, COOKIE_REM, '/', DOMAIN_COOKIE, false, false);
        }
        print 1;
        exit;
    }

    /**
     * @method to_dos
     * @author Sunil
     * @return json
     */
    public function to_dos($args = null)
    {
        $this->layout = 'ajax';
        if (isset($args) && !empty($args)) {
            $this->params->data = $args;
        }
        $project_uid = (isset($this->params->data['projid']) && !empty($this->params->data['projid'])) ? $this->params->data['projid'] : 'all';
        $extra = isset($this->params->data['extra']) ? $this->params->data['extra'] : '';
        $cond = '';
        if (isset($this->params['pass'][0]) && trim($this->params['pass'][0]) == 'user_detail') {
            $user_id = $this->params['pass'][1];
            $limit = 10;
        } else {
            $user_id = SES_ID;
            $limit = 5;
        }
        if ($project_uid != 'all') {
            $cond = "Project.uniq_id = '" . $project_uid . "' AND";
            $this->ProjectUser->unbindModel(array('belongsTo' => array('User')));
            $this->ProjectUser->bindModel(array('belongsTo' => array('Project')));
            $projArr = $this->ProjectUser->find('first', array('conditions' => array('Project.uniq_id' => $project_uid, 'ProjectUser.user_id' => $user_id, 'ProjectUser.company_id' => SES_COMP), 'fields' => array('ProjectUser.id', 'Project.isactive')));
            if (count($projArr) && $projArr['Project']['isactive'] == 1) {
                //Updating ProjectUser table to current date-time
                $ProjectUser['id'] = $projArr['ProjectUser']['id'];
                $ProjectUser['dt_visited'] = GMT_DATETIME;
                $this->ProjectUser->save($ProjectUser);
            }
        }
        $clt_sql = 1;
        if ($this->Auth->user('is_client') == 1) {
            $clt_sql = "((Easycase.client_status = " . $this->Auth->user('is_client') . " AND Easycase.user_id = " . $this->Auth->user('id') . ") OR Easycase.client_status != " . $this->Auth->user('is_client') . ")";
        }
        $dt_cond = " AND DATE(Easycase.due_date) <'" . GMT_DATE . "'";
        $user_cond = "";
        if (SES_TYPE > 2) {
            $user_cond = " AND ((Easycase.assign_to='" . SES_ID . "') OR 
		(Easycase.assign_to=0 AND Easycase.user_id='" . SES_ID . "'))";
        }
        if ($extra != '') {
            $sql_od = "SELECT SQL_CALC_FOUND_ROWS Easycase.id as eid,Easycase.case_no,Easycase.actual_dt_created,Easycase.dt_created,Easycase.uniq_id,Easycase.project_id,Easycase.due_date,
			Easycase.title,Easycase.legend,Easycase.completed_task,Easycase.assign_to,Easycase.parent_task_id,Project.id,Project.name,Project.isactive,Project.short_name, Project.uniq_id, 'od' as todos_type, User.name,User.last_name, User.photo,User.id as uid FROM (SELECT * FROM easycases as Easycase WHERE Easycase.istype='1' AND Easycase.legend!=3 AND Easycase.legend!=5 AND Easycase.isactive=1 AND " . $clt_sql . " AND Easycase.project_id!=0 " . $dt_cond . " AND Easycase.project_id IN (SELECT ProjectUser.project_id FROM
			project_users AS ProjectUser,projects AS Project WHERE " . $cond . " ProjectUser.user_id='" . SES_ID . "' AND ProjectUser.project_id=Project.id  AND ProjectUser.company_id='" . SES_COMP . "') ORDER BY Easycase.project_id DESC) AS Easycase LEFT JOIN projects AS Project
			ON (Easycase.project_id=Project.id) LEFT JOIN users AS User
		ON (Easycase.assign_to=User.id) ORDER BY Easycase.due_date DESC LIMIT 0,5";
        } else {
            $sql_od = "SELECT SQL_CALC_FOUND_ROWS Easycase.id as eid,Easycase.case_no,Easycase.actual_dt_created,Easycase.dt_created,Easycase.uniq_id,Easycase.project_id,Easycase.due_date,Easycase.custom_status_id,Easycase.title,Easycase.priority,Easycase.completed_task,Easycase.assign_to,Easycase.parent_task_id,Project.id,Project.name,Project.isactive,Project.short_name, Project.uniq_id, 'od' as todos_type, User.name,User.last_name, User.photo, User.id as uid FROM (SELECT * FROM easycases as Easycase WHERE Easycase.istype='1' AND Easycase.legend!=3 AND Easycase.legend!=5 AND Easycase.isactive=1 AND " . $clt_sql . " AND Easycase.type_id!=10 AND Easycase.project_id!=0 " . $dt_cond . " AND Easycase.project_id IN (SELECT ProjectUser.project_id FROM
		project_users AS ProjectUser,projects AS Project WHERE " . $cond . " ProjectUser.user_id='" . SES_ID . "' AND ProjectUser.project_id=Project.id AND 
		 ProjectUser.company_id='" . SES_COMP . "')".$user_cond." ORDER BY  Easycase.project_id DESC) AS Easycase LEFT JOIN projects AS Project
		ON (Easycase.project_id=Project.id) LEFT JOIN users AS User
		ON (Easycase.assign_to=User.id) ORDER BY Easycase.dt_created DESC LIMIT 0,10";
        }
        $get_od_todos = $this->Easycase->query($sql_od);
        $tot_od = $this->Easycase->query("SELECT FOUND_ROWS() as tot_od");

        if ($tot_od) {
            $view = new View($this);
            $tz = $view->loadHelper('Tmzone');
            $dt = $view->loadHelper('Datetime');
            $curCreated = $tz->GetDateTime(SES_TIMEZONE, TZ_GMT, TZ_DST, TZ_CODE, GMT_DATETIME, "datetime");
            $curdtT = $tz->GetDateTime(SES_TIMEZONE, TZ_GMT, TZ_DST, TZ_CODE, GMT_DATETIME, "date");
            foreach ($get_od_todos as $k => $v) {
                $caseDueDate = $tz->GetDateTime(SES_TIMEZONE, TZ_GMT, TZ_DST, TZ_CODE, $v['Easycase']['due_date'], "datetime");
                if ($caseDueDate != "NULL" && $caseDueDate != "0000-00-00 00:00:00" && $caseDueDate != "" && $caseDueDate != "1970-01-01 00:00:00") {
                    if ($caseDueDate < $curdtT) {
                        //Find date diff in days.
                        $date1 = date_create($curdtT);
                        $date2 = date_create(date('Y-m-d', strtotime($caseDueDate)));
                        $diff = date_diff($date1, $date2, true);
                        $diff_in_days = $diff->format("%a");
                        $csDuDtFmtBy = ($diff_in_days > 1) ? 'late by ' . $diff_in_days . ' days' : 'late by ' . $diff_in_days . ' day';
                        $csDueDate = $dt->dateFormatOutputdateTime_day($caseDueDate, $curCreated, 'date');
                        $get_od_todos[$k]['Easycase']['due_date'] = $csDueDate;
                        $get_od_todos[$k]['Easycase']['due_dateby'] = $csDuDtFmtBy;
                    }
                }
            }
            //$parent_task_id = array_filter(Hash::combine($get_od_todos, '{n}.Easycase.eid', '{n}.Easycase.parent_task_id'));
            //$related_tasks = !empty($parent_task_id) ? $this->Easycase->getSubTasks($parent_task_id) : array();
            $related_tasks = array();
            $this->set('related_tasks_od', $related_tasks);
        }
        //pr($get_od_todos);exit;
        $qry_limit = 10;
        $dt_cond = " AND (DATE(Easycase.due_date) >='" . GMT_DATE . "' OR Easycase.due_date IS NULL OR Easycase.due_date='0000-00-00 00:00:00' OR Easycase.due_date='1970-01-01 00:00:00' OR Easycase.due_date='')";
        $sql = "SELECT SQL_CALC_FOUND_ROWS Easycase.id as eid,Easycase.case_no,Easycase.actual_dt_created,Easycase.dt_created,Easycase.uniq_id,Easycase.project_id,Easycase.due_date,Easycase.custom_status_id,		Easycase.title,Easycase.priority,Easycase.completed_task,Project.id,Project.name,Project.isactive,Project.short_name, Project.uniq_id, 'td' as todos_type FROM (SELECT * FROM easycases as Easycase WHERE Easycase.istype='1' AND " . $clt_sql . " AND Easycase.legend!=3
		AND Easycase.legend!=5 AND Easycase.isactive=1 AND Easycase.type_id!=10 AND Easycase.project_id!=0 " . $dt_cond . " AND Easycase.project_id IN (SELECT ProjectUser.project_id FROM
		project_users AS ProjectUser,projects AS Project WHERE " . $cond . " ProjectUser.user_id='" . SES_ID . "' AND ProjectUser.project_id=Project.id AND 
		 ProjectUser.company_id='" . SES_COMP . "')".$user_cond." ORDER BY  Easycase.project_id DESC) AS Easycase LEFT JOIN projects AS Project
		ON (Easycase.project_id=Project.id)  ORDER BY Easycase.due_date DESC, Easycase.dt_created DESC LIMIT 0,$qry_limit";
        $gettodos = $this->Easycase->query($sql);
        $tot = $this->Easycase->query("SELECT FOUND_ROWS() as total");

        if ($tot) {
            //$parent_task_id_todo = array_filter(Hash::combine($gettodos, '{n}.Easycase.eid', '{n}.Easycase.parent_task_id'));
            //$related_tasks_todo = !empty($parent_task_id_todo) ? $this->Easycase->getSubTasks($parent_task_id_todo) : array();
            $related_tasks_todo = array();
            $this->set('related_tasks_todo', $related_tasks_todo);
        }
        if (isset($this->params->data['angular']) && !empty($this->params->data['angular'])) {
            $arr = array();
            if ($get_od_todos) {
                $csts_arr = $this->Easycase->getStatusFortasks($get_od_todos);
                foreach ($get_od_todos as $kod=>$vod) {
                    $get_od_todos[$kod]['Easycase']['title'] = $this->Format->showSubtaskTitle($vod['Easycase']['title'], $vod['Easycase']['eid'], $related_tasks, 1);
                    if ($vod['Easycase']['custom_status_id']) {
                        $get_od_todos[$kod]['Easycase']['completed_task'] = $csts_arr[$vod['Easycase']['custom_status_id']]['progress'];
                    }
                }
            }
            if ($gettodos) {
                $csts_arr = $this->Easycase->getStatusFortasks($gettodos);
                foreach ($gettodos as $kod=>$vod) {
                    $gettodos[$kod]['Easycase']['title'] = $this->Format->showSubtaskTitle($vod['Easycase']['title'], $vod['Easycase']['eid'], $related_tasks_todo, 1);
                    if ($vod['Easycase']['custom_status_id']) {
                        $gettodos[$kod]['Easycase']['completed_task'] = $csts_arr[$vod['Easycase']['custom_status_id']]['progress'];
                    }
                }
            }
            $arr['get_od_todos'] = $get_od_todos;
            $arr['gettodos'] = $gettodos;
            $arr['project'] = $project_uid;
            $arr['total'] = $tot[0][0]['total'] + $tot_od[0][0]['tot_od'];
            $arr['Od_total'] = $tot_od[0][0]['tot_od'];
            $arr['extra'] = $extra;
            print json_encode($arr);
            exit;
        }

        $this->set('gettodos', array_merge($get_od_todos, $gettodos));
        $this->set('project', $project_uid);
        $this->set('total', $tot[0][0]['total'] + $tot_od[0][0]['tot_od']);
        $this->set('Od_total', $tot_od[0][0]['tot_od']);
        $this->set('extra', $extra);
        if ($extra == 'overview') {
            if (isset($args) && !empty($args)) {
                return $get_od_todos;
            } else {
                $this->set('gettodos_overview', $get_od_todos);
                $this->render('to_dos_overview', 'ajax');
            }
        }
    }
    
    public function files_overview($args = null)
    {
        $this->layout = 'ajax';
        
        if (isset($args) && !empty($args)) {
            $this->params->data = $args;
        }
        $projUniq = (isset($this->params->data['projid']) && !empty($this->params->data['projid'])) ? $this->params->data['projid'] : 'all';
        $extra = isset($this->params->data['extra']) ? $this->params->data['extra'] : '';
        
        // get project ID from project uniq-id
        $curProjId = null;
        $curProjShortName = null;
        if ($projUniq != 'all') {
            $this->loadModel('ProjectUser');
            $this->ProjectUser->bindModel(array('belongsTo' => array('Project')));
            if ($this->params->data['extra'] == 'overview') {
                $projArr = $this->ProjectUser->find('first', array('conditions' => array('Project.uniq_id' => $projUniq, 'ProjectUser.user_id' => SES_ID, 'ProjectUser.company_id' => SES_COMP), 'fields' => array('Project.id', 'Project.short_name', 'ProjectUser.id')));
            } else {
                $projArr = $this->ProjectUser->find('first', array('conditions' => array('Project.uniq_id' => $projUniq, 'ProjectUser.user_id' => SES_ID, 'Project.isactive' => 1, 'ProjectUser.company_id' => SES_COMP), 'fields' => array('Project.id', 'Project.short_name', 'ProjectUser.id')));
            }
            if (count($projArr)) {
                $curProjId = $projArr['Project']['id'];
                $curProjShortName = $projArr['Project']['short_name'];
            }
        }
        $limit1 = 0;
        $limit2 = 10;

        $clt_sql = 1;
        if ($this->Auth->user('is_client') == 1) {
            $clt_sql = "((Easycase.client_status = " . $this->Auth->user('is_client') . " AND Easycase.user_id = " . $this->Auth->user('id') . ") OR Easycase.client_status != " . $this->Auth->user('is_client') . ")";
        }

        if ($projUniq != 'all') {
            $caseAll = $this->Easycase->query("SELECT SQL_CALC_FOUND_ROWS Easycase.id,Easycase.uniq_id,Easycase.case_no,Easycase.user_id,Easycase.dt_created,Easycase.actual_dt_created,Easycase.istype,Easycase.project_id,Easycase.legend,CaseFile.*,Project.uniq_id FROM easycases as Easycase,case_files as CaseFile,projects as Project WHERE Easycase.id=CaseFile.easycase_id AND Easycase.project_id=Project.id AND Easycase.isactive='1' AND " . $clt_sql . " AND Easycase.project_id='$curProjId' AND Easycase.project_id!=0 AND CaseFile.isactive='1' ORDER BY Easycase.actual_dt_created DESC LIMIT $limit1,$limit2");
        }
        $caseCount = $this->Easycase->query("SELECT FOUND_ROWS() as count");

        $view = new View($this);
        $tz = $view->loadHelper('Tmzone');
        $dt = $view->loadHelper('Datetime');
        $frmt = $view->loadHelper('Format');
        $cq = $view->loadHelper('Casequery');
        if (isset($caseAll) && !empty($caseAll)) {
            foreach ($caseAll as $key => $getdata) {
                if (isset($getdata['CaseFile']['downloadurl']) && trim($getdata['CaseFile']['downloadurl'])) {
                    $caseAll[$key]['fileurl'] = '';
                    $caseAll[$key]['file_name'] = $getdata['CaseFile']['file'];
                    $caseAll[$key]['link_url'] = '';
                    $caseAll[$key]['download_url'] = $getdata['CaseFile']['downloadurl'];
                    $is_google = strpos($getdata['CaseFile']['downloadurl'], ".google.com");
                    if ($is_google !== false) {
                        $caseAll[$key]['file_type'] = "gd";
                    }
                    $is_dropbox = strpos($getdata['CaseFile']['downloadurl'], "https://www.dropbox.com");
                    if ($is_dropbox !== false) {
                        $caseAll[$key]['file_type'] = "db";
                    }
                } else {
                    $linkurl = $getdata['CaseFile']['upload_name'] != '' ? $getdata['CaseFile']['upload_name'] : $getdata['CaseFile']['file'];
                    if (defined('USE_S3') && USE_S3 == 1) {
                        $caseAll[$key]['fileurl'] = $frmt->generateTemporaryURL(DIR_CASE_FILES_S3 . $linkurl);
                    } else {
                        $caseAll[$key]['fileurl'] = HTTP_CASE_FILES . $linkurl;
                    }
                    if ($getdata['CaseFile']['display_name']) {
                        $caseAll[$key]['file_name'] = $getdata['CaseFile']['display_name'];
                    } else {
                        //$caseAll[$key]['file_name'] = $frmt->formatText($frmt->longstringwrap($this->Format->shortLength($getdata['CaseFile']['file'], 75)));
                        $caseAll[$key]['file_name'] = $getdata['CaseFile']['file'];
                    }
                    $caseAll[$key]['link_url'] = HTTP_ROOT . "easycases/download/" . $linkurl;
                    $caseAll[$key]['download_url'] = '';
                    $caseAll[$key]['file_type'] = substr(strrchr(strtolower($getdata['CaseFile']['file']), "."), 1);
                }
                $caseAll[$key]['is_image'] = $frmt->validateImgFileExt($linkurl);
                if ($getdata['CaseFile']['file_size'] !== '0.0') {
                    $caseAll[$key]['file_size'] = $frmt->getFileSize($getdata['CaseFile']['file_size']);
                }

                $usrDtls = $cq->getUserDtls($getdata['Easycase']['user_id']);
                $usrName = $frmt->formatText($usrDtls['User']['name'].' '.$usrDtls['User']['last_name']);
                    
                $caseAll[$key]['usrName'] = $frmt->formatText($usrName);
                $caseAll[$key]['usrPhoto'] = $usrDtls['User']['photo'];

                $caseAll[$key]['is_archive'] = 0;
                if (SES_TYPE == 1 || SES_TYPE == 2 || ($getdata['Easycase']['legend'] == 1 && SES_ID == $getdata['Easycase']['user_id'])) {
                    $caseAll[$key]['is_archive'] = 1;
                }

                $caseAll[$key]['updatedCur'] = $updatedCur = $tz->GetDateTime(SES_TIMEZONE, TZ_GMT, TZ_DST, TZ_CODE, GMT_DATETIME, "date");
                $caseAll[$key]['inserted'] = $inserted = $tz->GetDateTime(SES_TIMEZONE, TZ_GMT, TZ_DST, TZ_CODE, $getdata['Easycase']['actual_dt_created'], "datetime");
                $caseAll[$key]['newUpdDt'] = $newUpdDt = date('Y-m-d', strtotime($inserted));
                $caseAll[$key]['newdt'] = $newdt = $dt->dateFormatOutputdateTime_day($newUpdDt, $updatedCur, 'date');
            }
        }
        $caseFiles['caseCount'] = $caseCount['0']['0']['count'];
        $caseFiles['caseAll'] = $caseAll;
        if (isset($args) && !empty($args)) {
            return $caseFiles;
        } else {
            $this->set('caseFiles', $caseFiles);
            $this->render('case_files_overview', 'ajax');
        }
    }

    /**
     * @method recent_projects
     * @author Sunil
     * @return json
     */
    public function recent_projects()
    {
        $this->layout = 'ajax';
        $this->loadModel('Project');
        $sql = "SELECT SQL_CALC_FOUND_ROWS DISTINCT Project.id,Project.uniq_id AS uniq_id,Project.name,
			Project.dt_created,(SELECT COUNT(Easycase.id) FROM easycases AS Easycase WHERE 
			Easycase.istype='1' AND Easycase.isactive='1' AND Projectuser.project_id=Easycase.project_id ) 
			AS total, (SELECT COUNT(Easycase.id) FROM easycases AS Easycase WHERE 
			Easycase.istype='1' AND Easycase.isactive='1' AND (Easycase.legend ='3' OR Easycase.legend ='5') AND Projectuser.project_id=Easycase.project_id ) 
			AS resolved FROM projects AS Project, project_users AS Projectuser WHERE Project.id=Projectuser.project_id 
			AND Projectuser.user_id='" . SES_ID . "' AND Projectuser.company_id='" . SES_COMP . "' AND Project.isactive='1' 
			ORDER BY Projectuser.dt_visited DESC LIMIT 0,10";

        $recent_projects = $this->Project->query($sql);
        $tot = $this->Project->query("SELECT FOUND_ROWS() as total");
        $this->set('recent_projects', $recent_projects);
        $this->set('total', $tot[0][0]['total']);
    }

    /**
     * @method recent_activities
     * @author Sunil
     * @return json
     */
    public function recent_activities($args = null)
    {
        $this->layout = 'ajax';
        if ($args) {
            $this->params->data = $args;
        }
        $this->loadModel('Easycase');
        $project_uid = (isset($this->params->data['projid']) && !empty($this->params->data['projid'])) ? $this->params->data['projid'] : 'all';
        $clt_sql = 1;
        if ($this->Auth->user('is_client') == 1) {
            $clt_sql = "((Easycase.client_status = " . $this->Auth->user('is_client') . " AND Easycase.user_id = " . $this->Auth->user('id') . ") OR Easycase.client_status != " . $this->Auth->user('is_client') . ")";
        }
        $cond = '';
        if ($project_uid != 'all') {
            $cond = "AND Project.uniq_id = '" . $project_uid . "'";
        }
        if (!$this->Format->isAllowed('View All Task', $roleAccess)) {
            $cond .= " AND (Easycase.assign_to=" . SES_ID . " OR Easycase.user_id=".SES_ID.") ";
        }

        /* $sql = "SELECT SQL_CALC_FOUND_ROWS Easycase.*,User.name,User.short_name,User.photo,Project.id,Project.uniq_id,Project.name
          FROM easycases AS Easycase INNER JOIN users AS User ON (Easycase.user_id = User.id) INNER JOIN
          projects AS Project ON (Easycase.project_id = Project.id) inner JOIN project_users AS ProjectUser ON
          (Easycase.project_id = ProjectUser.project_id AND ProjectUser.user_id = '".SES_ID."' AND ProjectUser.company_id = '".SES_COMP."')
          WHERE Project.isactive='1' AND Easycase.isactive='1' ".$cond." AND
          Easycase.id = (SELECT MAX(id) FROM easycases WHERE case_no = Easycase.case_no GROUP BY case_no)
          GROUP BY Easycase.case_no ORDER BY Easycase.actual_dt_created DESC LIMIT 0,10"; */
        if ($this->params->data['extra'] == 'overview') {
            $sql_fields = "SELECT SQL_CALC_FOUND_ROWS Easycase.*,User.id,User.name,User.short_name,User.photo,Project.id,Project.uniq_id,Project.name,Project.short_name ";
            $sql = " FROM easycases AS Easycase 
                            INNER JOIN users AS User ON (Easycase.user_id = User.id) 
                            INNER JOIN projects AS Project ON (Easycase.project_id = Project.id) 
                            inner JOIN project_users AS ProjectUser ON 
                (Easycase.project_id = ProjectUser.project_id AND ProjectUser.user_id = '" . SES_ID . "' AND ProjectUser.company_id = '" . SES_COMP . "') 
                WHERE Easycase.isactive='1' " . $cond . " AND " . $clt_sql . " "
                    . "ORDER BY Easycase.actual_dt_created DESC ";
        } else {
            $sql_fields = "SELECT SQL_CALC_FOUND_ROWS Easycase.*,User.id,User.name,User.short_name,User.photo,Project.id,Project.uniq_id,Project.name,Project.short_name ";
            $sql = " FROM easycases AS Easycase 
                        INNER JOIN users AS User ON (Easycase.user_id = User.id) 
                        INNER JOIN projects AS Project ON (Easycase.project_id = Project.id) 
                        inner JOIN project_users AS ProjectUser ON 
			(Easycase.project_id = ProjectUser.project_id AND ProjectUser.user_id = '" . SES_ID . "' AND ProjectUser.company_id = '" . SES_COMP . "') 
			WHERE Project.isactive='1' AND Easycase.isactive='1' " . $cond . " AND " . $clt_sql . " "
                    . "ORDER BY Easycase.actual_dt_created DESC ";
        }

        $recent_activities = $this->Easycase->query($sql_fields.$sql." LIMIT 0,10");
        $tot = $this->Easycase->query("SELECT count(*) as total ".$sql);
        $total = $tot[0][0]['total'];
        if ($total != 0) {
            $view = new View($this);
            $fmt = $view->loadHelper('Format');
            $dt = $view->loadHelper('Datetime');
            $tz = $view->loadHelper('Tmzone');
            $csq = $view->loadHelper('Casequery');
            $this->loadModel('User');
            $frmtActivity = $this->User->formatActivities($recent_activities, $total, $fmt, $dt, $tz, $csq);
        }
        if (isset($this->params->data['angular']) && !empty($this->params->data['angular'])) {
            $arr['recent_activities'] = $frmtActivity['activity'];
            $arr['project'] = $project_uid;
            $arr['total'] = $total;
            print json_encode($arr);
            exit;
        }

        if ($args) {
            return  array('recent_activities' => $frmtActivity['activity'],'project'=> $project_uid,'total'=>$total);
        } else {
            $this->set('recent_activities', $frmtActivity['activity']);
            $this->set('project', $project_uid);
            $this->set('extra', $this->params->data['extra']);
            $this->set('total', $total);
        }
    }

    public function pdf_project_notes($args = null)
    {
        $this->loadModel('ProjectNote');
        $cond = '';
        if ($args) {
            $this->data = $args;
        }
        $notes = array();
        $project_id = $this->Project->getProjectFields(array('uniq_id' => $this->data['projid'],'company_id' => SES_COMP), array('id'));
        if ($project_id) {
            $this->ProjectNote->bindModel(array('belongsTo' => array('User'=> array('className' => 'User','foreignKey' => 'user_id'))));
            $notes = $this->ProjectNote->getProjNotes(SES_COMP, $project_id['Project']['id']);
                
            if ($args) {
                //required for pdf generation.
                    //return array('res_out'=>$res_out,'prjid'=>$this->data['projid'],'extra'=>$this->data['extra'], 'notes'=>$notes);
            }
        }
        return  array('notes' => $notes,'project'=> $this->data['projid'],'total'=>count($notes));
        //$this->set('extra', $this->data['extra']);
    }
    /**
     * @method recent_milestones
     * @author Sunil
     * @return json
     */
    public function recent_milestones()
    {
        $this->layout = 'ajax';
        $project_uid = (isset($this->params->data['projid']) && !empty($this->params->data['projid'])) ? $this->params->data['projid'] : 'all';
        if ($project_uid != 'all') {
            $this->loadModel("Project");
            $project = $this->Project->getProjectFields(array("Project.uniq_id" => $project_uid), array("Project.id"));
            $allpj = $projectId = $project['Project']['id'];
        } else {
            $allpj = "all";
        }

        $this->loadModel('Milestone');
        $sql = "SELECT SQL_CALC_FOUND_ROWS Milestone.*,Project.name,Project.uniq_id,COUNT(c.easycase_id) AS totalcases,
			GROUP_CONCAT(c.easycase_id) AS `caseids`,GROUP_CONCAT(e.legend) AS `legend` FROM milestones AS `Milestone` LEFT JOIN
			easycase_milestones AS c ON Milestone.id = c.milestone_id LEFT JOIN easycases AS e ON (c.easycase_id = e.id) LEFT JOIN
			projects AS Project ON (Project.id=Milestone.project_id) WHERE Milestone.isactive='1' AND `Milestone`.`company_id` = " . SES_COMP;

        if ($allpj != "all") {
            $sql .= " AND `Milestone`.`project_id` =" . $projectId . " AND `Milestone`.`company_id` = " . SES_COMP . "  GROUP BY Milestone.id ORDER BY `Milestone`.`modified` DESC LIMIT 0,10";
        } else {
            $allcond = array('conditions' => array('ProjectUser.user_id' => SES_ID, 'ProjectUser.company_id' => SES_COMP, 'Project.isactive' => 1), 'fields' => array('DISTINCT  Project.id'), 'order' => array('ProjectUser.dt_visited DESC'));
            $this->ProjectUser->bindModel(array('belongsTo' => array('Project')));
            $allProjArr = $this->ProjectUser->find('all', $allcond);
            $ids = array();
            foreach ($allProjArr as $csid) {
                array_push($ids, $csid['Project']['id']);
            }
            $all_ids = implode(',', $ids);
            $sql .= " AND `Milestone`.`project_id` IN (" . $all_ids . ") AND `Milestone`.`company_id` = " . SES_COMP . " GROUP BY Milestone.id ORDER BY `Milestone`.`modified` DESC LIMIT 0,10";
        }

        $recent_milestones = $this->Milestone->query($sql);

        //Finding number of resolved case.
        foreach ($recent_milestones as $key => $milestone) {
            if ($milestone['0']['legend']) {
                $legends = explode(",", $milestone['0']['legend']);
                if (in_array(3, $legends) || in_array(5, $legends)) {
                    $cnt = 0;
                    foreach ($legends as $value) {
                        if ($value == 3 || $value == 5) {
                            $cnt = $cnt + 1;
                        }
                    }
                    $recent_milestones[$key]['0']['resolved'] = $cnt;
                } else {
                    $recent_milestones[$key]['0']['resolved'] = 0;
                }
            } else {
                $recent_milestones[$key]['0']['resolved'] = 0;
            }
        }
        $this->set('recent_milestones', $recent_milestones);
        $this->set('project', $project_uid);
    }

    /**
     * @method: statistics
     * @author Sunil
     * @return json
     */
    public function statistics()
    {
        $this->loadModel('ProjectUser');
        $this->loadModel("Easycase");

        $this->layout = 'ajax';
        $project_uid = (isset($this->params->data['projid']) && !empty($this->params->data['projid'])) ? $this->params->data['projid'] : '';
        $extra = isset($this->params->data['extra']) ? $this->params->data['extra'] : '';

        $clt_sql = 1;
        if ($this->Auth->user('is_client') == 1) {
            $clt_sql = "((Easycase.client_status = " . $this->Auth->user('is_client') . " AND Easycase.user_id = " . $this->Auth->user('id') . ") OR Easycase.client_status != " . $this->Auth->user('is_client') . ")";
        }
        $cond = '';
        /* Task without Due Date */
        if ($project_uid != 'all') {
            $cond = " AND Project.uniq_id='" . $project_uid . "'";
        /* $task_have_no_hours = "SELECT DISTINCT COUNT(total.id) AS task_have_no_hours FROM "
          . "(SELECT Easycase.* FROM easycases AS Easycase "
          . "LEFT JOIN projects AS Project ON (Project.id = Easycase.project_id) "
          . "WHERE Project.company_id='" . SES_COMP . "' AND Project.uniq_id='" . $project_uid . "' AND Easycase.isactive=1 AND " . $clt_sql . " AND Easycase.hours =0.0 "
          . "GROUP BY Easycase.case_no) AS total "
          . "GROUP BY total.project_id"; */
        } else {
            /* $task_have_no_hours = "SELECT SUM(total.no_hours) AS task_have_no_hours "
              . "FROM (SELECT DISTINCT COUNT(total1.id) AS no_hours "
              . "FROM (SELECT Easycase.* FROM easycases AS Easycase "
              . "LEFT JOIN projects AS Project ON (Project.id = Easycase.project_id) "
              . "WHERE Project.company_id='" . SES_COMP . "' AND Easycase.isactive=1 AND" . $clt_sql . " AND Easycase.hours =0.0 "
              . "GROUP BY Easycase.case_no) AS total1 "
              . "GROUP BY total1.project_id) AS total"; */
        }

        //$statistics = array();

        $id = $this->Auth->user('id');
        $rec = $this->ProjectUser->findByUserId($id);
        if (!empty($rec)) {
            $task_type = $GLOBALS['TYPE'];
            $type_id = (isset($GLOBALS['TYPE'][0]['Type']['id']) && trim($GLOBALS['TYPE'][0]['Type']['id'])) ? $GLOBALS['TYPE'][0]['Type']['id'] : $GLOBALS['TYPE'][1]['Type']['id'];
            $task_type_id = (isset($_COOKIE['TASK_TYPE_IN_DASHBOARD']) && trim($_COOKIE['TASK_TYPE_IN_DASHBOARD'])) ? $_COOKIE['TASK_TYPE_IN_DASHBOARD'] : $type_id;

            $task_without_due_date = "SELECT  DISTINCT COUNT(Easycase.id) AS task_without_due_date "
                    . " FROM easycases AS Easycase "
                    . " LEFT JOIN projects AS Project ON (Project.id = Easycase.project_id) "
                    . " WHERE Project.company_id='" . SES_COMP . "' $cond AND Easycase.isactive=1 AND Easycase.istype=1 AND Easycase.due_date IS NULL";

            $hours_spent = "SELECT SUM(LogTime.total_hours) AS hours_spent "
                    . "FROM log_times AS LogTime "
                    . "LEFT JOIN easycases AS Easycase ON LogTime.task_id=Easycase.id AND LogTime.project_id=Easycase.project_id "
                    . "LEFT JOIN projects AS Project ON Project.id = Easycase.project_id "
                    . "WHERE Project.company_id='" . SES_COMP . "' AND Project.isactive=1 AND Easycase.isactive=1 $cond "
                    . "AND " . $clt_sql . "";

            $task_hours = "SELECT SUM(LogTime.total_hours) as task_hours "
                    . "FROM log_times AS LogTime "
                    . "LEFT JOIN easycases AS Easycase ON LogTime.task_id=Easycase.id AND LogTime.project_id=Easycase.project_id "
                    . "LEFT JOIN projects AS Project ON (Project.id = Easycase.project_id) "
                    . "WHERE Project.company_id='" . SES_COMP . "' AND Project.isactive=1 AND Easycase.isactive=1 $cond "
                    . "AND " . $clt_sql . " AND type_id = '" . $task_type_id . "'";

            //$sql = "SELECT * FROM ($task_without_due_date) AS task_without_due_date,($task_have_no_hours) AS task_have_no_hours,($hours_spent) AS hours_spent,($bug_hours) AS bug_hours";
            $sql = "SELECT * FROM ($task_without_due_date) AS task_without_due_date,($hours_spent) AS hours_spent,($task_hours) AS task_hours";
            $statistics = $this->Easycase->query($sql);
            $task_type_name = "";
            if (isset($task_type) && !empty($task_type)) {
                foreach ($task_type as $key => $value) {
                    if ($task_type_id == $value['Type']['id']) {
                        $task_type_name = strtolower($value['Type']['name']);
                    }
                }
            }
            if (isset($this->params->data['angular']) && $this->params->data['angular'] == 1) {
                $arr['statistics'] = $statistics;
                $arr['task_type_name'] = $task_type_name;
                $arr['extra'] = $extra;
                print json_encode($arr);
                exit;
            }
            $this->set(compact('statistics', 'task_type_name', 'extra'));
        }
    }

    /**
     * @method usage_details
     * @author Sunil
     * @return json
     */
    public function usage_details()
    {
        $this->layout = 'ajax';
        $project_uid = (isset($this->params->data['projid']) && !empty($this->params->data['projid'])) ? $this->params->data['projid'] : '';
        $this->loadModel("Project");

        $filecond = '';
        $usercond = '';
        $projectcond = '';
        if ($project_uid != 'all') {
            $project = $this->Project->getProjectFields(array("Project.uniq_id" => $project_uid), array("Project.id"));
            $projectId = $project['Project']['id'];
            $filecond = " AND CaseFile.project_id='" . $projectId . "'";
            $usercond = " AND ProjectUser.project_id='" . $projectId . "'";
        } else {
            $projectcond = ",(SELECT DISTINCT COUNT(Project.id) AS cnt_projects FROM projects AS Project, project_users AS ProjectUser "
                    . "WHERE Project.id=ProjectUser.project_id AND ProjectUser.user_id='" . SES_ID . "' AND  ProjectUser.company_id='" . SES_COMP . "' AND Project.isactive='1') AS total_projects";
        }

        /* $sql = "SELECT * FROM (SELECT ROUND((SUM(CaseFile.file_size)/1024),2) AS filesize FROM case_files AS CaseFile WHERE CaseFile.company_id ='".SES_COMP."' $filecond) AS total_filesize,
          (SELECT  DISTINCT COUNT(CompanyUser.id) AS cnt_users FROM company_users AS CompanyUser, project_users AS ProjectUser WHERE CompanyUser.is_active=1 AND
          CompanyUser.company_id='".SES_COMP."' $usercond AND ProjectUser.company_id=CompanyUser.company_id AND ProjectUser.user_id = CompanyUser.user_id) AS total_users $projectcond"; */

        $sql = "SELECT * FROM (SELECT ROUND((SUM(CaseFile.file_size)/1024),2) AS filesize FROM case_files AS CaseFile WHERE CaseFile.company_id ='" . SES_COMP . "' $filecond) AS total_filesize,
		(SELECT COUNT(DISTINCT(CompanyUser.user_id)) as cnt_users  FROM company_users AS CompanyUser LEFT JOIN project_users as ProjectUser ON ProjectUser.user_id = CompanyUser.user_id WHERE CompanyUser.is_active=1 AND
CompanyUser.company_id=" . SES_COMP . " $usercond) AS total_users $projectcond";

        $usage_details = $this->Project->query($sql);
        if (isset($this->params->data['angular']) && !empty($this->params->data['angular'])) {
            print json_encode($usage_details);
            exit;
        }

        $this->set('usage_details', $usage_details);
    }

    /**
     * @method task_progress
     * @author MAV
     * @return json
     */
    public function task_progress()
    {
        $this->layout = 'ajax';

        $projQry = "AND Easycase.project_id IN (SELECT ProjectUser.project_id FROM project_users AS ProjectUser,projects as Project WHERE ProjectUser.user_id=" . SES_ID . " AND ProjectUser.company_id=" . SES_COMP . " AND ProjectUser.project_id=Project.id AND Project.isactive='1')";

        $query_All = 0;
        $query_Close = 0;
        $query_Resolve = 0;
        $stsMsg = '';
        $stsMsgTtl = '';
        $taskProg = "";

        $query_All1 = $this->Easycase->query("SELECT COUNT(Easycase.id) as count FROM easycases as Easycase WHERE Easycase.istype='1' AND Easycase.type_id!='10' AND  Easycase.isactive='1' AND Easycase.project_id!=0 " . $projQry);
        $query_All = $query_All1['0']['0']['count'];



        $query_Close1 = $this->Easycase->query("SELECT COUNT(Easycase.id) as count FROM easycases as Easycase WHERE Easycase.istype='1' AND Easycase.isactive='1' AND Easycase.legend='3' AND Easycase.type_id!='10' AND Easycase.project_id!=0 " . $projQry);
        $query_Close = $query_Close1['0']['0']['count'];

        $query_Resolve1 = $this->Easycase->query("SELECT COUNT(Easycase.id) as count FROM easycases as Easycase WHERE Easycase.istype='1' AND Easycase.isactive='1' AND Easycase.legend='5' AND Easycase.type_id!='10' AND Easycase.project_id!=0 " . $projQry);
        $query_Resolve = $query_Resolve1['0']['0']['count'];

        //echo $query_Resolve.' / '.$query_Close.' / '.$query_All."<br />";
        //$query_All=0; $query_Close=0; $query_Resolve=0;

        $resolvedRate = '0%';
        $resRate = $newWipRate = 0;

        if ($query_All) {
            $resRate = (float) number_format(($query_Close + $query_Resolve) / $query_All * 100, 2);
            $newWipRate = 100 - $resRate;

            if (!$resRate || $resRate != 0.00) {
                $resolvedRate = $resRate . '%';
                $stsMsg = $resolvedRate;
                $stsMsgTtl = $resolvedRate . ' (' . ($query_Close + $query_Resolve) . ' of ' . $query_All . ' Tasks Resolved)';
            }

            if (!$newWipRate || $newWipRate == 0.00) {
                $taskProg = array(
                    array('name' => 'Resolved', 'color' => '#9FBD4B', 'y' => $resRate),
                );
            } elseif (!$resRate || $resRate == 0.00) {
                $taskProg = array(
                    array('name' => 'New & In Progress', 'color' => '#E1857A', 'y' => $newWipRate),
                );
            } else {
                $taskProg = array(
                    array('name' => 'Resolved', 'color' => '#9FBD4B', 'y' => $resRate),
                    array('name' => 'New & In Progress', 'color' => '#E1857A', 'y' => $newWipRate),
                );
            }
        }

        $this->set('progress_report', json_encode(array('sts_msg' => $stsMsg, 'sts_msg_ttl' => $stsMsgTtl, 'task_prog' => $taskProg)));
    }

    /**
     *
     * @method task_types
     * @author SNL
     * @return json
     */
    public function task_types()
    {
        $this->layout = 'ajax';
        $project_uid = (isset($this->params->data['projid']) && !empty($this->params->data['projid'])) ? $this->params->data['projid'] : 'all';
        $task_type_id = (isset($this->params->data['task_type_id']) && trim($this->params->data['task_type_id'])) ? $this->params->data['task_type_id'] : 0;
        $cond = '';
        if ($project_uid != 'all') {
            $cond = "Project.uniq_id = '" . $project_uid . "' AND";
        }
        if (SES_TYPE == 3) {
            $assginto = " AND Easycase.assign_to=" . SES_ID;
        }
        $projQry = "AND Easycase.project_id IN (SELECT ProjectUser.project_id FROM project_users AS ProjectUser,projects as Project WHERE " . $cond . " ProjectUser.user_id=" . SES_ID . " AND ProjectUser.company_id=" . SES_COMP . " AND ProjectUser.project_id=Project.id )";
//        $projQry = "AND Easycase.project_id IN (SELECT ProjectUser.project_id FROM project_users AS ProjectUser,projects as Project WHERE " . $cond . " ProjectUser.user_id=" . SES_ID . " AND ProjectUser.company_id=" . SES_COMP . " AND ProjectUser.project_id=Project.id AND Project.isactive='1')";

        $query_All = 0;
        $query_Close = 0;
        $query_Resolve = 0;
        $stsMsg = '';
        $stsMsgTtl = '';
        $taskProg = "";

        $clt_sql = 1;
        if ($this->Auth->user('is_client') == 1) {
            $clt_sql = "((Easycase.client_status = " . $this->Auth->user('is_client') . " AND Easycase.user_id = " . $this->Auth->user('id') . ") OR Easycase.client_status != " . $this->Auth->user('is_client') . ")";
        }

        $query_All1 = $this->Easycase->query("SELECT COUNT(Easycase.id) as count FROM easycases as Easycase WHERE Easycase.istype='1'" . $assginto . " AND Easycase.type_id='" . $task_type_id . "' AND  Easycase.isactive='1' AND " . $clt_sql . " AND Easycase.project_id!=0 " . $projQry);
        $query_All = $query_All1['0']['0']['count'];

        $query_Close1 = $this->Easycase->query("SELECT COUNT(Easycase.id) as count FROM easycases as Easycase WHERE Easycase.istype='1' " . $assginto . " AND Easycase.isactive='1' AND " . $clt_sql . " AND Easycase.legend='3' AND Easycase.type_id='" . $task_type_id . "' AND Easycase.project_id!=0 " . $projQry);
        $query_Close = $query_Close1['0']['0']['count'];

        $query_Resolve1 = $this->Easycase->query("SELECT COUNT(Easycase.id) as count FROM easycases as Easycase WHERE Easycase.istype='1'" . $assginto . " AND Easycase.isactive='1' AND " . $clt_sql . " AND Easycase.legend='5' AND Easycase.type_id='" . $task_type_id . "' AND Easycase.project_id!=0 " . $projQry);
        $query_Resolve = $query_Resolve1['0']['0']['count'];

        //echo $query_Resolve.' / '.$query_Close.' / '.$query_All."<br />";
        //$query_All=0; $query_Close=0; $query_Resolve=0;

        $resolvedRate = '0%';
        $resRate = $newWipRate = 0;

        if ($query_All) {
            $resRate = (float) number_format(($query_Close + $query_Resolve) / $query_All * 100, 2);
            $newWipRate = 100 - $resRate;
            if (!$resRate || $resRate != 0.00) {
                $resolvedRate = $resRate . '%';
                $stsMsg = ' - ' . $resolvedRate . ' Completed';
                $stsMsgTtl = $resolvedRate . ' (' . ($query_Close + $query_Resolve) . ' of ' . $query_All . ' Completed)';
            }
            if (!$newWipRate || $newWipRate == 0.00) {
                $taskProg = array(
                    array('name' => 'Completed', 'color' => '#8AD6A3', 'y' => $resRate),
                );
            } elseif (!$resRate || $resRate == 0.00) {
                $taskProg = array(
                    array('name' => 'New & In Progress', 'color' => '#8DC2F8', 'y' => $newWipRate),
                );
            } else {
                $taskProg = array(
                    array('name' => 'Completed', 'color' => '#8AD6A3', 'y' => $resRate),
                    array('name' => 'New & In Progress', 'color' => '#8DC2F8', 'y' => $newWipRate),
                );
            }
        }

        $this->set('task_report', json_encode(array('sts_msg' => $stsMsg, 'sts_msg_ttl' => $stsMsgTtl, 'task_prog' => $taskProg)));
    }

    /**
     * @method task_status
     * @author MAV
     * @return json
     */
    public function task_status()
    {
        $this->layout = 'ajax';
        $project_uid = (isset($this->params->data['projid']) && !empty($this->params->data['projid'])) ? $this->params->data['projid'] : 'all';
        $cond = '';
        if ($project_uid != 'all') {
            $cond = "Project.uniq_id = '" . $project_uid . "' AND";
        }
        $projQry = "AND Easycase.project_id IN (SELECT ProjectUser.project_id FROM project_users AS ProjectUser,projects as Project WHERE " . $cond . " ProjectUser.user_id=" . SES_ID . " AND ProjectUser.company_id=" . SES_COMP . " AND ProjectUser.project_id=Project.id AND Project.isactive='1')";

        $stsMsg = '';
        $stsMsgTtl = '';
        $stsArr = array(1 => 'New', 2 => 'In Progress', 3 => 'Closed', 4 => 'In Progress', 5 => 'Resolved');
        $stsColorArr = array('New' => '#F19A91', 'In Progress' => '#8DC2F8', 'Closed' => '#8AD6A3', 'Resolved' => '#F3C788');
        $clt_sql = " AND 1 AND ";
        if ($this->Auth->user('is_client') == 1) {
            $clt_sql = " AND ((Easycase.client_status = " . $this->Auth->user('is_client') . " AND Easycase.user_id = " . $this->Auth->user('id') . ") OR Easycase.client_status != " . $this->Auth->user('is_client') . ") AND ";
        }
        $query_All1 = $this->Easycase->query("SELECT legend,COUNT(Easycase.id) as count FROM easycases as Easycase WHERE Easycase.istype='1' AND Easycase.isactive='1'" . $clt_sql . "Easycase.type_id!='10' AND Easycase.project_id!=0 " . $projQry . ' GROUP BY legend ORDER BY FIELD(legend,1,6,2,4,5,3)');
        $stsCalc = array();
        foreach ($query_All1 as $k => $v) {
            $stsCalc[$stsArr[$v['Easycase']['legend']]] += $v[0]['count'];
        }

        $statusRate;
        $statusRate = array();
        if (array_sum($stsCalc)) {
            foreach ($stsCalc as $k => $sts) {
                $statusRate[] = array(
                    'name' => $k,
                    'color' => $stsColorArr[$k],
                    'y' => (float) number_format(($sts / array_sum($stsCalc)) * 99, 1)
                );
            }
        }
        $this->set('status_report', json_encode(array('sts_msg' => $stsMsg, 'sts_msg_ttl' => $stsMsgTtl, 'task_prog' => $statusRate)));
    }

    public function calendarView()
    {
        $this->layout = 'ajax';
    }

    public function getTaskList()
    {
        //$this->layout = 'ajax';
        $this->loadModel('User');
        $calendarTaskList = array();
        $page_limit = 10;
        $this->_datestime();

        $projUniq = $this->data['projFil']; // Project Uniq ID
        $projIsChange = $this->data['projIsChange']; // Project Uniq ID

        if ($projUniq == 'all' && in_array($GLOBALS['user_subscription']['subscription_id'], array(10,21))) {
            echo 'NA';
            exit;
        }
        $caseStatus = $this->data['caseStatus']; // Filter by Status(legend)
        $priorityFil = $this->data['priFil']; // Filter by Priority
        $caseTypes = $this->data['caseTypes']; // Filter by case Types
        $caseLabel = $this->data['caseLabel']; // Filter by case Label
        $caseUserId = $this->data['caseMember']; // Filter by Member
        $caseAssignTo = $this->data['caseAssignTo']; // Filter by AssignTo
        $caseDate = $this->data['caseDate']; // Sort by Date
        $caseSrch = $this->data['caseSearch']; // Search by keyword
        $casePage = $this->data['casePage']; // Pagination
        $caseUniqId = $this->data['caseId']; // Case Uniq ID to close a case
        $caseTitle = $this->data['caseTitle']; // Case Uniq ID to close a case
        $caseDueDate = $this->data['caseDueDate']; // Sort by Due Date

        $caseNum = $this->data['caseNum']; // Sort by Due Date
        $caseLegendsort = $this->data['caseLegendsort']; // Sort by Case Status
        $caseAtsort = $this->data['caseAtsort']; // Sort by Case Status
        $startCaseId = $this->data['startCaseId']; // Start Case
        $caseResolve = $this->data['caseResolve']; // Resolve Case
        $caseNew = $this->data['caseNew']; // New Case

        $caseMenuFilters = $this->data['caseMenuFilters']; // Resolve Case
        $milestoneIds = $this->data['milestoneIds']; // Resolve Case
        $milestoneUid = $this->data['milestoneUid'];
        $caseCreateDate = $this->data['caseCreateDate']; // Sort by Created Date
        @$case_srch = $this->data['case_srch'];
        @$case_date = urldecode($this->data['case_date']);
        @$case_duedate = $this->data['case_due_date'];
        @$milestone_type = $this->data['mstype'];
        $changecasetype = $this->data['caseChangeType'];
        $caseChangeDuedate = $this->data['caseChangeDuedate'];
        $caseChangePriority = $this->data['caseChangePriority'];
        $caseChangeAssignto = $this->data['caseChangeAssignto'];
        $customfilterid = $this->data['customfilter'];
        $detailscount = $this->data['data']['detailscount']; // Count number to open casedetails
        $morecontent = $this->data['morecontent'];
        if ($customfilterid) {
            $this->loadModel('CustomFilter');
            //$getcustomfilter = "SELECT  * FROM custom_filters AS CustomFilter WHERE CustomFilter.company_id = '".SES_COMP."' and CustomFilter.user_id =  '".SES_ID."' and CustomFilter.id=".$customfilterid." ORDER BY CustomFilter.dt_created DESC ";
            $getfilter = $this->CustomFilter->find('first', array('conditions' => array('CustomFilter.company_id' => SES_COMP, 'CustomFilter.user_id' => SES_ID, 'CustomFilter.id' => $customfilterid), 'order' => 'CustomFilter.dt_created DESC'));
            $caseStatus = $getfilter['CustomFilter']['filter_status'];
            $priorityFil = $getfilter['CustomFilter']['filter_priority'];
            $caseTypes = $getfilter['CustomFilter']['filter_type_id'];
            $caseUserId = $getfilter['CustomFilter']['filter_member_id'];
            $caseComment = $getfilter['CustomFilter']['filter_comment'];
            $caseAssignTo = $getfilter['CustomFilter']['filter_assignto'];
            $caseDate = $getfilter['CustomFilter']['filter_date'];
            $case_duedate = $getfilter['CustomFilter']['filter_duedate'];
            $caseSrch = $getfilter['CustomFilter']['filter_search'];
        }
        if ($caseMenuFilters) {
            setcookie('CURRENT_FILTER', $caseMenuFilters, COOKIE_REM, '/', DOMAIN_COOKIE, false, false);
        } else {
            setcookie('CURRENT_FILTER', $caseMenuFilters, COOKIE_REM, '/', DOMAIN_COOKIE, false, false);
        }
        $caseUrl = $this->data['caseUrl'];
        $curProjId = null;
        $curProjShortName = null;
        if ($projUniq != 'all') {
            //$this->ProjectUser->bindModel(array('belongsTo' => array('Project')));
            $this->ProjectUser->bindModel(array('belongsTo' => array('Project')));
            $projArr = $this->ProjectUser->find('first', array('conditions' => array('Project.uniq_id' => $projUniq, 'ProjectUser.user_id' => SES_ID, 'Project.isactive' => 1, 'ProjectUser.company_id' => SES_COMP), 'fields' => array('Project.id', 'Project.short_name', 'ProjectUser.id')));
            if (count($projArr)) {
                $curProjId = $projArr['Project']['id'];
                $curProjShortName = $projArr['Project']['short_name'];

                //Updating ProjectUser table to current date-time
                if ($projIsChange != $projUniq) {
                    $ProjectUser['id'] = $projArr['ProjectUser']['id'];
                    $ProjectUser['dt_visited'] = GMT_DATETIME;
                    $this->ProjectUser->save($ProjectUser);
                }
            }
        }
        $view = new View($this);
        $tz = $view->loadHelper('Tmzone');
        $dt = $view->loadHelper('Datetime');
        $cq = $view->loadHelper('Casequery');
        $frmt = $view->loadHelper('Format');
        ######### Filter with Milestone ##########
        /*
          if($milestoneUid ){
          $mlst_cls = ClassRegistry::init('Milestone');
          //$mlist = $mlst_cls->find('first',array('conditions'=>array('Milestone.uniq_id'=>$milestoneUid),'fields'=>'Milestone.id,Milestone.title'));
          $mls = $mlst_cls->query("SELECT `Milestone`.`id`,`Milestone`.`title`,`Milestone`.`project_id`,`Milestone`.`end_date`,`Milestone`.`uniq_id`,`Milestone`.`isactive`,`Milestone`.`user_id`,COUNT(c.easycase_id) AS totalcases,GROUP_CONCAT(c.easycase_id) AS `caseids`  FROM milestones AS `Milestone` LEFT JOIN easycase_milestones AS c ON Milestone.id = c.milestone_id WHERE `Milestone`.`uniq_id` ='".$milestoneUid."'  AND `Milestone`.`company_id` = ".SES_COMP);
          //echo "<pre>";print_r($mls);exit;
          $resCaseProj['mlstTitle'] = $mls[0]['Milestone']['title'];
          $resCaseProj['mlstId'] = $mls[0]['Milestone']['id'];
          $resCaseProj['mlstUid'] = $milestoneUid;
          $resCaseProj['mlstProjId'] = $mls[0]['Milestone']['project_id'];
          $resCaseProj['mlsttotalCs'] = $mls[0][0]['totalcases'];
          $resCaseProj['mlsttype'] = $mls[0]['Milestone']['isactive'];

          $curCreated = $tz->GetDateTime(SES_TIMEZONE,TZ_GMT,TZ_DST,TZ_CODE,GMT_DATETIME,"datetime");
          $curTime = date('H:i:s',strtotime($curCreated));

          $closed_cases = $mlst_cls->query("SELECT EasycaseMilestone.milestone_id,COUNT(Easycase.id) as totcase FROM easycase_milestones AS EasycaseMilestone LEFT JOIN easycases as Easycase ON   EasycaseMilestone.easycase_id=Easycase.id WHERE Easycase.istype='1' AND Easycase.isactive='1' AND Easycase.legend='3' AND EasycaseMilestone.milestone_id='".$mls[0]['Milestone']['id']."'  GROUP BY  EasycaseMilestone.milestone_id");
          $tot_closed_case = $closed_cases[0][0]['totcase'];

          $endDate = $mls[0]['Milestone']['end_date']." ".$curTime;
          $days = $dt->dateDiff($endDate,$curCreated);

          $mlstDT = $dt->dateFormatOutputdateTime_day($mls[0]['Milestone']['end_date'],GMT_DATETIME,'week');

          $totalCs = $mls[0][0]['totalcases'];
          $totalClosedCs = 0;
          if($tot_closed_case){
          $totalClosedCs = $tot_closed_case;
          }
          $fill = 0;
          if($totalClosedCs != 0) {
          $fill = round((($totalClosedCs/$totalCs)*100));
          }

          $resCaseProj['intEndDate'] = strtotime($endDate);
          $resCaseProj['mlstdays_diff'] = $days;
          $resCaseProj['mlstDT'] = $mlstDT;
          $resCaseProj['mlstFill'] = $fill;
          $resCaseProj['totalClosedCs'] = $totalClosedCs;
          $resCaseProj['totalCs'] = $totalCs;

          $qry .=' AND EasycaseMilestone.milestone_id='.$mls[0]['Milestone']['id'];
          }else{
         */
        $resCaseProj['mlstTitle'] = '';
        $resCaseProj['mlstId'] = '';
        ######### Filter by CaseUniqId ##########
        $qry = "";
        if (!$this->Format->isAllowed('View All Task', $roleAccess)) {
            $qry.= " AND (Easycase.assign_to=" . SES_ID . " OR Easycase.user_id=".SES_ID.")";
        }
        if (trim($caseUrl)) {
            $qry.= " AND Easycase.uniq_id='" . $caseUrl . "'";
        }
        ######### Filter by Status ##########
        if ($caseStatus != "all") {
            $qry.= $this->Format->statusFilter($caseStatus);
            $stsLegArr = $caseStatus . "-" . "";
            $expStsLeg = explode("-", $stsLegArr);
            if (!in_array("upd", $expStsLeg)) {
                $qry.= " AND Easycase.type_id !=10";
            }
        }
        ######### Filter by Case Types ##########
        if ($caseTypes && $caseTypes != "all") {
            $qry.= $this->Format->typeFilter($caseTypes);
        }
        ######### Filter by Case Label ##########
        if (trim($caseLabel) && $caseLabel != "all") {
            $qry.= $this->Format->labelFilter($caseLabel, $curProjId, SES_COMP, SES_TYPE, SES_ID);
        }
        ######### Filter by Priority ##########
        if ($priorityFil && $priorityFil != "all") {
            $qry.= $this->Format->priorityFilter($priorityFil, $caseTypes);
        }
        ######### Filter by Member ##########
        if ($caseUserId && $caseUserId != "all") {
            $qry.= $this->Format->memberFilter($caseUserId);
        }
        ######### Filter by Member ##########
        if ($caseComment  && $caseComment != "all") {
            $qry.= $this->Format->commentFilter($caseComment, $curProjId, $case_date);
        }
        ######### Filter by AssignTo ##########
        if ($caseAssignTo && $caseAssignTo != "all") {
            $qry.= $this->Format->assigntoFilter($caseAssignTo);
        }

        ######### Search by KeyWord ##########
        $searchcase = "";
        if (trim(urldecode($caseSrch)) && (trim($case_srch) == "")) {
            $searchcase = $this->Format->caseKeywordSearch($caseSrch, 'full');
        }
        if (trim(urldecode($case_srch)) != "") {
            $searchcase = "AND (Easycase.case_no = '$case_srch')";
        }

        if (trim(urldecode($caseSrch))) {
            if ((substr($caseSrch, 0, 1)) == '#') {
                $tmp = explode("#", $caseSrch);
                $casno = trim($tmp['1']);
                $searchcase = " AND (Easycase.case_no = '" . $casno . "')";
            }
        }
        $cond_easycase_actuve = "";
        if ((isset($case_srch) && !empty($case_srch)) || isset($caseSrch) && !empty($caseSrch)) {
            $cond_easycase_actuve = "";
        } else {
            $cond_easycase_actuve = "AND Easycase.isactive=1";
        }
        if (trim($case_date) != "") {
            $frmTz = '+00:00';
            $toTz = $this->Tmzone->getGmtTz(TZ_GMT, TZ_DST);
            $GMT_DATE =$this->Tmzone->GetDateTime(SES_TIMEZONE, TZ_GMT, TZ_DST, TZ_CODE, GMT_DATETIME, "datetime");
            if (trim($case_date) == 'one') {
                $one_date = date('Y-m-d H:i:s', strtotime($GMT_DATE) - 3600);
                $qry.= " AND CONVERT_TZ(Easycase.dt_created,'".$frmTz."','".$toTz."') >='" . $one_date . "'";
            } elseif (trim($case_date) == '24') {
                $day_date = date("Y-m-d H:i:s", strtotime($GMT_DATE. " -1 day"));
                $qry.= " AND CONVERT_TZ(Easycase.dt_created,'".$frmTz."','".$toTz."') >='" . $day_date . "'";
            } elseif (trim($case_date) == 'week') {
                $week_date = date("Y-m-d H:i:s", strtotime($GMT_DATE . " -1 week"));
                $qry.= " AND CONVERT_TZ(Easycase.dt_created,'".$frmTz."','".$toTz."') >='" . $week_date . "'";
            } elseif (trim($case_date) == 'month') {
                $month_date = date("Y-m-d H:i:s", strtotime($GMT_DATE . " -1 month"));
                $qry.= " AND CONVERT_TZ(Easycase.dt_created,'".$frmTz."','".$toTz."') >='" . $month_date . "'";
            } elseif (trim($case_date) == 'year') {
                $year_date = date("Y-m-d H:i:s", strtotime($GMT_DATE . " -1 year"));
                $qry.= " AND CONVERT_TZ(Easycase.dt_created,'".$frmTz."','".$toTz."') >='" . $year_date . "'";
            } elseif (strstr(trim($case_date), ":")) {
                $ar_dt = explode(":", trim($case_date));
                $frm_dt = $ar_dt['0'];
                $to_dt = $ar_dt['1'];
                //$qry.= " AND DATE(Easycase.dt_created) >= '" . date('Y-m-d H:i:s', strtotime($frm_dt)) . "' AND DATE(Easycase.dt_created) <= '" . date('Y-m-d H:i:s', strtotime($to_dt)) . "'";
                $qry.= " AND DATE(CONVERT_TZ(Easycase.dt_created,'".$frmTz."','".$toTz."')) >= '" . date('Y-m-d', strtotime($frm_dt)) . "' AND DATE(CONVERT_TZ(Easycase.dt_created,'".$frmTz."','".$toTz."')) <= '" . date('Y-m-d', strtotime($to_dt)) . "'";
            }
        }
        if (trim($case_duedate) != "") {
            $frmTz = '+00:00';
            $toTz = $this->Tmzone->getGmtTz(TZ_GMT, TZ_DST);
            $GMT_DATE =$this->Tmzone->GetDateTime(SES_TIMEZONE, TZ_GMT, TZ_DST, TZ_CODE, GMT_DATETIME, "date");
            if (trim($case_duedate) == '24') {
                $day_date = date("Y-m-d H:i:s", strtotime(date("Y-m-d H:i:s", strtotime(date("Y-m-d H:i:s"))) . " +1 day"));
                $qry.= " AND (DATE(CONVERT_TZ(Easycase.due_date,'".$frmTz."','".$toTz."')) ='" . $GMT_DATE . "')";
            } elseif (trim($case_duedate) == 'overdue') {
                $week_date = date("Y-m-d H:i:s", strtotime(date("Y-m-d H:i:s", strtotime(date("Y-m-d H:i:s"))) . " +1 week"));
                $qry .= " AND ( DATE(CONVERT_TZ(Easycase.due_date,'".$frmTz."','".$toTz."')) <'" . $GMT_DATE . "') ";
            } elseif (strstr(trim($case_duedate), ":")) {
                $ar_dt = explode(":", trim($case_duedate));
                $frm_dt = $ar_dt['0'];
                $to_dt = $ar_dt['1'];
                $qry.= " AND DATE(CONVERT_TZ(Easycase.due_date,'".$frmTz."','".$toTz."')) >= '" . date('Y-m-d', strtotime($frm_dt)) . "' "
                        . "AND DATE(CONVERT_TZ(Easycase.due_date,'".$frmTz."','".$toTz."')) <= '" . date('Y-m-d', strtotime($to_dt)) . "'";
            }
        }
        //}
        $msQuery1 = " ";
        /* $resCaseProj['page_limit'] = $page_limit;
          $resCaseProj['csPage'] = $casePage;
          $resCaseProj['caseUrl'] = $caseUrl;
          $resCaseProj['projUniq'] = $projUniq;
          $resCaseProj['csdt'] = $caseDate;
          $resCaseProj['csTtl'] = $caseTitle;
          $resCaseProj['csDuDt'] = $caseDueDate;
          $resCaseProj['csCrtdDt'] = $caseCreateDate;
          $resCaseProj['csNum'] = $caseNum;
          $resCaseProj['csLgndSrt'] = $caseLegendsort;
          $resCaseProj['csAtSrt'] = $caseAtsort;
          $resCaseProj['caseMenuFilters'] = $caseMenuFilters;
          $resCaseProj['morecontent'] = $morecontent; */

        $from_input_yr = $this->data['from_view_year'];
        $from_input_mth = $this->data['from_view_month'];
        $to_input_yr = $this->data['to_view_year'];
        $to_input_mth = $this->data['to_view_month'];
        $yr_mnth_arr = array('12', '01', '02', '03', '04', '05', '06', '07', '08', '09', '10', '11');
        $no_of_days_in_a_month = cal_days_in_month(CAL_GREGORIAN, $yr_mnth_arr[$to_input_mth], $to_input_yr);
        $no_of_days_in_a_month = $no_of_days_in_a_month - 1;
        if ($to_input_mth == 0) {
        } else {
            $from_input_yr = $to_input_yr;
        }
        $from_view_date = $from_input_yr . '-' . $yr_mnth_arr[$to_input_mth] . '-01';
        //print $from_view_date;
        $to_view_date = date('Y-m-d', strtotime($from_view_date . '+ ' . $no_of_days_in_a_month . ' days'));
        $to_view_date = $to_view_date . ' 23:59:59';
        $proj_detl = '';
        $clt_sql = 1;
        if ($this->Auth->user('is_client') == 1) {
            $clt_sql = "((Easycase.client_status = " . $this->Auth->user('is_client') . " AND Easycase.user_id = " . $this->Auth->user('id') . ") OR Easycase.client_status != " . $this->Auth->user('is_client') . ")";
        }

        if ($projUniq) {
            //$this->Easycase->query('SET CHARACTER SET utf8');
            $page = $casePage;
            $limit2 = $page_limit;
            /* Code commented by Tapan Sir(24.12.2020)
             $sql = "SELECT Easycase.id,Easycase.case_no,Easycase.legend,Easycase.uniq_id,Easycase.actual_dt_created,"
                     . "Easycase.project_id, Easycase.title,Easycase.due_date,Easycase.gantt_start_date,Easycase.dt_created, Easycase.actual_dt_created, Easycase.custom_status_id,Easycase.parent_task_id,"
                     . "User.id,User.short_name,User.name,User.last_name,User.photo,"
                     . "IF((Easycase.assign_to = 0 OR Easycase.assign_to =" . SES_ID . "),'Me',User.short_name) AS Assigned "
                     . "FROM ( SELECT Easycase.* FROM easycases AS Easycase "
                     . "LEFT JOIN easycase_milestones AS EasycaseMilestone ON Easycase.id= EasycaseMilestone.easycase_id "
                     . "WHERE Easycase.istype='1' " . $cond_easycase_actuve . " AND Easycase.project_id!=0 ";
             */

            $sql = "SELECT Easycase.id,Easycase.case_no,Easycase.legend,Easycase.uniq_id,Easycase.actual_dt_created,"
                    . "Easycase.project_id, Easycase.title,Easycase.due_date,Easycase.gantt_start_date,Easycase.dt_created, Easycase.actual_dt_created, Easycase.custom_status_id,Easycase.parent_task_id,"
                    . "User.id,User.short_name,User.name,User.last_name,User.photo,"
                    . "IF((Easycase.assign_to = 0 OR Easycase.assign_to =" . SES_ID . "),'Me',User.short_name) AS Assigned "
                    . "FROM ( SELECT Easycase.id,Easycase.case_no,Easycase.legend,Easycase.uniq_id,Easycase.project_id, Easycase.title,Easycase.due_date,Easycase.gantt_start_date,
Easycase.dt_created, Easycase.actual_dt_created, Easycase.custom_status_id,Easycase.parent_task_id,Easycase.assign_to FROM easycases AS Easycase "
                    . "LEFT JOIN easycase_milestones AS EasycaseMilestone ON Easycase.id= EasycaseMilestone.easycase_id "
                    . "WHERE Easycase.istype='1' " . $cond_easycase_actuve . " AND Easycase.project_id!=0 ";
            if ($projUniq == 'all') {
                $sql .= " AND Easycase.project_id IN (SELECT ProjectUser.project_id "
                        . "FROM project_users AS ProjectUser,projects AS Project "
                        . "WHERE ProjectUser.user_id=" . SES_ID . " AND ProjectUser.project_id=Project.id AND Project.isactive='1' "
                        . "AND ProjectUser.company_id='" . SES_COMP . "') " . $searchcase . " " . trim($qry) . "  "
                        . "ORDER BY  Easycase.due_date DESC) AS Easycase ";
            } else {
                $sql .= " AND Easycase.project_id='$curProjId' " . $searchcase . " " . trim($qry) . " ) AS Easycase ";
            }

            $sql .= "LEFT JOIN users User ON Easycase.assign_to=User.id "
                    . "WHERE "
                    . " ((Easycase.due_date BETWEEN '" . $from_view_date . "' AND '" . $to_view_date . "') OR (Easycase.dt_created BETWEEN '" . $from_view_date . "' AND '" . $to_view_date . "') OR (Easycase.gantt_start_date BETWEEN '" . $from_view_date . "' AND '" . $to_view_date . "')) AND " . $clt_sql . " "
                    . "ORDER BY Easycase.due_date DESC";
            $caseAll['Task'] = $this->Easycase->query($sql);
            //$parent_task_id = array_filter(Hash::combine($caseAll, '{s}.{n}.Easycase.id', '{s}.{n}.Easycase.parent_task_id'));
            //$related_tasks = !empty($parent_task_id) ? $this->Easycase->getSubTasks($parent_task_id) : array();
            $related_tasks = array();
            #pr($parent_task_id);pr($related_tasks);exit;
            $msQ = "";
            if ($projUniq != 'all') {
                $usrDtlsAll = $this->ProjectUser->query("SELECT DISTINCT User.id, User.name, User.email, User.istype,User.email,User.short_name,"
                        . "User.photo,Easycase.project_id "
                        . "FROM users as User,easycases AS Easycase "
                        . "WHERE (Easycase.user_id=User.id || Easycase.updated_by=User.id || Easycase.assign_to=User.id) "
                        . "AND Easycase.project_id='" . $curProjId . "' AND Easycase.isactive='1' AND " . $clt_sql . " "
                        . "AND Easycase.istype IN('1','2') ORDER BY User.short_name");
            } else {
                $usrDtlsAll = $this->ProjectUser->query("SELECT DISTINCT User.id, User.name, User.email, User.istype,User.email,User.short_name,"
                        . "User.photo,Easycase.project_id "
                        . "FROM users as User,easycases as Easycase "
                        . "WHERE (Easycase.user_id=User.id || Easycase.updated_by=User.id || Easycase.assign_to=User.id) "
                        . "AND Easycase.project_id IN (SELECT ProjectUser.project_id "
                        . "FROM project_users AS ProjectUser,projects as Project "
                        . "WHERE ProjectUser.user_id=" . SES_ID . " AND ProjectUser.project_id=Project.id AND Project.isactive='1' "
                        . "AND ProjectUser.company_id='" . SES_COMP . "') AND Easycase.isactive='1' AND " . $clt_sql . " "
                        . "AND Easycase.istype IN('1','2') ORDER BY User.short_name");
            }
            if ($usrDtlsAll) {
                $p_ids = array_unique(Hash::extract($usrDtlsAll, '{n}.Easycase.project_id'));
            }
            if ($p_ids) {
                $this->Project->recursive = -1;
                $proj_detl = $this->Project->find('all', array('conditions' => array('Project.id' => $p_ids),
                    'fields' => array('Project.id', 'Project.uniq_id', 'Project.name', 'Project.short_name')));
                $proj_detl = Hash::combine($proj_detl, '{n}.Project.id', '{n}.Project');
            }
            $usrDtlsArr = array();
            $usrDtlsPrj = array();
            foreach ($usrDtlsAll as $ud) {
                $usrDtlsArr[$ud['User']['id']] = $ud;
            }
        } else {
            $CaseCount = 0;
        }
        if ($projUniq == 'all') {
            $allStatus = $this->Format->getStatusByProject('all');
            if ($allStatus) {
                $allStatus = Hash::combine($allStatus, '{n}.Project.id', '{n}.StatusGroup');
            }
        } else {
            $allStatus = $this->Format->getStatusByProject($curProjId);
            if ($allStatus) {
                $allStatus = Hash::combine($allStatus, '{n}.Project.id', '{n}.StatusGroup');
            }
        }
        
        $tskColrs = array(1=>'#DB7F6D', 5 => '#EFA05F', 3=> '#78B07D', 2=>'#658FD3',4=>'#658FD3', 6=>'#658FD3');
        //$resCaseProj['caseCount'] = $CaseCount;
        $calendarArr = array();
        if (isset($caseAll['Task']) && !empty($caseAll['Task'])) {
            $replace_arr = array('<' => '&lt;', '>' => '&gt;');
            foreach ($caseAll['Task'] as $k => $v) {
                $v['Easycase']['title'] = strtr($v['Easycase']['title'], $replace_arr);
                $ttl = $v['Easycase']['title'];
                if ($v['Easycase']['parent_task_id']) {
                    $ttl = $ttl.' <i title="Subtask" style="font-size:13px;"  class="material-icons">&#xE23E;</i>';
                }
                //$ttl = $this->Format->showSubtaskTitle($v['Easycase']['title'], $v['Easycase']['id'], $related_tasks);
                /* if ($ttl && strlen($ttl) > 40) {
                  #$ttl = substr($ttl, 0, 37) . '...';
                  #$ttl = utf8_decode(substr($ttl, 0, 35)) . '...';
                  $needle = " ";
                  $pos1 = strpos($ttl, $needle);
                  $pos2 = strpos($ttl, $needle, $pos1 + strlen($needle));
                  $pos3 = strpos($ttl, $needle, $pos2 + strlen($needle));
                  $ttl = html_entity_decode(substr($ttl, 0, $pos3)) . '...';
                  } */
                $calendarArr[$k]['title'] = $ttl;
                $calendarArr[$k]['original_title'] = $v['Easycase']['title'];
                /* changed fields are per gantt - GK */
                $start = '';
                $end = '';
                if (!empty($v['Easycase']['due_date']) && $v['Easycase']['due_date'] != '0000-00-00 00:00:00' && $v['Easycase']['due_date'] !='1970-01-01 00:00:00' && !empty($v['Easycase']['gantt_start_date']) && $v['Easycase']['gantt_start_date'] != '0000-00-00 00:00:00' && $v['Easycase']['gantt_start_date'] !='1970-01-01 00:00:00') { //start and due
                    $start = $this->Tmzone->GetDateTime(SES_TIMEZONE, TZ_GMT, TZ_DST, TZ_CODE, $v['Easycase']['gantt_start_date'], "date");
                    $end = $this->Tmzone->GetDateTime(SES_TIMEZONE, TZ_GMT, TZ_DST, TZ_CODE, $v['Easycase']['due_date'], "date");
                } elseif (!empty($v['Easycase']['gantt_start_date']) && $v['Easycase']['gantt_start_date'] != '0000-00-00 00:00:00' && $v['Easycase']['gantt_start_date'] !='1970-01-01 00:00:00') { // only start
                    $start = $this->Tmzone->GetDateTime(SES_TIMEZONE, TZ_GMT, TZ_DST, TZ_CODE, $v['Easycase']['gantt_start_date'], "date");
                    $end = $start;
                } elseif (!empty($v['Easycase']['due_date']) && $v['Easycase']['due_date'] != '0000-00-00 00:00:00' && $v['Easycase']['due_date'] !='1970-01-01 00:00:00') { // only due
                    $start = $this->Tmzone->GetDateTime(SES_TIMEZONE, TZ_GMT, TZ_DST, TZ_CODE, $v['Easycase']['due_date'], "date");
                    $end = $start;
                } else { //no start and due
                    $start = $this->Tmzone->GetDateTime(SES_TIMEZONE, TZ_GMT, TZ_DST, TZ_CODE, $v['Easycase']['dt_created'], "date");
                    $end = $start;
                }
                
                $current_time =  date('H:i:s');
                
                $calendarArr[$k]['start'] = $start." ".$current_time;
                $calendarArr[$k]['end'] = $end." ".$current_time;
                #$end = date("Y-m-d H:i:s", strtotime($v['Easycase']['start'] . " +30 minutes"));
                #$calendarArr[$k]['end'] = $this->Tmzone->GetDateTime(SES_TIMEZONE, TZ_GMT, TZ_DST, TZ_CODE, $end, "datetime");
                $calendarArr[$k]['actual_dt_created'] = $this->Tmzone->GetDateTime(SES_TIMEZONE, TZ_GMT, TZ_DST, TZ_CODE, $v['Easycase']['actual_dt_created'], "datetime");
                $calendarArr[$k]['srt_name'] = $v['User']['short_name'];
                $calendarArr[$k]['name'] = $v['User']['name'] . ' ' . $v['User']['last_name'];
                $calendarArr[$k]['photo'] = $v['User']['photo'];
                $calendarArr[$k]['profile_bg_colr'] = $this->User->getProfileBgColr($v['User']['id']);
                $calendarArr[$k]['assigned'] = $v[0]['Assigned'];
                $calendarArr[$k]['caseUniqId'] = $v['Easycase']['uniq_id'];
                $calendarArr[$k]['case_no'] = $v['Easycase']['case_no'];
                $calendarArr[$k]['caseId'] = $v['Easycase']['id'];
                $calendarArr[$k]['legend'] = $v['Easycase']['legend'];
                if ($allStatus) {
                    if (array_key_exists($v['Easycase']['project_id'], $allStatus)) {
                        $clrTask = $this->Format->getCustomStatusProj($allStatus, $v['Easycase']['project_id'], $v['Easycase']['custom_status_id']);
                        if ($clrTask) {
                            $calendarArr[$k]['clrCod'] = '#'.$clrTask['color'];
                        } else {
                            $calendarArr[$k]['clrCod'] = '';
                        }
                    } else {
                        $calendarArr[$k]['clrCod'] = ($tskColrs[$v['Easycase']['legend']])?'#'.$tskColrs[$v['Easycase']['legend']]:'#'.$tskColrs[1];
                    }
                } else {
                    $calendarArr[$k]['clrCod'] = ($tskColrs[$v['Easycase']['legend']])?'#'.$tskColrs[$v['Easycase']['legend']]:'#'.$tskColrs[1];
                }
                $calendarArr[$k]['projectName'] = $proj_detl[$v['Easycase']['project_id']]['name'];
                $calendarArr[$k]['projectSortName'] = strtoupper($proj_detl[$v['Easycase']['project_id']]['short_name']);
                $calendarArr[$k]['ProjectUniqId'] = $proj_detl[$v['Easycase']['project_id']]['uniq_id'];
            }
        }
        echo json_encode($calendarArr);
        exit;
    }

    /**
     * This function is moving to RequestController. Please do any latest changes there.
     * As this will be removed soon.
     */
    

    /*
     * Functionality for displaying TimeLog as events
     * in a calender view according the TimeLog Records Registererd
     * in the database.
     */

    public function getTimeLogs()
    {
        $this->layout = 'ajax';
        $this->Project = ClassRegistry::init('Project');
        $this->Project->recursive = -1;
        if ($this->data['projFil'] == 'all') {
            $ProjDetails = $this->Project->find('all', array("conditions" => array('Project.company_id' => SES_COMP), 'fields' => array('Project.id')));
            $ProjDetails = Hash::extract($ProjDetails, '{n}.Project.id');
            $ProjDetails['Project']['id'] = $ProjDetails;
        } else {
            $ProjDetails = $this->Project->find('first', array("conditions" => array('Project.uniq_id' => $this->data['projFil'])));
        }
        /* $this->Easycase->bindModel(
          array('hasMany' => array(
          'LogTime' => array(
          'className' => 'LogTime',
          'foreignKey' => 'task_id',
          )
          )
          )
          ); */
        $this->LogTime->bindModel(
            array('belongsTo' => array(
                        'User' => array(
                            'className' => 'User',
                            'foreignKey' => 'user_id',
                        ),
                        'Project' => array(
                            'className' => 'Project',
                            'foreignKey' => 'project_id',
                        ),
                        //added to remove containable
                        'Easycase' => array(
                            'className' => 'Easycase',
                            'foreignKey' => 'task_id',
                        )
                    )
                )
        );
        //$this->Easycase->Behaviors->attach('Containable');
        /* if (SES_TYPE == 3 && SES_ID != 13902) {
          $TaskDetails = $this->Easycase->find('all', array("contain" => array('LogTime' => array('User', 'conditions' => array('LogTime.user_id' => SES_ID)), array('Project')), "conditions" => array('Easycase.project_id' => $ProjDetails['Project']['id'], 'Easycase.isactive' => 1)));
          } else {
          $TaskDetails = $this->Easycase->find('all', array("contain" => array('LogTime' => array('User', 'Project')), "conditions" => array('Easycase.project_id' => $ProjDetails['Project']['id'], 'Easycase.isactive' => 1)));
          } */

        // added newly
        $from_input_yr = $this->data['from_view_year'];
        $from_input_mth = $this->data['from_view_month'];
        $to_input_yr = $this->data['to_view_year'];
        $to_input_mth = $this->data['to_view_month'];
        $yr_mnth_arr = array('12', '01', '02', '03', '04', '05', '06', '07', '08', '09', '10', '11');
        $no_of_days_in_a_month = cal_days_in_month(CAL_GREGORIAN, $yr_mnth_arr[$to_input_mth], $to_input_yr);
        $no_of_days_in_a_month = $no_of_days_in_a_month - 1;
        if ($to_input_mth == 0) {
        } else {
            $from_input_yr = $to_input_yr;
        }
        $from_view_date = $from_input_yr . '-' . $yr_mnth_arr[$to_input_mth] . '-01';
        //print $from_view_date;
        $to_view_date = date('Y-m-d', strtotime($from_view_date . '+ ' . $no_of_days_in_a_month . ' days'));
        $to_view_date = $to_view_date . ' 23:59:59';

        if ((SES_TYPE == 3 && SES_ID != 13902) && !$this->Format->isAllowed('View All Timelog', $roleAccess)) {
            /* $TaskDetails = $this->Easycase->find('all', array("contain" => array('LogTime' => array('conditions' => array("LogTime.task_date >"=>$from_view_date , "LogTime.task_date <"=>$to_view_date,'LogTime.user_id' => SES_ID),'User','Project')), "conditions" => array('Easycase.project_id' => $ProjDetails['Project']['id'], 'Easycase.isactive' => 1))); */
            $TaskDetails = $this->LogTime->find('all', array("conditions" => array("LogTime.task_date >=" => $from_view_date, "LogTime.task_date <=" => $to_view_date, "LogTime.project_id" => $ProjDetails['Project']['id'], 'LogTime.user_id' => SES_ID, 'Easycase.isactive' => 1), "fields" => array('LogTime.*', 'Easycase.id', 'Easycase.uniq_id', 'Easycase.case_no', 'Easycase.title', 'Project.id', 'Project.uniq_id', 'Project.name', 'Project.short_name', 'User.id', 'User.uniq_id', 'User.name', 'User.email', 'User.short_name', 'User.photo')));
        } else {
            /* $TaskDetails = $this->Easycase->find('all', array("contain" => array('LogTime' => array('conditions' => array("LogTime.task_date >"=>$from_view_date , "LogTime.task_date <"=>$to_view_date),'User', 'Project')), "conditions" => array('Easycase.project_id' => $ProjDetails['Project']['id'], 'Easycase.isactive' => 1))); */
            $TaskDetails = $this->LogTime->find('all', array("conditions" => array("LogTime.task_date >=" => $from_view_date, "LogTime.task_date <=" => $to_view_date, "LogTime.project_id" => $ProjDetails['Project']['id'], 'Easycase.isactive' => 1), "fields" => array('LogTime.*', 'Easycase.id', 'Easycase.uniq_id', 'Easycase.case_no', 'Easycase.title', 'Project.id', 'Project.uniq_id', 'Project.name', 'Project.short_name', 'User.id', 'User.uniq_id', 'User.name', 'User.email', 'User.short_name', 'User.photo')));
        }
        //pr($TaskDetails);exit;
        //$log = $this->Easycase->getDataSource()->showLog(false);debug($log);exit;
        $arr = array();
        $cnt = 0;
        $dt_no_time = array();
        for ($i = 0; $i < count($TaskDetails); $i++) {
            //for ($j = 0; $j < count($TaskDetails[$i]['LogTime']); $j++) {
            $arr[$cnt]['title'] = $TaskDetails[$i]['Easycase']['title'];
            $arr[$cnt]['case_no'] = $TaskDetails[$i]['Easycase']['case_no'];
            $arr[$cnt]['original_title'] = $TaskDetails[$i]['Easycase']['title'];
            $arr[$cnt]['log_id'] = $TaskDetails[$i]['LogTime']['log_id'];
            $arr[$cnt]['user_id'] = $TaskDetails[$i]['LogTime']['user_id'];
            if ($TaskDetails[$i]['LogTime']['timesheet_flag'] == 1) {
                /**
                Set start and end time for those timelogs which are entered from timesheet
                **/
            
                $indx = date('Ymd', strtotime($TaskDetails[$i]['LogTime']['task_date']));
                if (isset($dt_no_time[$indx])) {
                    $dt_no_time[$indx]['start'] = $dt_no_time[$indx]['start'] + $dt_no_time[$indx]['end'] ;
                } else {
                    $dt_no_time[$indx]['start'] = 0;
                }
                $dt_no_time[$indx]['end'] = $TaskDetails[$i]['LogTime']['total_hours'];
            
                $arr[$cnt]['start'] = $TaskDetails[$i]['LogTime']['task_date'] . "T" . gmdate("H:i:s", (int) $dt_no_time[$indx]['start']);
                $arr[$cnt]['end'] = $TaskDetails[$i]['LogTime']['task_date'] . "T" . gmdate("H:i:s", (int) $dt_no_time[$indx]['end']);
            
            /**
            End
            **/
            } else {
                $arr[$cnt]['start'] = $TaskDetails[$i]['LogTime']['task_date'] . "T" . $TaskDetails[$i]['LogTime']['start_time'];
                $arr[$cnt]['end'] = $TaskDetails[$i]['LogTime']['task_date'] . "T" . $TaskDetails[$i]['LogTime']['end_time'];
            }
            $arr[$cnt]['duration'] = ($TaskDetails[$i]['LogTime']['timesheet_flag'] && $TaskDetails[$i]['LogTime']['start_time'] == '00:00:00') ? $this->Format->format_time_hr_min($TaskDetails[$i]['LogTime']['total_hours']) : $this->get_time_difference($TaskDetails[$i]['LogTime']['start_time'], $TaskDetails[$i]['LogTime']['end_time'], $TaskDetails[$i]['LogTime']['break_time']);
            $arr[$cnt]['prj_nm'] = $TaskDetails[$i]['Project']['short_name'];
            $arr[$cnt]['name'] = $TaskDetails[$i]['User']['name'];
            $arr[$cnt]['email'] = $TaskDetails[$i]['User']['email'];
            $arr[$cnt]['short_name'] = $TaskDetails[$i]['User']['short_name'];
            $arr[$cnt]['photo'] = $TaskDetails[$i]['User']['photo'];
            $arr[$cnt]['uniq_id'] = $TaskDetails[$i]['User']['uniq_id'];
            $arr[$cnt]['prj_uniq_id'] = $TaskDetails[$i]['Project']['uniq_id'];

            $arr[$cnt]['allDay'] = 0;
            $cnt++;
            //}
        }
        echo json_encode($arr);
        exit;
    }

    /**
     * Functionality for Returning the time
     * difference of two times given by the user and
     * @return in hours and minutes. Ex - 05 Hrs & 23 Mins.
     */
    public function get_time_difference($time1, $time2, $time3 = null)
    {
        $time1 = strtotime("1980-01-01 $time1");
        $time2 = strtotime("1980-01-01 $time2");
        if ($time2 < $time1) {
            $time2 += 86400;
        }
        $act_time = $time2 - $time1;
        if ($time3) {
            $act_time = $act_time - $time3;
        }
        $difference = date("H:i:s", strtotime("1980-01-01 00:00:00") + $act_time);
        $totalHrsArr = explode(":", $difference);
        $totalDuration = $totalHrsArr[0] . " Hrs & " . $totalHrsArr[1] . " Mins";
        return $totalDuration;
    }

    public function updateDueDate()
    {
        $retJson = array('status' => 'success');
        if ($this->data['uniq_id']) {
            $Easycase = $this->Easycase->find('first', array('conditions' => array('Easycase.uniq_id' => trim($this->data['uniq_id']),'Easycase.istype' => 1), 'fields' => array('Easycase.id')));
            if ($Easycase) {
                $this->Easycase->id = $Easycase['Easycase']['id'];
                $this->Easycase->saveField('due_date', $this->data['date']);
            } else {
                $retJson['status'] = 'FAIL';
            }
        } else {
            $retJson['status'] = 'FAIL';
        }
        echo json_encode($retJson);
        exit;
    }

    /**
     * @method: public taskDownload() Create downloadable folder which will contain a .csv File and a Folder containg all the Attachment
     * @return string Returns the downloadable URL
     * @author GDR<abc@mydomain.com>
     */
    public function taskDownload()
    {
        if (defined('USE_S3') && USE_S3 == 1) {
            $s3 = new S3(awsAccessKey, awsSecretKey);
        }
        $caseUniqId = $this->data['caseUid'];
        //$caseUniqId = '8d082f712782302aafe8a62129f7cc24';
        $this->layout = 'ajax';
        $sorting = '';
        $ProjId = null;
        $ProjName = null;
        $curCaseNo = null;
        $curCaseId = null;
        ######## get case number from case uniq ID ################
        $getCaseNoPjId = $this->Easycase->getEasycase($caseUniqId);
        if ($getCaseNoPjId) {
            $curCaseNo = $getCaseNoPjId['Easycase']['case_no'];
            $curCaseId = $getCaseNoPjId['Easycase']['id'];
            $prjid = $getCaseNoPjId['Easycase']['project_id'];
            $is_active = (intval($getCaseNoPjId['Easycase']['isactive'])) ? 1 : 0;
        } else {
            //No task with uniq_id $caseUniqId
            die;
        }
        ######## Checking user_project ################
        $cond1 = array(
            'conditions' => array('ProjectUser.user_id' => SES_ID, 'ProjectUser.company_id' => SES_COMP, 'Project.isactive' => 1, 'Project.id' => $prjid),
            'fields' => array('DISTINCT Project.id', 'Project.uniq_id', 'Project.name', 'Project.short_name')
        );
        $this->ProjectUser->bindModel(array('belongsTo' => array('Project')));
        $getProjId = $this->ProjectUser->find('first', $cond1);
        if ($getProjId) {
            $ProjId = $getProjId['Project']['id'];
            $projUniqId = $getProjId['Project']['uniq_id'];
            $ProjName = $getProjId['Project']['name'];
            $projShorName = $getProjId['Project']['short_name'];
        } else {
            //Session user not assigned the project $prjid
            die;
        }
        $sqlcasedata = array();
        $getPostCase = array();
        if ($ProjId && $curCaseNo) {
            //$getPostCase = $this->Easycase->query("SELECT Easycase.*, User1.name AS created_by , User2.name as updated_by , User3.name AS Assigned_to  FROM easycases as Easycase LEFT JOIN users User1 ON Easycase.user_id=User1.id LEFT JOIN users User2 ON Easycase.updated_by= User2.id LEFT JOIN users User3 ON Easycase.assign_to= User3.id WHERE Easycase.project_id='".$ProjId."' AND Easycase.case_no=".$curCaseNo." AND (Easycase.legend !=6) ORDER BY Easycase.actual_dt_created ASC");
            $getPostCase = $this->Easycase->query("SELECT Easycase.*, User1.name AS created_by , User2.name as updated_by , IF(Easycase.assign_to > 0, User3.name ,'Nobody') AS Assigned_to  "
                    . "FROM easycases as Easycase "
                    . "LEFT JOIN users User1 ON Easycase.user_id=User1.id "
                    . "LEFT JOIN users User2 ON Easycase.updated_by= User2.id "
                    . "LEFT JOIN users User3 ON Easycase.assign_to= User3.id "
                    . "WHERE Easycase.project_id='" . $ProjId . "' AND Easycase.case_no=" . $curCaseNo . " AND (Easycase.istype='1' OR Easycase.legend !=6) "
                    . "ORDER BY Easycase.actual_dt_created ASC");
            $estimated_hours = (isset($getPostCase['0']['Easycase']) && !empty($getPostCase['0']['Easycase'])) ? $this->Format->format_time_hr_min($getPostCase['0']['Easycase']['estimated_hours']) : '0.0';
            #$getHours = $this->Easycase->query("SELECT SUM(hours) as hours FROM easycases as Easycase WHERE project_id='" . $ProjId . "' AND case_no=" . $curCaseNo . " AND reply_type=0");
            $getHours = $this->Easycase->query("SELECT SUM(total_hours) as hours FROM log_times as LogTime WHERE project_id='" . $ProjId . "' AND task_id=" . $curCaseId . "");
            $hours = $getHours[0][0]['hours'];
        #$getcompletedtask = $this->Easycase->query("SELECT completed_task  FROM easycases as Easycase WHERE project_id='".$ProjId."' AND case_no=".$curCaseNo."  and completed_task != 0 ORDER BY id DESC LIMIT 1");
            #$completedtask  = $getcompletedtask[0]['Easycase']['completed_task'];
        } else {
            #$ProjId and $curCaseNo not found. This step should not, b'cos it handeled previously.
            die;
        }
        $view = new View();
        $cq = $view->loadHelper('Casequery');
        $frmt = $view->loadHelper('Format');
        $curdt = date('F_dS_Y', time());
        $filename = strtoupper($projShorName) . '_TASK_' . $curCaseNo . "_" . $curdt . '.csv';
        //$filename = $ProjName . "_#".$curCaseNo."_" . date("mdY", time()).'.csv';
        $folder_name = strtoupper($projShorName) . '_TASK_' . $curCaseNo . "_" . $curdt;
        if (file_exists(DOWNLOAD_TASK_PATH . $folder_name)) {
            @chmod(DOWNLOAD_TASK_PATH . $folder_name . "/attachments", 0777);
            @array_map('unlink', glob(DOWNLOAD_TASK_PATH . $folder_name . "/attachments/*"));
            @rmdir(DOWNLOAD_TASK_PATH . $folder_name . '/attachments');
            @array_map('unlink', glob(DOWNLOAD_TASK_PATH . $folder_name . "/*"));
            $isdel = @rmdir(DOWNLOAD_TASK_PATH . $folder_name);
        }
        @mkdir(DOWNLOAD_TASK_PATH . $folder_name, 0777, true);
        $file = @fopen(DOWNLOAD_TASK_PATH . $folder_name . '/' . $filename, "w");
        $csv_output = "Title, Description, Status, Priority, Task Type, Assigned To, Created By, Last Updated By, Created On, Estimated Hours, Hours Spent";
        @fputcsv($file, explode(',', $csv_output));
        foreach ($getPostCase as $key => $case_list) {
            $status = '';
            $priority = '';
            $tasktype = '';
            $taskTitle = '';
            //if(!$key) {
            if (isset($case_list['Easycase']['title']) && $case_list['Easycase']['title']) {
                $taskTitle = $case_list['Easycase']['title'];
            }
            if ($case_list['Easycase']['custom_status_id']) {
                $status = $this->Format->displayCustomStatus($case_list['Easycase']['custom_status_id']);
            } else {
                $status = $this->Format->displayStatus($inpt_status);
            }
            if ($case_list['Easycase']['priority'] == 2) {
                $priority = 'Low';
            } elseif ($case_list['Easycase']['priority'] == 1) {
                $priority = 'Medium';
            } elseif ($case_list['Easycase']['priority'] == 0) {
                $priority = 'High';
            }
            $types = $cq->getTypeArr($case_list['Easycase']['type_id'], $GLOBALS['TYPE']);
            if (count($types)) {
                $tasktype = $types['Type']['name'];
            }
            //}
            $arr = [];
            $arr[] = $title = str_replace('"', '""', $case_list['Easycase']['title']);
            $arr[] = $description = ($case_list['Easycase']['message'] != '') ? strip_tags(str_replace('"', '""', $case_list['Easycase']['message'])) : '';
            $arr[] = $status;
            $arr[] = $priority;
            $arr[] = $tasktype;
            if ($case_list['0']['Assigned_to']) {
                $Assigned = $case_list['0']['Assigned_to'];
            } else {
                $Assigned = $case_list['User1']['created_by'];
            }
            $arr[] = $Assigned;
            $arr[] = $crby = $case_list['User1']['created_by'];
            $arr[] = $updateby = $case_list['User2']['updated_by'];

            $tz = $view->loadHelper('Tmzone');
            $temp_dat = $tz->GetDateTime(SES_TIMEZONE, TZ_GMT, TZ_DST, TZ_CODE, $case_list['Easycase']['actual_dt_created'], "datetime");
            $arr[] = $crted = date('m/d/Y H:i:s', strtotime($temp_dat));

            //$arr[] = $crted =date('m/d/Y H:i:s', strtotime($case_list['Easycase']['actual_dt_created']));
            $estmthrs = '';
            $hrspent = '';
            if ($case_list['Easycase']['istype'] == 1) {
                $estmthrs = $estimated_hours;
                $hrspent = $this->Format->format_time_hr_min($hours);
            } else {
                $estimated_hours = '';
                $hrspent = 0; #$case_list['Easycase']['hours'];
            }
            $arr[] = $estimated_hours;
            $arr[] = $hrspent;
            $easycaseids[] = $case_list['Easycase']['id'];
            $retval = @fputcsv($file, $arr);
            //$csv_output .= $title.",".$status.",".$priority.",".$tasktype.",".$description.",".$Assigned.",".$crby.",".$updateby.",".$estmthrs.",".$hrspent.",".$crted.",".$modified;
        }
        @fclose($file);
        if ($retval) {
            $filesarr = ClassRegistry::init('CaseFile')->find('all', array('conditions' => array('CaseFile.easycase_id' => $easycaseids, 'CaseFile.project_id' => $ProjId, 'CaseFile.company_id' => SES_COMP)));
            if ($filesarr && $this->Format->isAllowed('Download File')) {
                foreach ($filesarr as $k => $value) {
                    if ($value['CaseFile']['downloadurl']) {
                        if (!isset($fp)) {
                            $fp = fopen(DOWNLOAD_TASK_PATH . $folder_name . '/cloud.txt', 'a+');
                        }
                        @fwrite($fp, "\n\t" . $value['CaseFile']['downloadurl'] . "\n");
                        $temp_url = $value['CaseFile']['downloadurl'];
                    } else {
                        if (!file_exists(DOWNLOAD_TASK_PATH . $folder_name . '/attachments')) {
                            mkdir(DOWNLOAD_TASK_PATH . $folder_name . "/attachments", 0777, true);
                        }
                        $url = $value['CaseFile']['upload_name'] != '' ? $value['CaseFile']['upload_name'] : $value['CaseFile']['file'];
                        if (defined('USE_S3') && USE_S3 == 1) {
                            $temp_url = $frmt->generateTemporaryURL(DIR_CASE_FILES_S3 . $url);
                        } else {
                            $temp_url = HTTP_CASE_FILES . $url;
                        }
                        $img = DOWNLOAD_TASK_PATH . $folder_name . "/attachments/" . $url;
                        $resp = file_put_contents($img, file_get_contents($temp_url));
                    }
                }
                if (isset($fp)) {
                    @fclose($fp);
                }
            }
            $zipfile_name = strtoupper($projShorName) . '_TASK_' . $curCaseNo . "_" . $curdt . '.zip';
            $zipfile = DOWNLOAD_TASK_PATH . 'zipTask'.DS . $zipfile_name;
            $return = $this->Format->zipFile(DOWNLOAD_TASK_PATH . $folder_name, $zipfile, 1);
            if ($return) {
                if (file_exists(DOWNLOAD_TASK_PATH . $folder_name)) {
                    @array_map('unlink', glob(DOWNLOAD_TASK_PATH . $folder_name . "/attachments/*"));
                    @rmdir(DOWNLOAD_TASK_PATH . $folder_name . '/attachments');
                    @array_map('unlink', glob(DOWNLOAD_TASK_PATH . $folder_name . "/*"));
                    $isdel = @rmdir(DOWNLOAD_TASK_PATH . $folder_name);
                }
                if (defined('USE_S3') && USE_S3 == 1) {
                    $s3->putBucket(DOWNLOAD_BUCKET_NAME, S3::ACL_PRIVATE);
                    $download_url = DOWNLOAD_S3_TASK_PATH . $zipfile_name;
                    $s3_download_url = "https://s3.amazonaws.com/" . DOWNLOAD_BUCKET_NAME . '/' . DOWNLOAD_S3_TASK_PATH . $zipfile_name;
                    $returnvalue = $s3->putObjectFile(DOWNLOAD_S3_TASK_PATH . $zipfile_name, DOWNLOAD_BUCKET_NAME, $download_url, S3::ACL_PUBLIC_READ);
                    if ($returnvalue) {
                        @unlink(DOWNLOAD_S3_TASK_PATH . $zipfile_name);
                    }
                    $this->set('downloadurl', $s3_download_url);
                } else {
                    $this->set('downloadurl', HTTP_ROOT . 'DownloadTask/zipTask/' . $zipfile_name);
                }
                $this->set('projName', $ProjName);
                $this->set('projId', $ProjId);
                $this->set('caseUid', $caseUniqId);
                $this->set('caseNum', $curCaseNo);
                $this->set('taskTitle', $taskTitle);
                $this->set('zipfilename', $zipfile_name);
            } else {
                $this->set('derror', __('Oops! Error occured in creation of zip file.', true));
            }
        } else {
            $this->set('derror', __('Oops! Error occured in creating the task csv file.', true));
        }
    }

    /**
     * @method: sendDownloadTaskMail() Used for sending email to the user with the download link of the Task
     */
    public function sendDownloadTaskMail()
    {
        $caseNum = $this->data['caseNum'];
        $projName = $this->data['projName'];
        $downloadUrl = $this->data['dwnldUrl'];
        $title = $this->data['taskTitle'];
        $zipfile = $this->data['zipfile'];
        $subject = __('Download Task# ') . $caseNum . ": " . $title;

        $userdetails = $this->User->query('SELECT User.*,Company.name FROM users User,company_users AS CompanyUser,companies AS Company WHERE User.id=CompanyUser.user_id AND CompanyUser.company_id=Company.id AND CompanyUser.company_id=' . SES_COMP . ' AND User.id=' . SES_ID);

        $this->Email->delivery = 'smtp';
        $this->Email->to = $userdetails[0]['User']['email'];
        $this->Email->subject = $subject;
        $this->Email->from = FROM_EMAIL;
        //		$this->Email->filePaths  = array(DOWNLOAD_TASK_PATH.'zipTask/');
        //		$this->Email->attachments =array(SES_COMP."_".$caseNum."_".$projName.".zip");
        $this->Email->attachments = array(DOWNLOAD_TASK_PATH . 'zipTask/' . $zipfile);
        $this->Email->template = 'download_task';
        $this->Email->sendAs = 'html';
        $this->set('download_url', $downloadUrl);
        $this->set('userdetails', $userdetails[0]);
        $this->set('caseNum', $caseNum);
        $this->set('projName', $projName);
        $this->set('title', $title);
        $this->set('zipfile', $zipfile);
        if (defined("PHPMAILER") && PHPMAILER == 1) {
            $this->Email->set_variables = $this->render('/Emails/html/download_task', false);
            if ($this->PhpMailer->sendPhpMailerTemplate($this->Email)) {
                @unlink(DOWNLOAD_TASK_PATH . 'zipTask/' . $zipfile);
                echo 'Success';
                exit;
            } else {
                echo 'Failure';
                exit;
            }
        } else {
            if ($this->Sendgrid->sendgridsmtp($this->Email)) {
                @unlink(DOWNLOAD_TASK_PATH . 'zipTask/' . $zipfile);
                echo 'Success';
                exit;
            } else {
                echo 'Failure';
                exit;
            }
        }
    }

    public function add_tasklog($data = null)
    {
        // pr($data);
        // exit;
        $this->loadModel('Project');
        $this->loadModel('LogTime');
        $this->loadModel('Easycase');
        $logdata = isset($data) && !empty($data) ? $data : $this->data;
        $log_id = !empty(trim($this->data['log_id'])) ? trim($this->data['log_id']) : $log_id;
        $mode = $log_id > 0 ? "edit" : "add";
        $slashes = $log_id > 0 ? '"' : '';
        $this->Project->recursive = -1;
        $projid = $this->Project->find('first', array('conditions' => array('Project.uniq_id' => $logdata['project_id']), 'fields' => array('Project.id')));
        $project_id = $projid['Project']['id'];
        $task_id = isset($logdata['task_id']) ? trim($logdata['task_id']) : intval($logdata['hidden_task_id']);

        $allowed = $this->task_dependency($task_id);
        if ($allowed == 'No') {
            if (isset($data) && !empty($data)) {
                return json_encode(array('success' => 'depend', 'message' => __('Dependant tasks are not closed.')));
            } else {
                echo json_encode(array('success' => 'depend', 'message' => __('Dependant tasks are not closed.', true)));
                exit;
            }
        }
        $getCase = $this->Easycase->find('first', array(
            'conditions' => array(
                'Easycase.id' => $task_id, 'Easycase.isactive' => 1,'Easycase.istype' => 1
            ),
            'fields' => array('Easycase.id','Easycase.uniq_id','Easycase.title','Easycase.project_id','Easycase.case_no','Easycase.user_id','Easycase.type_id','Easycase.priority','Easycase.assign_to','Easycase.story_point','Easycase.legend','Easycase.custom_status_id','Easycase.reply_type','Easycase.dt_created','Easycase.estimated_hours','Easycase.status','Easycase.gantt_start_date','Easycase.due_date')
        ));
        if ($getCase) {
            $users = $logdata['user_id'];
            $task_dates = $logdata['task_date'];
            $start_time = $logdata['start_time'];
            $end_time = $logdata['end_time'];
            $totalbreak = $logdata['totalbreak'];
            $totalduration = $logdata['totalduration'];

            $task_details = $getCase;
            if (!empty($task_details)) {
                $project_id = $task_details['Easycase']['project_id'];
            } else {
                echo json_encode(array('success' => 'No', 'message' => __('Invalid argument supplied.', true)));
                exit;
            }
            $easycase_uniq_id = $task_details['Easycase']['uniq_id'];
            $this->Format = $this->Components->load('Format');
            $caseuniqid = $this->Format->generateUniqNumber();
            $reply_type = isset($logdata['task_id']) ? 10 : 11;
            /*$this->Easycase->query("INSERT INTO easycases SET uniq_id='" . $caseuniqid . "', case_no = '" . $task_details['Easycase']['case_no'] . "', 	case_count=0, project_id='" . $task_details['Easycase']['project_id'] . "', user_id='" . SES_ID . "', updated_by=0, type_id='" . $task_details['Easycase']['type_id'] . "', priority='" . $task_details['Easycase']['priority'] . "', title='', message='', hours='0', assign_to='" . $task_details['Easycase']['assign_to'] . "', istype='2',format='2', status='" . $task_details['Easycase']['status'] . "', legend='" . $task_details['Easycase']['legend'] . "', isactive=1, dt_created='" . GMT_DATETIME . "',actual_dt_created='" . GMT_DATETIME . "',reply_type=" . $reply_type . "");*/
            $task_status = 0;
            $cntr = count($logdata['totalduration']);
            $chkids = isset($data) && !empty($data) ? $logdata['chked_ids'] : @array_flip(explode(",", rtrim($logdata['chked_ids'], ",")));
            $LogTime = array();
            $total_time_log_hours = 0;
            for ($i = 0; $i < $cntr; $i++) {
                $task_date = date('Y-m-d', strtotime($task_dates[$i]));
                if ($mode != 'edit') {
                    $LogTime[$i]['project_id'] = $project_id;
                    $LogTime[$i]['task_id'] = $task_id;
                    if ($users[$i] != '') {
                        $LogTime[$i]['user_id'] = $users[$i];
                    }
                    $LogTime[$i]['task_status'] = $task_status;
                    $LogTime[$i]['ip'] = $_SERVER['REMOTE_ADDR'];
                }

                if ($start_time[$i] != '' && $end_time[$i] != '') {
                    /* Functionality for skip time duration while adding timelog --Start-- */
                    if (isset($logdata['skip_timeDuration']) && ($logdata['skip_timeDuration'] == '1')) {
                        $dt_start = '00:00:00';
                        $dt_end = '23:59:00';
                        $LogTime[$i]['timesheet_flag'] = 1;
                    /* Functionality for skip time duration while adding timelog --End-- */
                    } else {
                        $LogTime[$i]['timesheet_flag'] = 0;
                        /* start time set start */
                        $spdts = explode(':', $start_time[$i]);
                        #converted to min
                        if (SES_TIME_FORMAT == 12) {
                            if (strpos($start_time[$i], 'am') === false) {
                                $nwdtshr = ($spdts[0] != 12) ? ($spdts[0] + 12) : $spdts[0];
                                $dt_start = strstr($nwdtshr . ":" . $spdts[1], 'pm', true) . ":00";
                            } else {
                                $nwdtshr = ($spdts[0] != 12) ? ($spdts[0]) : '00';
                                $dt_start = strstr($nwdtshr . ":" . $spdts[1], 'am', true) . ":00";
                            }
                        } else {
                            //$nwdtshr = ($spdts[0] != 12) ? ($spdts[0] ) : '00';
                            $nwdtshr = $spdts[0];
                            $dt_start = $nwdtshr . ":" . $spdts[1] . ":00";
                        }
                        $minute_start = ($nwdtshr * 60) + $spdts[1];
                        /* start time set end */

                        /* end time set start */
                        $spdte = explode(':', $end_time[$i]);
                        #converted to min
                        if (SES_TIME_FORMAT == 12) {
                            if (strpos($end_time[$i], 'am') === false) {
                                $nwdtehr = ($spdte[0] != 12) ? ($spdte[0] + 12) : $spdte[0];
                                $dt_end = strstr($nwdtehr . ":" . $spdte[1], 'pm', true) . ":00";
                            } else {
                                $nwdtehr = ($spdte[0] != 12) ? ($spdte[0]) : '00';
                                $dt_end = strstr($nwdtehr . ":" . $spdte[1], 'am', true) . ":00";
                            }
                        } else {
                            // $nwdtehr = ($spdte[0] != 12) ? ($spdte[0]) : '00';
                            $nwdtehr = $spdte[0];
                            $dt_end = $nwdtehr . ":" . $spdte[1] . ":00";
                        }
                        $minute_end = ($nwdtehr * 60) + $spdte[1];
                        /* end time set end */

                        /* checking if start is greater than end then add 24 hr in end i.e. 1440 min */
                        $duration = $minute_end >= $minute_start ? ($minute_end - $minute_start) : (($minute_end + 1440) - $minute_start);
                        $task_end_date = $minute_end >= $minute_start ? $task_date : date('Y-m-d', strtotime($task_date . ' +1 day'));

                        /* total working */
                        $break_time = trim($totalbreak[$i]);
                        if (strpos($break_time, '.')) {
                            $split_break = ($break_time * 60);
                            $break_hour = (intval($split_break / 60) < 10 ? "0" : "") . intval($split_break / 60);
                            $break_min = (intval($split_break % 60) < 10 ? "0" : "") . intval($split_break % 60);
                            $break_time = $break_hour . ":" . $break_min;
                            $minute_break = $split_break;
                        } elseif (strpos($break_time, ':')) {
                            $split_break = explode(':', $break_time);
                            #converted to min
                            $minute_break = ($split_break[0] * 60) + $split_break[1];
                        } else {
                            $break_time = $break_time . ":00";
                            $minute_break = $break_time;
                        }
                        $minute_break = $duration < $minute_break ? 0 : $minute_break;
                        /* break ends */

                        /* total hrs start */
                        $total_duration = $duration - $minute_break;
                        $total_hours = $total_duration * 60;
                        /* total hrs end */
                    }
                } else {
                    $dt_start = '00:00:00';
                    $dt_end = '23:59:00';
                    $task_end_date = $task_date;
                    $break_time = (trim($totalbreak[$i]) != '')?trim($totalbreak[$i]):'00:00';
                    if (strpos($break_time, '.')) {
                        $split_break = ($break_time * 60);
                        $break_hour = (intval($split_break / 60) < 10 ? "0" : "") . intval($split_break / 60);
                        $break_min = (intval($split_break % 60) < 10 ? "0" : "") . intval($split_break % 60);
                        $break_time = $break_hour . ":" . $break_min;
                        $minute_break = $split_break;
                    } elseif (strpos($break_time, ':')) {
                        $split_break = explode(':', $break_time);
                        $minute_break = ($split_break[0] * 60) + $split_break[1];
                    } else {
                        $break_time = $break_time . ":00";
                        $minute_break = $break_time * 60;
                    }
                }
                $LogTime[$i]['task_date'] = $slashes . $task_date . $slashes;
                $LogTime[$i]['start_time'] = $slashes . $dt_start . $slashes;
                $LogTime[$i]['end_time'] = $slashes . $dt_end . $slashes;

                if (isset($logdata['is_from_timer'])) {
                    $LogTime[$i]['is_from_timer'] = 1;
                }
                /* here we are convering time to UTC as the date has been selected by user to in local time */
                #converted to UTC
                $this->Tmzone = $this->Components->load('Tmzone');
                $LogTime[$i]['start_datetime'] = $slashes . $this->Tmzone->convert_to_utc(SES_TIMEZONE, TZ_GMT, TZ_DST, TZ_CODE, $task_date . " " . $dt_start, "datetime") . $slashes;
                $LogTime[$i]['end_datetime'] = $slashes . $this->Tmzone->convert_to_utc(SES_TIMEZONE, TZ_GMT, TZ_DST, TZ_CODE, $task_end_date . " " . $dt_end, "datetime") . $slashes;

                #stored in sec
                $LogTime[$i]['break_time'] = $minute_break * 60;
                #stored in sec
                if ($dt_start == '00:00:00' && $dt_end == '23:59:00') {
                    /* total hrs */
                    $duration_time = trim($totalduration[$i]);
                    if (strpos($duration_time, '.')) {
                        $split_duration = ($duration_time * 60);
                        $duration_hour = (intval($split_duration / 60) < 10 ? "0" : "") . intval($split_duration / 60);
                        $duration_min = (intval($split_duration % 60) < 10 ? "0" : "") . intval($split_duration % 60);
                        $duration_time = $duration_hour . ":" . $duration_min;
                        $minute_duration = $split_duration;
                    } elseif (strpos($duration_time, ':')) {
                        $split_duration = explode(':', $duration_time);
                        #converted to min
                        $minute_duration = ($split_duration[0] * 60) + $split_duration[1];
                    } else {
                        $minute_duration = $duration_time * 60;
                        $duration_time = $duration_time*60;
                    }
                    /* hrs ends */
                
                    $LogTime[$i]['total_hours'] = $minute_duration * 60;
                } else {
                    $LogTime[$i]['total_hours'] = $total_hours;
                }
                if (isset($data) && !empty($data)) {
                    $LogTime[$i]['is_billable'] = $chkids[$i];
                } else {
                    $LogTime[$i]['is_billable'] = isset($chkids[$i]) ? 1 : 0;
                }
                $LogTime[$i]['description'] = $slashes . addslashes(trim($logdata['description'])) . $slashes;
                $total_time_log_hours = $total_time_log_hours + $LogTime[$i]['total_hours'];
            }
            /*$valid = $this->validate_time_log($logdata, $project_id);
            if (is_array($valid) && $valid['success'] == 'No') {
                echo json_encode($valid);
                exit;
            }*/
            $roleInfo = Cache::read('userRole'.SES_COMP.'_'.SES_ID);
        
            $roleAccess = $roleInfo['roleAccess'];
            if (!$this->Format->isAllowed('Time Entry Greater Than Estimated Hour', $roleAccess)) {
                $tsk_time = $this->LogTime->find('all', array("conditions"=>array("LogTime.task_id"=>$task_id),"fields"=>array("SUM(LogTime.total_hours) as log_hour")));
                if ($tsk_time) {
                    $total_time_log_hours = $total_time_log_hours + $tsk_time[0][0]['log_hour'] ;
                }
                if ($total_time_log_hours > $getCase['Easycase']['estimated_hours']) {
                    echo json_encode(array('success' => 'err', 'message' => __('Not allowed to add timelog more than task estimated hours.', true)));
                    exit;
                }
            }
            if (!empty($log_id) && $log_id > 0) {
                $updateLogTime = $this->LogTime->updateAll($LogTime[0], array('LogTime.log_id' => $log_id));
            } else {
                $sabveLogTime = $this->LogTime->saveAll($LogTime);
            }
        
            if (empty($data)) {
                if (!empty($getCase['Easycase']['case_count'])) {
                    $this->Easycase->updateAll(array('updated_by' => $this->Auth->User('id')), array('id'=>$task_id,'project_id'=>$project_id));
                } else {
                    $this->Easycase->updateAll(array('updated_by' => $this->Auth->User('id'),'case_count' => 1), array('id'=>$task_id,'project_id'=>$project_id));
                }
            }
            /* Send Push Notification to devices when time log added starts here */
            
            if ($updateLogTime || $sabveLogTime) {
                $this->Easycase->updateAll(array('dt_created' => "'".GMT_DATETIME."'"), array('id'=>$task_id,'project_id'=>$getCase['Easycase']['project_id']));
                $curCaseId = $this->Easycase->insertCommentThreadCommon($getCase, 'timelog', $reply_type);
                $emailUser = array();
                foreach ($LogTime as $key=>$value) {
                    $emailUser[] = $value['user_id'];
                    $getTaskid = $value['task_id'];
                    $getPrjid = $value['project_id'];
                }
                
                //$getTaskTitle = $this->Easycase->query("SELECT `title`, `uniq_id` FROM `easycases` WHERE `id`='".$getTaskid."'");
                //$getPrjTitle = $this->Project->query("SELECT `name`, `uniq_id` FROM `projects` WHERE `id`='".$getPrjid."'");
                //$getCompanyDetails3 = $this->User->query("SELECT * FROM `companies` WHERE `id`='".SES_COMP."'");
                $getPrjTitle = $this->Project->find('first', array('fields' => array('Project.id','Project.name','Project.uniq_id'), 'conditions' => array('Project.id' => $getCase['Easycase']['project_id'])));
                $getCompanyDetails3 = $this->Company->find('first', array('fields' => array('Company.uniq_id','Company.name'), 'conditions' => array('Company.id' => SES_COMP)));
                $CompanyUniqId3 = $getCompanyDetails3['Company']['uniq_id'];
                
                $notifyAndAssignToMeUsers = $emailUser;
                $tskTitle = $getCase['Easycase']['title'];
                $prjTitle = $getPrjTitle['Project']['name'];
                $notifyAndAssignToMeUsers = array_unique($notifyAndAssignToMeUsers);
                
                $responseArray3['PushStatus'] = 'Create_Task';
                $responseArray3['project_id'] = $getPrjTitle['Project']['uniq_id'];
                $responseArray3['company_id'] = $CompanyUniqId3;
                $responseArray3['task_id'] = $getCase['Easycase']['uniq_id'];

                if (strlen($tskTitle) > 10) {
                    $newTaskTitle = substr($tskTitle, 0, 15)."....";
                } else {
                    $newTaskTitle = $tskTitle;
                }
                
                //$getUserName = $this->User->query("SELECT `name`, `email` FROM `users` WHERE `id`='".SES_ID."'");
                $getUserName = $this->User->find('first', array('fields' => array('User.id','User.name'), 'conditions' => array('User.id' => SES_ID)));
                $messageToSend = $getUserName['User']['name']." ".__("logged time for you on ")." "."'". $newTaskTitle ."'.";
                $this->Pushnotification = $this->Components->load('Pushnotification');
                $this->Pushnotification->sendPushNotificationToDevicesIOS($notifyAndAssignToMeUsers, $messageToSend, $responseArray3);
                $this->Pushnotification->sendPushNotiToAndroid($notifyAndAssignToMeUsers, $messageToSend, $responseArray3);
            }
            /* $log = $this->LogTime->getDataSource()->showLog(false);debug($log); */

            /* update easycases task dt_created */
            //commented after the all in one changes insertCommentThreadCommon
            /*if (intval($task_id) > 0) {
            $this->Easycase->id = $task_id;
            $this->Easycase->save(array('dt_created' => date('Y-m-d H:i:s')));
            }*/

            /* update last project user visited */
            $this->ProjectUser->recursive = -1;
            $this->ProjectUser->updateAll(array('ProjectUser.dt_visited' => "'" . GMT_DATETIME . "'"), array('ProjectUser.project_id' => $project_id, 'ProjectUser.user_id' => SES_ID, 'ProjectUser.company_id' => SES_COMP));
            $task_milestone_id = $this->Easycase->getMilestoneIds($task_id, $project_id);
            if ($logdata['page_type'] == 'details') {
                $d = new DateTime();
                $view = new View($this);
                $da = $d->format('Y-m-d H:i:s');
                $dt = $view->loadHelper('Datetime');
                $tz = $view->loadHelper('Tmzone');
                $curDateTz = $tz->GetDateTime(SES_TIMEZONE, TZ_GMT, TZ_DST, TZ_CODE, GMT_DATETIME, "datetime");
                $updTzDate = $tz->GetDateTime(SES_TIMEZONE, TZ_GMT, TZ_DST, TZ_CODE, $da, "datetime");
                $last_updated = $dt->dateFormatOutputdateTime_day($updTzDate, $curDateTz);
                echo json_encode(array('success' => true, 'task_id' => $easycase_uniq_id,'task_milestone_id'=> $task_milestone_id, 'last_updated' => $last_updated));
            } else {
                if (isset($data)) {
                    $d = new DateTime();
                    $view = new View($this);
                    $da = $d->format('Y-m-d H:i:s');
                    $dt = $view->loadHelper('Datetime');
                    $tz = $view->loadHelper('Tmzone');
                    $curDateTz = $tz->GetDateTime(SES_TIMEZONE, TZ_GMT, TZ_DST, TZ_CODE, GMT_DATETIME, "datetime");
                    $updTzDate = $tz->GetDateTime(SES_TIMEZONE, TZ_GMT, TZ_DST, TZ_CODE, $da, "datetime");
                    $last_updated = $dt->dateFormatOutputdateTime_day($updTzDate, $curDateTz);
                
                    return json_encode(array('status' => 'success', 'task_id' => $easycase_uniq_id,'task_milestone_id'=> $task_milestone_id, 'last_updated' => $last_updated));
                } else {
                    //$this->redirect(HTTP_ROOT . 'easycases/timelog');
                }
            }
        }
        exit;
    }

    public function existing_task($project_uniq_id = '', $list = '', $is_client = '', $tid = '', $page = '', $q = '')
    {
        $this->layout = 'ajax';
        $projuniqid = isset($this->data['projuniqid']) ? $this->data['projuniqid'] : $project_uniq_id;
        $opt_as = isset($this->data['list']) ? $this->data['list'] : $list;
        $tid = isset($this->data['tid']) ? $this->data['tid'] : $tid;
        $page = $this->request->data['page'] ? $this->request->data['page'] : $page;
        $q = $this->request->data['q'] ? $this->request->data['q'] : $q;
        $is_client = !empty($this->Auth->user('is_client')) ? $this->Auth->user('is_client') : $is_client;
        $this->Project->recursive = -1;
        $projid = $this->Project->find('first', array('fields' => array('Project.id','Project.status_group_id'), 'conditions' => array('Project.uniq_id' => $this->data['projuniqid'])));
        if ($projid['Project']['status_group_id']) {
            $CustomStatus = ClassRegistry::init('CustomStatus');
            $sts_cond = array('CustomStatus.status_group_id'=>$projid['Project']['status_group_id']);
            $CustomStatusArr =  $CustomStatus->find('first', array('conditions'=>$sts_cond,'order'=>array('CustomStatus.seq'=>'DESC')));
            $max_custom_status = $CustomStatusArr['CustomStatus']['id'];
            $custom_legend = $CustomStatusArr['CustomStatus']['status_master_id'];
        } else {
            $max_custom_status = "3";
        }
        $cond = array('Easycase.project_id' => $projid['Project']['id'], 'Easycase.isactive=1', 'istype=1');
        if (isset($this->data['q']) && !empty($this->data['q'])) {
            $cond[] = '(Easycase.title like "%' . trim($this->data['q']) . '%" OR Easycase.case_no like "%' . trim(str_replace('#', '', $this->data['q'])) . '%") AND Easycase.title != ""';
        } else {
            $cond[] = 'Easycase.title != ""';
        }
        if ($this->Auth->user('is_client') == 1) {
            $cond[] = "((Easycase.client_status = " . $this->Auth->user('is_client') . " AND Easycase.user_id = " . $this->Auth->user('id') . ") OR Easycase.client_status != " . $this->Auth->user('is_client') . ")";
        }
        
        $roleInfo = Cache::read('userRole'.SES_COMP.'_'.SES_ID);
        $roleAccess = $roleInfo['roleAccess'];
        if (!$this->Format->isAllowed('View All Task', $roleAccess)) {
            $cond[]= array('OR' => array('Easycase.assign_to' => SES_ID,'Easycase.user_id' => SES_ID));
        }
        if ($projid['Project']['status_group_id']) {
            if (!$this->Format->isAllowed('Time Entry On Closed Task', $roleAccess)) {
                $cond[]= array('Easycase.custom_status_id !=' => $max_custom_status);
            }
        } else {
            if (!$this->Format->isAllowed('Time Entry On Closed Task', $roleAccess)) {
                $cond[]= array('Easycase.legend !=' => $max_custom_status);
            }
        }
        $this->loadModel('Easycase');
        if ($opt_as != '') {
            $tsktitles = $this->Easycase->find('list', array('fields' => array("Easycase.case_no", "srttitle", "Easycase.id"), 'conditions' => $cond, 'limit' => 50, 'order' => 'Easycase.dt_created DESC'));
            /* if id is set then fetch the id first then concate rest data */
            if (isset($this->data['tid']) && !empty($this->data['tid'])) {
                $id_tsktitles = $this->Easycase->find('list', array('fields' => array("Easycase.case_no", "srttitle", "Easycase.id"), 'conditions' => array('Easycase.id' => $this->data['tid'])));
                $tsktitles = $id_tsktitles + $tsktitles;
                array_unique($tsktitles, SORT_REGULAR);
            }
        } else {
            //$tsktitles = $this->Easycase->find('list', array('fields' => array("Easycase.id", "srttitle"), 'conditions' => $cond, 'limit' => 20, 'order' => 'Easycase.dt_created DESC'));
            //for add case no in timer
            $tsktitles = $this->Easycase->find('list', array('fields' => array("Easycase.case_no", "srttitle","Easycase.id"), 'conditions' => $cond, 'limit' => 20, 'order' => 'Easycase.dt_created DESC'));
        }
        $this->set('tsklist', $tsktitles);
        $this->set('opt_as', $opt_as);
        $page != '' ? $this->set('page', $page) : '';
    }

    public function invoice()
    {
        if (!$this->Format->isAllowed('View Invoices')) {
            $this->redirect(HTTP_ROOT . "dashboard");
        }
        $this->loadModel('Invoice');
        /* $this->loadModel('ProjectUser');
          $projid = $this->ProjectUser->find('first', array('conditions' => array('ProjectUser.user_id' => SES_ID, 'ProjectUser.company_id' => SES_COMP), 'fields' => array('ProjectUser.project_id'), 'order' => 'dt_visited DESC'));
          $prjid = $projid['ProjectUser']['project_id']; */
        $prjid = $GLOBALS['getallproj'][0]['Project']['id'];

        /* user details */
        $fromEmail = $this->User->findById(SES_ID);
        $this->set('email', $fromEmail['User']['email']);

        $options = array();
        $options['fields'] = array('Invoice.id', 'Invoice.invoice_no');
        $options['conditions'] = array('Invoice.project_id' => $prjid, "IF(Invoice.customer_id>0,InvoiceCustomer.status='Active',1=1)");
        $options['recursive'] = false;
        $options['joins'] = array(array('table' => 'invoice_customers', 'alias' => 'InvoiceCustomer', 'type' => 'LEFT', 'conditions' => array('InvoiceCustomer.id = Invoice.customer_id')));
        $invoice = $this->Invoice->find('list', $options);
        $this->set('invoice', $invoice);
        /* company name */
        $Company = ClassRegistry::init('Company');
        $Company->recursive = -1;
        $getCompany = $Company->find('first', array('conditions' => array('Company.id' => SES_COMP), 'fields' => 'name'));
        $this->set('from', $getCompany['Company']['name']);

        /* fetch invoice and log time counts */
        $this->getCountInvoice(true);
    }

    public function update_invoice_project()
    {
        $this->layout = 'ajax';

        $prjid = $GLOBALS['getallproj'][0]['Project']['id'];
        $prjuniqueid = $GLOBALS['getallproj'][0]['Project']['uniq_id'];

        if ($prjuniqueid != $this->data['projuniqid']) {
            $projid = $this->Project->find('first', array('fields' => array('Project.id'), 'conditions' => array('Project.uniq_id' => $this->data['projuniqid'])));
            $prjid = $projid['Project']['id'];
        }

        $this->ProjectUser->recursive = -1;
        $this->ProjectUser->updateAll(array('ProjectUser.dt_visited' => "'" . GMT_DATETIME . "'"), array('ProjectUser.project_id' => $prjid, 'ProjectUser.user_id' => SES_ID));
        $projUser = array($this->data['projuniqid'] => $this->Easycase->getMemebers($this->data['projuniqid']));
        echo json_encode($projUser);
        exit;
    }

    public function addInvoice()
    {
        $this->layout = 'ajax';
        $this->loadModel('Invoice');
        parse_str($this->request->data['v'], $d);
        #pr($d);exit;
        $d['data']['Invoice']['user_id'] = SES_ID;
        $d['data']['Invoice']['project_id'] = $GLOBALS['getallproj'][0]['Project']['id'];
        $d['data']['Invoice']['ip'] = $this->request->clientIp();
        $d['data']['Invoice']['issue_date'] = date('Y-m-d H:i:s', strtotime($d['data']['Invoice']['issue_date']));
        $d['data']['Invoice']['due_date'] = date('Y-m-d H:i:s', strtotime($d['data']['Invoice']['due_date']));
        if ($this->Invoice->save($d['data']['Invoice'])) {
            echo $this->Invoice->id;
        } else {
            echo 0;
        }
        exit;
    }

    public function addLineItem()
    {
        $this->layout = 'ajax';
        $this->loadModel('Invoice');
        $this->loadModel('InvoiceLog');

        $id = $this->request->data['v'];
        $i = $this->Invoice->findById($id);

        $InvoiceLog['user_id'] = SES_ID;
        $InvoiceLog['invoice_id'] = $i['Invoice']['id'];
        $InvoiceLog['log_id'] = 0;
        $InvoiceLog['task_date'] = date('Y-m-d');
        $InvoiceLog['total_hours'] = 0;
        $InvoiceLog['description'] = '';
        $InvoiceLog['task_status'] = 0;
        $InvoiceLog['rate'] = null;
        $InvoiceLog['ip'] = $this->request->clientIp();
        $this->InvoiceLog->save($InvoiceLog);
        $InvoiceLog['id'] = $this->InvoiceLog->id;
        $this->set('log', $InvoiceLog);
        $this->set('tot_tr', $this->request->data['tot_tr'] + 1);
    }

    public function getCountInvoice($return = false)
    {
        $prjid = $GLOBALS['getallproj'][0]['Project']['id'];
        $this->loadModel('Invoice');
        /* invoice count */

        $options = array();
        #$options['fields'] = array('Invoice.id', 'Invoice.invoice_no');
        $conditions = array('Invoice.project_id' => $prjid, "IF(Invoice.customer_id>0,InvoiceCustomer.status='Active',1=1)");
        if (($this->Format->isAllowed('View Invoices')) && ($this->Auth->user('is_client') != 1)) { //SES_TYPE == 1 || SES_TYPE == 2 || IS_MODERATOR == 1
        } else {
            $conditions[] = "InvoiceCustomer.user_id='" . SES_ID . "'";
        }
        $options['conditions'] = $conditions;
        $options['recursive'] = false;
        $options['joins'] = array(array('table' => 'invoice_customers', 'alias' => 'InvoiceCustomer', 'type' => 'LEFT', 'conditions' => array('InvoiceCustomer.id = Invoice.customer_id')));

        $invoice = $this->Invoice->find('count', $options);

        /* unbilled logtime count */
        $logtimes = $this->LogTime->find(
            'count',
            array(
            'conditions' => array('LogTime.project_id' => $prjid, 'LogTime.is_billable' => 1, "LogTime.log_id NOT IN (SELECT invoice_logs.log_id FROM invoice_logs LEFT JOIN invoices ON invoices.id=invoice_logs.invoice_id WHERE invoices.project_id='$prjid' AND invoice_logs.log_id>0)",),
            'order' => 'created DESC')
        );

        $count['invoice'] = $invoice;
        $count['logtime'] = $logtimes;
        if ($return == false) {
            print json_encode($count);
            exit;
        } else {
            $this->set('caseCount', $logtimes);
            $this->set('invoiceCount', $invoice);
        }
    }

    /* GKM: for timelog paging */

    /**
     * This function is moving to Requests controller.
     * Please do any lasted changes there as it will be removed from here.
     */
    public function time_log()
    {
        $prjid = $GLOBALS['getallproj'][0]['Project']['id'];
        $prjuniqueid = $GLOBALS['getallproj'][0]['Project']['uniq_id'];
        #pr($this->data);exit;
        $projFil = $this->data['projFil'];
        $filter = $this->data['filter'];
        $data = $this->data;
        $usid = '';
        $st_dt = '';
        $where = '';
        /* updating latest project id for user */
        if ($data['projFil'] && !(isset($data['usrid']) || isset($data['strddt']) || isset($data['enddt']) || isset($data['filter']))) {
            if ($prjuniqueid != $projFil) {
                $projid = $this->Project->find('first', array('fields' => array('Project.id'), 'conditions' => array('Project.uniq_id' => $projFil)));
                $prjid = $projid['Project']['id'];
            }
            $this->loadModel('ProjectUser');
            $this->ProjectUser->recursive = -1;
            $this->ProjectUser->updateAll(array('ProjectUser.dt_visited' => "'" . GMT_DATETIME . "'"), array('ProjectUser.project_id' => $prjid, 'ProjectUser.user_id' => $_SESSION['Auth']['User']['id']));
            $timelog_filter_msg = "";
        } else {
            if (trim($data['usrid']) != '' || trim($data['strddt']) != '' || trim($data['enddt']) != '' || (trim($data['filter']) != '' && trim($data['filter']) != 'alldates')) {
                $timelog_filter_msg = "Showing data ";
            }
        }

        /* page limit set */
        $page_limit = CASE_PAGE_LIMIT;
        if (isset($_COOKIE['TASKGROUPBY']) && $_COOKIE['TASKGROUPBY'] == 'milestone') {
            $page_limit = TASK_GROUP_CASE_PAGE_LIMIT;
        }
        /* current page */
        $casePage = $this->params->data['casePage'] > 0 ? $this->params->data['casePage'] : 1; // Pagination
        $page = $casePage;
        $limit1 = $page * $page_limit - $page_limit;
        $limit2 = $page_limit;

        #######################Order By##################################
        // Order by
        $sortby = '';
        if (isset($_COOKIE['TASKSORTBY'])) {
            $sortby = $_COOKIE['TASKSORTBY'];
            $sortorder = $_COOKIE['TASKSORTORDER'];
        } else {
            $sortorder = 'DESC';
        }

        if ($sortby == 'date') {
            $orderby = "LogTime.start_datetime " . $sortorder;
        } elseif ($sortby == 'name') {
            $orderby = "user_name " . $sortorder;
        } elseif ($sortby == 'caseno') {
            $orderby = "Easycase.case_no " . $sortorder;
        } elseif ($sortby == 'case_title') {
            $orderby = "task_name " . $sortorder;
        } elseif ($sortby == 'description') {
            $orderby = "description " . $sortorder;
        } elseif ($sortby == 'start') {
            $orderby = "start_datetime " . $sortorder;
        } elseif ($sortby == 'end') {
            $orderby = "end_datetime " . $sortorder;
        } elseif ($sortby == 'hours') {
            $orderby = "total_hours " . $sortorder;
        } else {
            $orderby = " LogTime.start_datetime DESC ";
        }
        #pr ($orderby);exit;
        #################End of Order by#################################

        /* project details */
        if ($projFil == 'all') {
            $this->Project->recursive = -1;
            $projArr = $this->Project->find('all', array('conditions' => array('Project.isactive' => 1, 'Project.company_id' => SES_COMP), 'fields' => array('Project.id')));
            $project_id = $projArr['Project']['id'];
        } else {
            $this->Project->recursive = -1;
            $projArr = $this->Project->find('first', array('conditions' => array('Project.uniq_id' => $projFil, 'Project.isactive' => 1, 'Project.company_id' => SES_COMP), 'fields' => array('Project.id')));
            $project_id = $projArr['Project']['id'];
        }

        $curDateTime = $this->Tmzone->GetDateTime(SES_TIMEZONE, TZ_GMT, TZ_DST, TZ_CODE, GMT_DATETIME, "datetime");
        #$curDateTime = date('Y-m-d H:i:s');
        $temp_show_dates = null;
        if (isset($data['filter']) && $data['filter']) {
            $filter = trim($data['filter']);   //echo $filter;exit;
            //	pr($dates);exit;
            if ((isset($data['strddt']) && !empty($data['strddt'])) || (isset($data['enddt']) && !empty($data['enddt']))) {
                if (isset($data['strddt']) && !empty($data['strddt'])) {
                    $temp_show_dates = $data;
                    $dates['strddt'] = date('Y-m-d', strtotime($data['strddt']));
                    $dates['strddt'] = $this->Tmzone->convert_to_utc(SES_TIMEZONE, TZ_GMT, TZ_DST, TZ_CODE, $dates['strddt'], "datetime");
                }
                if (isset($data['enddt']) && !empty($data['enddt'])) {
                    $temp_show_dates = $data;
                    $dates['enddt'] = date('Y-m-d', strtotime($data['enddt']));
                    $dates['enddt'] = $this->Tmzone->convert_to_utc(SES_TIMEZONE, TZ_GMT, TZ_DST, TZ_CODE, $dates['enddt'], "datetime");
                    $dates['enddt'] = date('Y-m-d H:i:s', strtotime($dates['enddt'] . '+1 days'));
                }
            } else {
                $dates = $this->Format->date_filter($filter, $curDateTime); //pr($dates);exit;
                $temp_show_dates = $dates;
                $dates['strddt'] = $this->Tmzone->convert_to_utc(SES_TIMEZONE, TZ_GMT, TZ_DST, TZ_CODE, $dates['strddt'], "datetime");
                $dates['enddt'] = $this->Tmzone->convert_to_utc(SES_TIMEZONE, TZ_GMT, TZ_DST, TZ_CODE, $dates['enddt'], "datetime");
                $dates['enddt'] = date('Y-m-d H:i:s', strtotime($dates['enddt'] . '+1 day'));
            }

            $data = array_merge($data, $dates); //pr($data);exit;
            if ($filter == 'alldates') {
                unset($data['strddt']);
                unset($data['enddt']);
                if (!isset($data['usrid'])) {
                    $timelog_filter_msg = "";
                }
            }
        }
        #pr($data);exit;
        if (isset($data['filter']) && ($filter == 'today' || $filter == 'yesterday') && isset($data['strddt'])) {
            $where .= " AND `LogTime`.`start_datetime` >= '" . $data['strddt'] . "' AND `LogTime`.`start_datetime` < '" . date('Y-m-d H:i:s', strtotime($data['strddt'] . '+1 day')) . "'";
            $st_dt = " AND `start_datetime` >= '" . $data['strddt'] . "' AND `start_datetime` < '" . date('Y-m-d H:i:s', strtotime($data['strddt'] . '+1 day')) . "'";
            $timelog_filter_msg .= " for <b>" . date('M d, Y', strtotime($temp_show_dates['strddt'])) . "</b> ";
        } elseif (isset($data['strddt']) && isset($data['enddt'])) {
            $where .= " AND `LogTime`.`start_datetime` >= '" . $data['strddt'] . "' AND `LogTime`.`start_datetime` < '" . $data['enddt'] . "'";
            $st_dt = " AND start_datetime >= '" . $data['strddt'] . "' AND start_datetime < '" . $data['enddt'] . "'";
            $timelog_filter_msg .= "from <b>" . date('M d, Y', strtotime($temp_show_dates['strddt'])) . "</b>&nbsp;&nbsp;to <b>" . date('M d, Y', strtotime($temp_show_dates['enddt'])) . "</b> ";
        } elseif (isset($data['strddt'])) {
            $where .= " AND `LogTime`.`start_datetime` >= '" . $data['strddt'] . "'";
            $st_dt = " AND start_datetime >= '" . $data['strddt'] . "'";
            $timelog_filter_msg .= "from <b>" . date('M d, Y', strtotime($temp_show_dates['strddt'])) . "</b> ";
        } elseif (isset($data['enddt'])) {
            $where .= " AND `LogTime`.`start_datetime` < '" . $data['enddt'] . "'";
            $st_dt = " AND start_datetime <= '" . $data['enddt'] . "'";
            $timelog_filter_msg .= "till <b>" . date('M d, Y', strtotime($temp_show_dates['enddt'])) . "</b> ";
        }
        $count_usid = '';
        if (isset($data['usrid']) && !empty($data['usrid'])) {
            $usrid = explode("-", $data['usrid']);
            foreach ($usrid as $uid) {
                if ($uid != '') {
                    $qrylog.=" `LogTime`.`user_id`=" . $uid . " OR ";
                    $qryusr.= " user_id = '" . $uid . "' OR ";
                }
            }
            $qrylog = substr($qrylog, 0, -3);
            $qry.=" AND (" . $qrylog . ")";
            $qryusr = substr($qryusr, 0, -3);
            $usr.=" AND (" . $qryusr . ")";
            $where .= $qry;
            $usid = $usr;
            $count_usid = $qry;
            $this->loadModel('User');
            $userdetails = $this->User->find("all", array('conditions' => array('id' => $usrid), "fields" => "CONCAT_WS(' ',User.name,User.last_name) AS user_name"));
            if (count($userdetails) == 1) {
                $timelog_filter_msg .= "&nbsp;of <b>" . $userdetails[0][0]['user_name'] . "</b>";
            } else {
                $timelog_filter_msg .= " of ";
                foreach ($userdetails as $key => $user) {
                    $timelog_filter_msg .= "<b>" . $user[0]['user_name'] . "</b> And ";
                }
                $timelog_filter_msg = substr($timelog_filter_msg, 0, -4);
            }
        }

        #echo $project_id;exit;
        $curCaseId = "0";
        $caseTitleRep = '';
        $isactive = '';
        $extra_condition = ""; #, "LogTime.task_id" => "'" . $curCaseId . "'"
        $usrCndtn = "";
        $tskCndtn = "";
        if (SES_TYPE == 3 && SES_ID != 13902) {
            $usrCndtn = "`LogTime`.user_id= " . SES_ID . " AND ";
        }
        if (isset($this->data['task_id']) && $this->data['task_id'] != '') {
            $tskCndtn = "`LogTime`.task_id= " . $this->data['task_id'] . " AND ";
            $curCaseId = $this->data['task_id'];
            $taskUid = $this->Easycase->find('first', array('conditions' => array('Easycase.id' => $curCaseId), 'fields' => array('Easycase.uniq_id', 'Easycase.title', 'Easycase.isactive')));
            $caseTitleRep = $taskUid['Easycase']['title'];
            $isactive = $taskUid['Easycase']['isactive'];
            $prjDtls = $this->Project->find('first', array('conditions' => array('Project.uniq_id' => $projFil), 'fields' => array('Project.name')));
        }
        $logsql = "SELECT SQL_CALC_FOUND_ROWS LogTime.*, "
                . " DATE_FORMAT(LogTime.start_datetime,'%M %d %Y %H:%i:%s') AS start_datetime_v1,"
                . "(SELECT CONCAT_WS(' ',User.name,User.last_name) FROM users AS `User` WHERE `User`.id=LogTime.user_id) AS user_name, "
                . "(SELECT CONCAT_WS('||',title,uniq_id,case_no) FROM easycases AS `Easycase` WHERE `Easycase`.id=LogTime.task_id LIMIT 1) AS task_name "
                #. ",(SELECT `Type`.`name` FROM `types` AS `Type` WHERE `Type`.id=(SELECT type_id FROM easycases AS `Easycase` WHERE `Easycase`.id=LogTime.task_id LIMIT 1) LIMIT 1) AS type_name "
                . "FROM `log_times` AS `LogTime` "
                . "LEFT JOIN easycases AS Easycase ON Easycase.id=LogTime.task_id AND LogTime.project_id=Easycase.project_id "
                . "WHERE " . $usrCndtn . " " . $tskCndtn . "`LogTime`.`project_id`='$project_id' AND Easycase.isactive=1 $where "
                . "ORDER BY $orderby LIMIT $limit1, $limit2";
        //echo $logsql;exit;
        $logtimes = $this->LogTime->query($logsql);
        #pr($logtimes);exit;
        $view = new View($this);
        $frmt = $view->loadHelper('Format');
        if (is_array($logtimes) && count($logtimes) > 0) {
            foreach ($logtimes as $key => $val) {#May 05 2015 11:05:00
                $logtimes[$key]["LogTime"]['start_datetime'] = $this->Tmzone->GetDateTime(SES_TIMEZONE, TZ_GMT, TZ_DST, TZ_CODE, $logtimes[$key]["LogTime"]['start_datetime'], "datetime");
                $logtimes[$key]["LogTime"]['end_datetime'] = $this->Tmzone->GetDateTime(SES_TIMEZONE, TZ_GMT, TZ_DST, TZ_CODE, $logtimes[$key]["LogTime"]['end_datetime'], "datetime");
                $logtimes[$key][0]['start_datetime_v1'] = date('M d Y H:i:s', strtotime($logtimes[$key]["LogTime"]['start_datetime']));
                $logtimes[$key][0]['task_name'] = $frmt->formatTitle($logtimes[$key][0]['task_name']);
                $logtimes[$key]["LogTime"]['description'] = $frmt->formatTitle($logtimes[$key]["LogTime"]['description']);

                $logtimes[$key]['LogTime']['start_time'] = date('H:i:s', strtotime($logtimes[$key]['LogTime']['start_datetime']));
                $logtimes[$key]['LogTime']['end_time'] = date('H:i:s', strtotime($logtimes[$key]['LogTime']['end_datetime']));
            }
        }
        #pr($logtimes);exit;
        $tot = $this->LogTime->query("SELECT FOUND_ROWS() as total");
        $caseCount = $tot[0][0]['total'];
        #pr($logtimes);exit;

        /* find total billable and non-billable time */
        $usrCndn = "";
        $tskcndn = "";
        if (SES_TYPE == 3 && SES_ID != 13902) { //id for mr class user
            $usrCndn = " AND `LogTime`.user_id= " . SES_ID;
        }
        if (isset($this->data['task_id']) && $this->data['task_id'] != '') {
            $tskcndn = " AND `LogTime`.task_id= " . $this->data['task_id'];
        }
        $count_sql = 'SELECT sum(total_hours) as secds,is_billable '
                . 'FROM log_times AS `LogTime` '
                . "LEFT JOIN easycases AS Easycase ON Easycase.id=LogTime.task_id AND LogTime.project_id=Easycase.project_id "
                . 'WHERE is_billable = 1 AND Easycase.isactive =1 AND LogTime.project_id = "' . $project_id . '" ' . $count_usid . $st_dt . ' '
                . $usrCndn . ' ' . $tskcndn . ' GROUP BY LogTime.project_id  '
                . 'UNION '
                . 'SELECT sum(total_hours) as secds, is_billable '
                . 'FROM log_times AS LogTime '
                . "LEFT JOIN easycases AS Easycase ON Easycase.id=LogTime.task_id AND LogTime.project_id=Easycase.project_id "
                . 'WHERE is_billable = 0 AND Easycase.isactive =1 AND LogTime.project_id ="' . $project_id . '" ' . $count_usid . $st_dt . ' '
                . $usrCndn . ' ' . $tskcndn . ' GROUP BY LogTime.project_id ';
        #echo $count_sql;exit;
        $cntlog = $this->LogTime->query($count_sql);

        #pr($cntlog);exit;
        $billablehours = $cntlog[0][0]['is_billable'] > 0 ? $cntlog[0][0]['secds'] : 0;
        $thoursbillable = ($billablehours);
        $thours = ($cntlog[0][0]['secds'] + $cntlog[1][0]['secds']);
        $thrs = ($thours);
        $nonbillablehrs = $thrs - $thoursbillable;

        $tasks = (trim($usid) != '' || trim($st_dt) != '') ? ' AND id IN (SELECT task_id FROM log_times WHERE project_id ="' . $project_id . '" ' . $usid . $st_dt . ')' : '';
        $est_sql = "SELECT SUM(estimated_hours) AS hrs FROM easycases WHERE isactive=1 AND project_id = '" . $project_id . "' AND istype=1 " . $tasks;
        if (isset($this->data['task_id']) && $this->data['task_id'] != '') {
            $est_sql = "SELECT estimated_hours AS hrs FROM easycases WHERE isactive=1 AND project_id = '" . $project_id . "' AND istype=1 AND id = '" . $this->data['task_id'] . "'";
        }
        $cntestmhrs = $this->Easycase->query($est_sql);
        $caseTitleRep = '';
        $pgShLbl = $frmt->pagingShowRecords($caseCount, $page_limit, $casePage);
        $page_typ = 'timelog';
        $showTitle = 'Yes';
        if (isset($this->data['task_id']) && $this->data['task_id'] != '') {
            $page_typ = "taskdetails";
            $showTitle = 'No';
        }
        $logtimesArr = array('logs' => $logtimes,
            'task_id' => $curCaseId,
            'task_title' => $caseTitleRep,
            'task_uniqId' => $taskUid['Easycase']['uniq_id'],
            'project_uniqId' => $projFil,
            'is_active' => $isactive,
            'project_name' => $prjDtls['Project']['name'],
            'pgShLbl' => $pgShLbl,
            'csPage' => $casePage,
            'page_limit' => $page_limit,
            'caseCount' => $caseCount,
            'showTitle' => $showTitle,
            'page' => $page_typ,
            'details' => array(
                'totalHrs' => $thrs,
                'billableHrs' => $thoursbillable,
                'nonbillableHrs' => $nonbillablehrs,
                'estimatedHrs' => isset($this->data['task_id']) && $this->data['task_id'] != '' ? trim($cntestmhrs[0]['easycases']['hrs']) : trim($cntestmhrs[0][0]['hrs']),
        ));

        $projUser = array();
        if ($projFil) {
            $projUser = array($projFil => $this->Easycase->getMemebers($projFil));
        }
        $caseDetail['projUser'] = $projUser;

        #pr($logtimesArr);exit;
        $caseDetail['logtimes'] = $logtimesArr;
        $caseDetail['timelog_filter_msg'] = $timelog_filter_msg;
        $caseDetail['orderBy'] = $_COOKIE['TASKSORTBY'];
        $caseDetail['orderByType'] = $_COOKIE['TASKSORTORDER'];
        echo json_encode($caseDetail);
        exit;
        /* $this->set('caseDetail', json_encode($caseDetail));
          echo $this->render('/Elements/case_timelog');
          exit; */
    }

    /* Author: GKM
     * use: to fetch timelog details and populate in edit mode
     */

    public function timelog_details()
    {
        if (isset($this->data['logid'])) {
            $log_id = intval($this->data['logid']);
            $view = new View($this);
            $frmt = $view->loadHelper('Format');
            $this->LogTime->bindModel(
                array('belongsTo' => array(
                            'Project' => array(
                                'className' => 'Project',
                                'foreignKey' => 'project_id',
                            )
                        )
                    )
            );
            $logtimes = $this->LogTime->find('all', array('fields' => array("LogTime.*,LogTime.log_id as id" . ", DATE_FORMAT(LogTime.start_datetime,'%M %d %Y %H:%i:%s') AS start_datetime_v1", "Project.name", "Project.uniq_id"), 'conditions' => array('LogTime.log_id' => $log_id)));
            #$logtimes[0]['LogTime']['start_datetime_v1']=$logtimes[0][0]['start_datetime_v1'];
            $logtimes[0]['LogTime']['srt_datetime_v1'] = $logtimes[0]['LogTime']['start_datetime'];
            $logtimes[0]['LogTime']['end_datetime_v1'] = $logtimes[0]['LogTime']['end_datetime'];
            $logtimes[0]['LogTime']['start_datetime'] = $this->Tmzone->GetDateTime(SES_TIMEZONE, TZ_GMT, TZ_DST, TZ_CODE, $logtimes[0]['LogTime']['start_datetime'], "datetime");
            $logtimes[0]['LogTime']['end_datetime'] = $this->Tmzone->GetDateTime(SES_TIMEZONE, TZ_GMT, TZ_DST, TZ_CODE, $logtimes[0]['LogTime']['end_datetime'], "datetime");

            $logtimes[0]['LogTime']['start_datetime_v1'] = date('M d Y H:i:s', strtotime($logtimes[0]['LogTime']['start_datetime']));
            $logtimes[0]['LogTime']['start_time'] = date('H:i:s', strtotime($logtimes[0]['LogTime']['start_datetime']));
            $logtimes[0]['LogTime']['end_time'] = date('H:i:s', strtotime($logtimes[0]['LogTime']['end_datetime']));
            $logtimes[0]['LogTime']['description'] = $frmt->formatText($frmt->formatTitle($logtimes[0]['LogTime']['description']));
            $logtimes[0]['LogTime']['project_name'] = $logtimes[0]['Project']['name'];
            $logtimes[0]['LogTime']['project_uniqid'] = $logtimes[0]['Project']['uniq_id'];
            //$logtimes[0]['LogTime']['description'] =$logtimes[0]['LogTime']['description'];
            //pr($logtimes);exit;
            if ($logtimes[0]['LogTime']['timesheet_flag'] == 1) {
                $logtimes[0]['LogTime']['start_time'] = '--';
                $logtimes[0]['LogTime']['end_time'] = '--';
            }
            unset($logtimes[0]['LogTime']['ip']);
            unset($logtimes[0]['LogTime']['project_id']);

            echo json_encode($logtimes[0]['LogTime']);
        }
        exit;
    }

    /* Author: GKM
      use: to delete timelog details
     */

    public function delete_timelog($logid = null)
    {
        $log_id = !empty($this->data['logid']) ? intval($this->data['logid']) : $logid;
        if (isset($log_id)) {
            /* $this->LogTime->log_id = $log_id;
              $res = $this->LogTime->delete(); */
            $res = $this->LogTime->query("DELETE FROM log_times WHERE log_id='" . $log_id . "'");
            #$retArr = array('success' => ($res ? 1 : 0));
            $retArr = array('success' => 1);
        } else {
            $retArr = array('success' => 0);
        }
        if (!empty($logid)) {
            return $retArr;
        } else {
            echo json_encode($retArr);
        }
        exit;
    }

    /* Author: GKM
     * use: to check overlaping log times
     */

    public function validate_time_log($data, $project_id)
    {
        $return_val = true;
        if (!is_array($data) && trim($project_id) == '') {
            $data = $this->data;
            $this->Project->recursive = -1;
            $projid = $this->Project->find('first', array('conditions' => array('Project.uniq_id' => $data['project_id']), 'fields' => array('Project.id')));
            $project_id = $projid['Project']['id'];
            $return_val = false;
        }
        $log_id = trim($data['log_id']);
        $mode = $log_id > 0 ? "edit" : "add";
        if ($mode == 'edit') {
            $logtimes = $this->LogTime->find('all', array('fields' => array("LogTime.*,LogTime.log_id as id"), 'conditions' => array('LogTime.log_id' => $log_id)));
            $task_id = $logtimes[0]['LogTime']['task_id'];
            $users[0] = $logtimes[0]['LogTime']['user_id'];
        } else {
            #$task_id = trim($data['task_id']);
            $task_id = isset($data['task_id']) ? trim($data['task_id']) : intval($data['hidden_task_id']);
            $users = $data['user_id'];
        }
        $task_dates = $data['task_date'];
        $start_time = $data['start_time'];
        $end_time = $data['end_time'];
        $totalbreak = $data['totalbreak'];
        $totalduration = $data['totalduration'];
        $cntr = count($data['totalduration']);
        $user_id_arr = array();

        /* formating logtime array */
        $LogTime = array();
        for ($i = 0; $i < $cntr; $i++) {
            $task_date = date('Y-m-d', strtotime($task_dates[$i]));
            $user_id_arr[] = $users[$i];
            $LogTime[$i]['user_id'] = $users[$i];
            $LogTime[$i]['project_id'] = $project_id;
            $LogTime[$i]['task_id'] = $task_id;

            /* start time set start */
            $spdts = explode(':', $start_time[$i]);
            #converted to min

            if (strpos($start_time[$i], 'am') === false) {
                $nwdtshr = ($spdts[0] != 12) ? ($spdts[0] + 12) : trim($spdts[0]);
                $dt_start = strstr($nwdtshr . ":" . $spdts[1], 'pm', true) . ":00";
            } else {
                $nwdtshr = ($spdts[0] != 12) ? ($spdts[0] < 10 ? "0" : "") . $spdts[0] : '00';
                $dt_start = strstr($nwdtshr . ":" . $spdts[1], 'am', true) . ":00";
            }
            $minute_start = ($nwdtshr * 60) + $spdts[1];
            /* start time set end */

            /* end time set start */
            $spdte = explode(':', $end_time[$i]);
            #converted to min

            if (strpos($end_time[$i], 'am') === false) {
                $nwdtehr = ($spdte[0] != 12) ? ($spdte[0] + 12) : $spdte[0];
                $dt_end = strstr($nwdtehr . ":" . $spdte[1], 'pm', true) . ":00";
            } else {
                $nwdtehr = ($spdte[0] != 12) ? ($spdte[0] < 10 ? "0" : "") . $spdte[0] : '00';
                $dt_end = strstr($nwdtehr . ":" . $spdte[1], 'am', true) . ":00";
            }
            $minute_end = ($nwdtehr * 60) + $spdte[1];
            /* end time set end */

            /* checking if start is greater than end then add 24 hr in end i.e. 1440 min */
            $duration = $minute_end >= $minute_start ? ($minute_end - $minute_start) : (($minute_end + 1440) - $minute_start);
            $task_end_date = $minute_end >= $minute_start ? $task_date : date('Y-m-d', strtotime($task_date . ' +1 day'));

            /* total working */
            $break_time = trim($totalbreak[$i]);
            if (strpos($break_time, '.')) {
                $split_break = ($break_time * 60);
                $break_hour = (intval($split_break / 60) < 10 ? "0" : "") . intval($split_break / 60);
                $break_min = (intval($split_break % 60) < 10 ? "0" : "") . intval($split_break % 60);
                $break_time = $break_hour . ":" . $break_min;
                $minute_break = $split_break;
            } elseif (strpos($break_time, ':')) {
                $split_break = explode(':', $break_time);
                #converted to min
                $minute_break = ($split_break[0] * 60) + $split_break[1];
            } else {
                $break_time = $break_time . ":00";
                $minute_break = $break_time * 60;
            }
            $minute_break = $duration < $minute_break ? 0 : $minute_break;
            /* break ends */

            /* total hrs start */
            $total_duration = $duration - $minute_break;
            /* $total_hrs = floor($total_duration / 60);
              $total_mins = (intval($total_duration % 60) < 10 ? "0" : "") . intval($total_duration % 60);
              $total_hours = $total_hrs . ":" . $total_mins; */
            $total_hours = $total_duration;
            /* total hrs end */

            $LogTime[$i]['task_date'] = $task_date;
            $LogTime[$i]['start_time'] = $dt_start;
            $LogTime[$i]['end_time'] = $dt_end;

            /* not converted to utc as we are validating with current times only */
            $LogTime[$i]['start_datetime'] = $task_date . " " . $dt_start;
            $LogTime[$i]['end_datetime'] = $task_end_date . " " . $dt_end;
            #converted to UTC
            #$LogTime[$i]['start_datetime'] = $this->Tmzone->convert_to_utc(SES_TIMEZONE, TZ_GMT, TZ_DST, TZ_CODE, $task_date . " " . $dt_start, "datetime");
            #$LogTime[$i]['end_datetime'] = $this->Tmzone->convert_to_utc(SES_TIMEZONE, TZ_GMT, TZ_DST, TZ_CODE, $task_end_date . " " . $dt_end, "datetime");
            #stored in sec
            $LogTime[$i]['break_time'] = $minute_break * 60;
            #stored in sec
            $LogTime[$i]['total_hours'] = $total_hours * 60;
            $log_final_arr[$LogTime[$i]['user_id']][] = $LogTime[$i];
        }
        $LogTime = $log_final_arr;

        /* fetching all old records of the task from log_times table */
        $user_ids = array_unique($user_id_arr);
        #$condition = array("LogTime.user_id IN (" . (is_array($user_ids) && count($user_ids) > 0 ? implode(',', $user_ids) : "''") . ")", "LogTime.task_id" => $task_id);
        $condition = array("LogTime.user_id IN (" . (is_array($user_ids) && count($user_ids) > 0 ? implode(',', $user_ids) : "''") . ")", "LogTime.task_id" => $task_id, "LogTime.start_time !=" => '00:00:00');
        $existing_data = $this->LogTime->find('all', array('fields' => array("LogTime.*,LogTime.log_id as id"), 'conditions' => $condition));
        #$log = $this->LogTime->getDataSource()->showLog(false);debug($log);
        $existing_dates = array();
        $existing_logtime = array();
        if (is_array($existing_data) && count($existing_data) > 0) {
            foreach ($existing_data as $key => $val) {
                $existing_logtime[$val['LogTime']['user_id']][] = array(
                    'id' => $val['LogTime']['id'],
                    'user_id' => $val['LogTime']['user_id'],
                    'task_id' => $val['LogTime']['task_id'],
                    'task_date' => $val['LogTime']['task_date'],
                    'start_time' => $val['LogTime']['start_time'],
                    'end_time' => $val['LogTime']['end_time'],
                    'start_datetime' => $val['LogTime']['start_datetime'], #these from db, so are in UTC
                    'end_datetime' => $val['LogTime']['end_datetime'], #these from db, so are in UTC
                );
            }
        }
        $overrlap = false;
        $overlap_msg = array();
//        if (is_array($LogTime) && count($LogTime) > 0) {
//            /* loop of users */
//            foreach ($LogTime as $userkey => $plog) {
//                /* loop of user logs */
//                foreach ($plog as $pKey => $pVal) {
//                    /* compare with new time log data */
//                    if (isset($LogTime[$userkey])) {
//                        foreach ($LogTime[$userkey] as $cKey => $cVal) {
//                            #pr($cVal);pr($pVal);
//                            if ($pKey != $cKey) {
//                                $start_datetime = $cVal['start_datetime']; #converted time in UTC
//                                $end_datetime = $cVal['end_datetime']; #converted time in UTC
//                                if (
//                                        ($start_datetime < $pVal['start_datetime'] && $end_datetime > $pVal['start_datetime']) || ($start_datetime < $pVal['end_datetime'] && $end_datetime > $pVal['end_datetime']) || ($start_datetime == $pVal['start_datetime'] && $end_datetime == $pVal['end_datetime']) || ($start_datetime > $pVal['start_datetime'] && $end_datetime < $pVal['end_datetime']) || ($start_datetime > $pVal['start_datetime'] && $end_datetime == $pVal['end_datetime']) || ($start_datetime == $pVal['start_datetime'] && $end_datetime < $pVal['end_datetime'])
//                                ) {
//                                    $overrlap = true;
//                                    $overlap_msg[$userkey][$pVal['start_datetime'] . '||' . $pVal['end_datetime']] = array(
//                                        'user_id' => $userkey,
//                                        'task_date' => date('M d, Y', strtotime($pVal['start_datetime'])),
//                                        'start_time' => trim(date('h:ia', strtotime($pVal['start_datetime'])), '0'),
//                                        'end_time' => trim(date('h:ia', strtotime($pVal['end_datetime'])), '0')
//                                    );
//                                }
//                            }
//                        }
//                    }
//                    /* end */
//                    /* compare with db records */
//                    if (isset($existing_logtime[$userkey])) {
//                        foreach ($existing_logtime[$userkey] as $cKey => $cVal) {
//                            #pr($cVal);pr($pVal);
//                            #echo $log_id." != ".$cVal['id']."<br>";
//                            if ($mode != 'edit' || ($mode == 'edit' && $log_id != $cVal['id'])) {
//                                $start_datetime = trim($cVal['start_datetime']) > 0 ? $cVal['start_datetime'] : $cVal['task_date'] . " " . $cVal['start_time']; #this is from db, so is in UTC
//                                $end_datetime = trim($cVal['end_datetime']) > 0 ? $cVal['end_datetime'] : $cVal['task_date'] . " " . $cVal['end_time']; #this is from db, so is in UTC
//                                /* converting date time got from db to user's local time to check overlaping time */
//                                $start_datetime = $this->Tmzone->GetDateTime(SES_TIMEZONE, TZ_GMT, TZ_DST, TZ_CODE, $start_datetime, "datetime");
//                                $end_datetime = $this->Tmzone->GetDateTime(SES_TIMEZONE, TZ_GMT, TZ_DST, TZ_CODE, $end_datetime, "datetime");
//                                #echo $start_datetime." < ".$pVal['start_datetime']." && ".$end_datetime." > ".$pVal['end_datetime']."<br>";
//                                if (
//                                        ($start_datetime < $pVal['start_datetime'] && $end_datetime > $pVal['start_datetime']) || ($start_datetime < $pVal['end_datetime'] && $end_datetime > $pVal['end_datetime']) || ($start_datetime == $pVal['start_datetime'] && $end_datetime == $pVal['end_datetime']) || ($start_datetime > $pVal['start_datetime'] && $end_datetime < $pVal['end_datetime']) || ($start_datetime > $pVal['start_datetime'] && $end_datetime == $pVal['end_datetime']) || ($start_datetime == $pVal['start_datetime'] && $end_datetime < $pVal['end_datetime'])
//                                ) {
//                                    $overrlap = true;
//                                    $overlap_msg[$userkey][$pVal['start_datetime'] . '||' . $pVal['end_datetime']] = array(
//                                        'log_id' => $cVal['id'],
//                                        'user_id' => $userkey,
//                                        'task_date' => date('M d, Y', strtotime($pVal['start_datetime'])),
//                                        'start_time' => trim(date('h:ia', strtotime($pVal['start_datetime'])), '0'),
//                                        'end_time' => trim(date('h:ia', strtotime($pVal['end_datetime'])), '0'),
//                                        'db_task_date' => date('Y-m-d', strtotime($start_datetime)),
//                                        'db_start_time' => trim(date('h:ia', strtotime($start_datetime)), '0'),
//                                        'db_end_time' => trim(date('h:ia', strtotime($end_datetime)), '0')
//                                    );
//                                }
//                            }
//                        }
//                    }
//                    /* end */
//                }
//            }
//        }
        if (is_array($overlap_msg) && count($overlap_msg) > 0) {
            foreach ($overlap_msg as $key => $val) {
                $overlap_msg[$key] = array_values($val);
            }
        }
        $ret_arr = array(
            'success' => $overrlap ? 'No' : 'Yes',
            'data' => $overlap_msg
        );
        #pr($overlap_msg);exit;
        #pr($existing_logtime);pr($LogTime);exit;
        if ($return_val) {
            return $ret_arr;
        } else {
            echo json_encode($ret_arr);
            exit;
        }
    }

    /* Author: GKM
     * it is used to prepare logtime data while add, edit and reply of tasks
     */

    public function prepare_log_time_from_reply($arr, $task_details = array())
    {
        $LogTime = array();
        $logdata = $arr['timelog'];

        #$task_date = date('Y-m-d',strtotime($logdata['taskdate']));
        #$task_date = date('Y-m-d');
        /* utc has been converted to users time zone */
        $task_date = $this->Tmzone->GetDateTime(SES_TIMEZONE, TZ_GMT, TZ_DST, TZ_CODE, date('Y-m-d H:i:s'), "date");

        $task_id = $arr['CS_id'] > 0 ? $arr['CS_id'] : ($arr['taskid'] > 0 ? $arr['taskid'] : intval($task_details['caseid']));
        $LogTime['task_id'] = $task_id;

        $LogTime['project_id'] = $arr['pid'];
        $LogTime['task_status'] = $arr['CS_legend'];

        $LogTime['user_id'][] = $arr['CS_assign_to'];
        $LogTime['task_date'][] = $task_date;
        $LogTime['start_time'][] = $logdata['start_time'];
        $LogTime['end_time'][] = $logdata['end_time'];

        $LogTime['totalbreak'][] = $logdata['break_time'];
        $LogTime['totalduration'][] = $logdata['hours'];

        $LogTime['is_billable'][] = isset($logdata['is_bilable']) && trim($logdata['is_bilable']) == 'Yes' ? 1 : 0;
        $LogTime['description'] = addslashes(trim($arr['CS_message']));

        return $LogTime;
    }

    /* author: GKM
     * to update time spent for project or task selected
     */

    public function project_time_details($project_uniq_id = null, $task_id = '')
    {
        $prjid = $GLOBALS['getallproj'][0]['Project']['id'];
        $prjuniqueid = $GLOBALS['getallproj'][0]['Project']['uniq_id'];
        $project_id = $this->data['proid'];
        $task_id = intval($this->data['tskid']) > '0' ? trim($this->data['tskid']) : $task_id;
        $prjunid = !empty($this->data['prjunid']) ? $this->data['prjunid'] : $project_uniq_id;

        /* project details */
        $this->Project->recursive = -1;
        $projArr = $this->Project->find('first', array('conditions' => array('Project.uniq_id' => $prjunid, 'Project.isactive' => 1, 'Project.company_id' => SES_COMP), 'fields' => array('Project.id')));
        $project_id = $projArr['Project']['id'];

        $task_condition = trim($task_id) != '' ? " AND task_id = $task_id" : "";
        $es_task_condition = trim($task_id) != '' ? " AND id = $task_id" : "";
        $usrCndtn = (SES_TYPE == 3) ? " AND`LogTime`.user_id= " . SES_ID . " " : '';

        $count_sql = 'SELECT SUM(total_hours) as secds,is_billable '
                . 'FROM log_times AS `LogTime` '
                . "LEFT JOIN easycases AS Easycase ON Easycase.id=LogTime.task_id AND LogTime.project_id=Easycase.project_id "
                . 'WHERE is_billable = 1 AND Easycase.isactive =1 AND LogTime.project_id = "' . $project_id . '" ' . $task_condition . ' ' . $usrCndtn
                . 'GROUP BY LogTime.project_id  '
                . 'UNION '
                . 'SELECT sum(total_hours) as secds, is_billable '
                . 'FROM log_times AS LogTime '
                . "LEFT JOIN easycases AS Easycase ON Easycase.id=LogTime.task_id AND LogTime.project_id=Easycase.project_id "
                . 'WHERE is_billable = 0 AND Easycase.isactive =1 AND LogTime.project_id ="' . $project_id . '" ' . $task_condition . ' ' . $usrCndtn
                . 'GROUP BY LogTime.project_id ';
        #echo $count_sql;exit;
        $cntlog = $this->LogTime->query($count_sql);
        #pr($cntlog);exit;

        $billable_hours = $cntlog[0][0]['is_billable'] > 0 ? $cntlog[0][0]['secds'] : 0;
        $total_spent = ($cntlog[0][0]['secds'] + $cntlog[1][0]['secds']);
        $nonbillableHrs = $total_spent - $billable_hours;

        /* /estimated hours/ */
        $est_sql = "SELECT SUM(estimated_hours) AS hrs "
                . "FROM easycases AS Easycase "
                . "WHERE project_id = '" . $project_id . "' AND istype=1 AND Easycase.isactive=1 " . $es_task_condition;
        $estimated = $this->Easycase->query($est_sql);
        $total_estimated = $estimated[0][0]['hrs'];
        //code added by jyoti to get project userlist
        $Activeparams = array('conditions' => array('CompanyUser.is_active' => 1, 'CompanyUser.company_id' => SES_COMP));
        if (SES_TYPE == 3) {
            $Activeparams['conditions']['CompanyUser.user_id'] = SES_ID;
        }
        $Activeusers = $this->CompanyUser->find('all', $Activeparams);
        $Activeusers = Hash::extract($Activeusers, '{n}.CompanyUser.user_id');
        $params = array('conditions' => array('ProjectUser.project_id' => $project_id, 'ProjectUser.user_id' => $Activeusers),'fields'=>array('User.id','User.name','User.last_name'),'order'=>array('User.name'=>'ASC'));
        $this->ProjectUser->recursive = 2;
        $this->ProjectUser->bindModel(array('belongsTo' => array('User')));
        $users = $this->ProjectUser->find('all', $params);
        if (!empty($project_uniq_id)) {
            return array('billable_hours' => $billable_hours, 'total_spent' => $total_spent, 'total_estimated' => $total_estimated, 'nonbillable_hours' => $nonbillableHrs, 'project_users' => $users);
        } else {
            echo json_encode(array('billable_hours' => $billable_hours, 'total_spent' => $total_spent, 'total_estimated' => $total_estimated, 'nonbillable_hours' => $nonbillableHrs, 'project_users' => $users));
        }
        exit;
    }

    public function saveInlineTitle()
    {
        if (trim($this->request->data['uniq_id']) != '' && trim($this->request->data['title']) != '') {
            //$this->request->data['title'] = addslashes($this->request->data['title']); on 02 dec 2019
            $getCase = $this->Easycase->find('first', array(
                'conditions' => array(
                    'uniq_id' => trim($this->request->data['uniq_id']), 'isactive' => 1,'istype' => 1
                ),
                'fields' => array('Easycase.id','Easycase.uniq_id','Easycase.title','Easycase.message','Easycase.project_id','Easycase.case_no','Easycase.user_id','Easycase.type_id','Easycase.priority','Easycase.assign_to','Easycase.story_point','Easycase.legend','Easycase.custom_status_id','Easycase.reply_type','Easycase.dt_created','Easycase.estimated_hours','Easycase.status','Easycase.gantt_start_date','Easycase.due_date')
            ));
            if ($getCase) {
                
                /*$cs_cnt_upd = $getCase['Easycase']['case_count']+1;
                $this->Easycase->updateAll(array('title' => trim($this->request->data['title']),'updated_by'=>SES_ID,'dt_created' => "'".GMT_DATETIME."'"), array('id'=>$getCase['Easycase']['id'],'project_id'=>$getCase['Easycase']['project_id']));*/
                
                $getCase['Easycase']['title'] = trim($this->request->data['title']);
                $getCase['Easycase']['dt_created'] = GMT_DATETIME;
                $getCase['Easycase']['updated_by'] = SES_ID;
                $this->Easycase->save($getCase);
                $this->Format->createGoogleCalendarEvent($getCase['Easycase']['id'], $getCase['Easycase'], 'edit');
                $curCaseId = $this->Easycase->insertCommentThreadCommon($getCase, 'title', trim($this->request->data['title']));

                /*$sql = 'UPDATE easycases SET title="' . trim($this->request->data['title']) . '" WHERE uniq_id = "' . trim($this->request->data['uniq_id']) . '"';
            $this->Easycase->query($sql);

            $sqldata = "SELECT * FROM `easycases` WHERE `uniq_id`='" . trim($this->request->data['uniq_id']) . "'";
            $dataeasycase = $this->Easycase->query($sqldata);
            $caseuniqid = $this->Format->generateUniqNumber();
            $this->Easycase->query("INSERT INTO easycases SET "
                    . "uniq_id='" . $caseuniqid . "', case_no = '" . $dataeasycase[0]['easycases']['case_no'] . "', 	"
                    . "case_count=0, project_id='" . $dataeasycase[0]['easycases']['project_id'] . "', "
                    . "user_id='" . SES_ID . "', updated_by=0, type_id='" . $dataeasycase[0]['easycases']['type_id'] . "', "
                    . "priority='" . $dataeasycase[0]['easycases']['priority'] . "', title='" . trim($this->request->data['title']) . "', message='', "
                    . "hours='0', assign_to='" . $dataeasycase[0]['easycases']['assign_to'] . "',due_date='" . $dataeasycase[0]['easycases']['due_date'] . "', "
                    . "istype='2',format='2', status='" . $dataeasycase[0]['easycases']['status'] . "', "
                    . "legend='" . $dataeasycase[0]['easycases']['legend'] . "', isactive=1, "
                    . "dt_created='" . GMT_DATETIME . "',actual_dt_created='" . GMT_DATETIME . "',reply_type=7");
                $curCaseId = $this->Easycase->query('SELECT last_insert_id() as curCaseId');*/
                
                $arr = array('status' => 'success', 'curCaseId' => $curCaseId, 'caseid' => $getCase['Easycase']['id'], 'case_no' => $getCase['Easycase']['case_no']);
                echo json_encode($arr);
                exit;
            }
        }
        echo json_encode(array('status' => 'fail'));
        exit;
    }

    /* Author Satyajeet
     *  This function is used to delete image from task detail page
     */

    public function remove_file_from_detail()
    {
        $this->layout = 'ajax';
        $arr = '';
        if ($this->params->data['casefileid']) {
            $caseFileId = $this->params->data['casefileid'];
            $easycaseId = $this->params->data['caseid'];
            $success = $this->Postcase->removeFiles($caseFileId, $easycaseId);
            if ($success) {
                $arr['msg'] = 'success';
            }
        } else {
            $arr['msg'] = 'fail';
        }
        echo json_encode($arr);
        exit;
    }

    
    public function time_worked($args = null)
    {
        $this->layout = 'ajax';
        if (isset($args) && !empty($args)) {
            $this->data = $args;
        }
        $projid = $this->data['projid'];
        $this->Project->recursive = -1;
        $proj = $this->Project->find('first', array('conditions' => array('Project.uniq_id' => $projid), 'fields' => array('Project.id', 'Project.name')));
        $project_id = $proj['Project']['id'];
        if (SES_TYPE == 3 || $this->Auth->user('is_client') == 1) {
            /* find total billable and non-billable time */
            $count_sql = 'SELECT sum(total_hours) as secds,is_billable '
                    . 'FROM log_times AS `LogTime` '
                    . "LEFT JOIN easycases AS Easycase ON Easycase.id=LogTime.task_id AND LogTime.project_id=Easycase.project_id "
                    . 'WHERE is_billable = 1 AND Easycase.isactive =1 AND LogTime.project_id = "' . $project_id . '"  '
                    . 'AND LogTime.user_id = "' . SES_ID . '" '
                    . 'GROUP BY LogTime.project_id  '
                    . 'UNION '
                    . 'SELECT sum(total_hours) as secds, is_billable '
                    . 'FROM log_times AS LogTime '
                    . "LEFT JOIN easycases AS Easycase ON Easycase.id=LogTime.task_id AND LogTime.project_id=Easycase.project_id "
                    . 'WHERE is_billable = 0 AND Easycase.isactive =1 AND LogTime.project_id ="' . $project_id . '"  '
                    . 'AND LogTime.user_id = "' . SES_ID . '" '
                    . 'GROUP BY LogTime.project_id ';
        } elseif (SES_TYPE <= 2) {
            /* find total billable and non-billable time */
            $count_sql = 'SELECT sum(total_hours) as secds,is_billable '
                . 'FROM log_times AS `LogTime` '
                . "LEFT JOIN easycases AS Easycase ON Easycase.id=LogTime.task_id AND LogTime.project_id=Easycase.project_id "
                . 'WHERE is_billable = 1 AND Easycase.isactive =1 AND LogTime.project_id = "' . $project_id . '"  '
                . 'GROUP BY LogTime.project_id  '
                . 'UNION '
                . 'SELECT sum(total_hours) as secds, is_billable '
                . 'FROM log_times AS LogTime '
                . "LEFT JOIN easycases AS Easycase ON Easycase.id=LogTime.task_id AND LogTime.project_id=Easycase.project_id "
                . 'WHERE is_billable = 0 AND Easycase.isactive =1 AND LogTime.project_id ="' . $project_id . '"  '
                . 'GROUP BY LogTime.project_id ';
        }
        #echo $count_sql;exit;
        $cntlog = $this->LogTime->query($count_sql);

        #pr($cntlog);exit;
        if (is_array($cntlog) && count($cntlog) > 0) {
            $billablehours = $cntlog[0][0]['is_billable'] == 1 ? $cntlog[0][0]['secds'] : 0;
            $nonbillablehours = $cntlog[0][0]['is_billable'] == 0 ? $cntlog[0][0]['secds'] : $cntlog[1][0]['secds'];

            $thoursbillable = ($billablehours);
            $totalhours = ($cntlog[0][0]['secds'] + $cntlog[1][0]['secds']);

            /* echo "billable: " . $this->Format->format_time_hr_min($billablehours)
              . "<br> non billable: " . $this->Format->format_time_hr_min($nonbillablehours)
              . " <br>Total: " . $this->Format->format_time_hr_min($totalhours);
              exit; */
            $data = array(
                array('type' => 'billable', 'time' => $billablehours > 0 ? $billablehours / 3600 : 0, 'display' => $this->Format->format_time_hr_min($billablehours)),
                array('type' => 'nonbillable', 'time' => $nonbillablehours > 0 ? $nonbillablehours / 3600 : 0, 'display' => $this->Format->format_time_hr_min($nonbillablehours)),
                array('type' => 'total_hours', 'time' => $totalhours > 0 ? $totalhours / 3600 : 0, 'display' => $this->Format->format_time_hr_min($totalhours)),
            );
            if (isset($args) && !empty($args)) {
                return $data;
            } else {
                $this->set(compact('data'));
            }
        } else {
            if (isset($this->data['extra']) && $this->data['extra'] == 'overview') {
                if (isset($args) && !empty($args)) {
                    return "<figure style='margin: 30px auto;text-align: center;'><img src='" . HTTP_ROOT . "img/no-data/sample_image_1.png' alt='No Data' /></figure>";
                } else {
                    echo "<figure style='margin: 30px auto;text-align: center;'><img src='" . HTTP_ROOT . "img/no-data/sample_image_1.png' alt='No Data' /></figure>";
                }
            } else {
                if (isset($args) && !empty($args)) {
                    return "<img src='" . HTTP_ROOT . "img/sample/dashboard/hour.png' alt='' style='margin-top:50px'/>";
                } else {
                    echo "<img src='" . HTTP_ROOT . "img/sample/dashboard/hour.png' alt='' style='margin-top:50px'/>";
                }
            }
            exit;
        }
    }

    public function project_users($args=null)
    {
        $this->layout = 'ajax';
        if (isset($args) && !empty($args)) {
            $this->data = $args;
        }
        $projid = $this->data['projid'];
        $this->Project->recursive = -1;
        $proj = $this->Project->getProjectFields(array('uniq_id' => $this->data['projid'], 'company_id'=>SES_COMP), array('id','user_id','name','start_date','end_date'));
        $project_id = $proj['Project']['id'];

        $Activeparams = array('conditions' => array('CompanyUser.is_active' => 1, 'CompanyUser.company_id' => SES_COMP));
        $Activeusers = $this->CompanyUser->find('all', $Activeparams);
        $Activeusers = Hash::extract($Activeusers, '{n}.CompanyUser.user_id');

        $this->ProjectUser->unbindModel(array('belongsTo' => array('Project')));
        $this->ProjectUser->bindModel(array('belongsTo' => array('User')));
        $params = array('conditions' => array('ProjectUser.project_id' => $project_id, 'ProjectUser.user_id' => $Activeusers),'fields'=>array('ProjectUser.*','User.id','User.uniq_id','User.email','User.name','User.last_name','User.photo'),'order'=>array('User.name'=>'ASC'));
        $users = $this->ProjectUser->find('all', $params);
        if (isset($this->data['extra']) && trim($this->data['extra']) == 'overview') {
            $users = Hash::combine($users, '{n}.ProjectUser.user_id', '{n}');
            $project_users = array_keys($users);
            $tsk_conditions = array('Easycase.assign_to' => $project_users, 'Easycase.project_id' => $project_id, 'Easycase.isactive' => 1, 'Easycase.istype' => 1);
            $tasks = $this->Easycase->find('all', array('conditions' => $tsk_conditions, 'fields' => array('Easycase.assign_to','Easycase.id','Easycase.due_date')));
            if ($tasks) {
                foreach ($tasks as $k => $v) {
                    if (isset($users[$v['Easycase']['assign_to']])) {
                        $users[$v['Easycase']['assign_to']]['ProjectUser']['tot_task'] += 1;
                        if ($v['Easycase']['due_date'] != '' && $v['Easycase']['due_date'] != '0000-00-00 00:00:00' && $v['Easycase']['due_date'] != '1970-01-01 00:00:00' && date('Y-m-d', strtotime($v['Easycase']['due_date'])) < GMT_DATE) {
                            $users[$v['Easycase']['assign_to']]['ProjectUser']['od_task'] += 1;
                        }
                    }
                }
            }
            
            $archtsk_conditions = array('Easycase.project_id' => $project_id, 'Easycase.isactive !=' => 1, 'Easycase.istype' => 1);
            $clt_sql = 1;
            if ($this->Auth->user('is_client') == 1) {
                $archtsk_conditions = array('Easycase.project_id' => $project_id, 'Easycase.isactive !=' => 1, 'Easycase.istype' => 1,"((Easycase.client_status = " . $this->Auth->user('is_client') . " AND Easycase.user_id = " . $this->Auth->user('id') . ") OR Easycase.client_status != " . $this->Auth->user('is_client') . ")");
            }
            $archtasks = $this->Easycase->find('all', array('conditions' => $archtsk_conditions, 'fields' => array('Easycase.id')));
            if ($archtasks) {
                $arc_tsk_ids = array_values(array_unique(Hash::extract($archtasks, '{n}.Easycase.id')));
            }
            $time_log_bill_cond = array('LogTime.project_id' => $project_id, 'LogTime.user_id' => $project_users);
            if ($arc_tsk_ids) {
                $time_log_bill_cond['NOT'] = array('LogTime.task_id'=>$arc_tsk_ids);
            }
            $log_bills = $this->LogTime->find('all', array('conditions' => $time_log_bill_cond, 'fields' => array('SUM(LogTime.total_hours) as total_hours', 'LogTime.user_id','LogTime.is_billable'), 'group' => array('LogTime.user_id','LogTime.is_billable')));
            //$db =ConnectionManager::getDataSource('default');
            //$db->showLog();exit;
            if ($log_bills) {
                foreach ($log_bills as $k => $v) {
                    if (isset($users[$v['LogTime']['user_id']])) {
                        if ($v['LogTime']['is_billable']) {
                            $users[$v['LogTime']['user_id']]['ProjectUser']['billable'] += $v[0]['total_hours'];
                        } else {
                            $users[$v['LogTime']['user_id']]['ProjectUser']['non_billable'] += $v[0]['total_hours'];
                        }
                    }
                }
            }
        }
        if (isset($args) && !empty($args)) {
            return array('prjusrid' => $proj['Project']['user_id'], 'extra'=> $this->data['extra'],'users'=>$users,'projid'=>$projid,'proj'=>$proj);
        } else {
            $this->set('prjusrid', $proj['Project']['user_id']);
            $this->set('extra', $this->data['extra']);
            $this->set(compact('users', 'projid', 'proj'));
            $this->set('loggedInUser', $this->Auth->user());
        }
    }
    
    public function project_groups($args = null)
    {
        
        //overdue tasks
        //$this->data['extra']
        $cond = '';
        if ($args) {
            $this->data = $args;
        }
        $project_id = $this->Project->getProjectFields(array('uniq_id' => $this->data['projid'],'company_id' => SES_COMP), array('id'));
        if ($project_id) {
            $cond = "Project.uniq_id = '" . $this->data['projid'] . "' AND";
            $clt_sql = 1;
            if ($this->Auth->user('is_client') == 1) {
                $clt_sql = "((Easycase.client_status = " . $this->Auth->user('is_client') . " AND Easycase.user_id = " . $this->Auth->user('id') . ") OR Easycase.client_status != " . $this->Auth->user('is_client') . ")";
            }
            $curDateTime = $this->Tmzone->GetDateTime(SES_TIMEZONE, TZ_GMT, TZ_DST, TZ_CODE, GMT_DATETIME, "datetime");
            $pg_sql = "SELECT SQL_CALC_FOUND_ROWS Easycase.*,EasycaseMilestone.milestone_id as mid FROM (SELECT Easycase.id,Easycase.case_no,Easycase.dt_created,Easycase.legend,Easycase.due_date,Easycase.seq_id FROM easycases as Easycase WHERE istype='1' AND Easycase.isactive=1 AND Easycase.project_id='".$project_id['Project']['id']."' AND Easycase.project_id<>0 AND " . $clt_sql . ") AS Easycase LEFT JOIN easycase_milestones EasycaseMilestone ON Easycase.id=EasycaseMilestone.easycase_id AND EasycaseMilestone.project_id ='".$project_id['Project']['id']."' ORDER BY CASE WHEN EasycaseMilestone.milestone_id IS NULL THEN 99999999999999 ELSE EasycaseMilestone.m_order END ASC, EasycaseMilestone.milestone_id ASC ,EasycaseMilestone.id_seq ASC,Easycase.seq_id ASC";
            $res_pg = $this->EasyCase->query($pg_sql);
            
            $this->Milestone->recursive = -1;
            $cond_pnames = array('conditions' => array('Milestone.id <>' =>'','Milestone.project_id' =>$project_id['Project']['id'],'Milestone.company_id' =>SES_COMP), 'fields' => array('Milestone.id','Milestone.uniq_id', 'Milestone.title'));
            $all_mil_names_all = $this->Milestone->find('all', $cond_pnames);
            if ($all_mil_names_all) {
                $all_mil_names = Hash::combine($all_mil_names_all, '{n}.Milestone.id', '{n}.Milestone.title');
                $all_mil_names_all = Hash::combine($all_mil_names_all, '{n}.Milestone.id', '{n}.Milestone');
            }
            
            
            #pr($res_pg);exit;
            
            $res_out = array();
            if ($res_pg) {
                $milestone_ids = array_values(array_unique(Hash::extract($res_pg, '{n}.EasycaseMilestone.mid')));
                if ($all_mil_names) {
                    $milestone_ids = array_filter($milestone_ids);
                    
                    $arry_empty_keys = array_keys($all_mil_names);
                    $all_mil_names_epty = array_diff($arry_empty_keys, $milestone_ids);
                    foreach ($res_pg as $k => $v) {
                        $res_out[$v['EasycaseMilestone']['mid']]['Milestone']['title'] = $all_mil_names[$v['EasycaseMilestone']['mid']];
                        $res_out[$v['EasycaseMilestone']['mid']]['Milestone']['uniq_id'] = $all_mil_names_all[$v['EasycaseMilestone']['mid']]['uniq_id'];
                        if (in_array($v['Easycase']['legend'], array(3))) { //array(3,5)
                            $res_out[$v['EasycaseMilestone']['mid']]['Milestone']['cls_cnt'] += 1;
                        } else {
                            $res_out[$v['EasycaseMilestone']['mid']]['Milestone']['inp_cnt'] += 1;
                        }
                        if ($v['Easycase']['due_date'] != '' && $v['Easycase']['due_date'] != '0000-00-00 00:00:00' && $v['Easycase']['due_date'] != '1970-01-01 00:00:00' && date('Y-m-d', strtotime($v['Easycase']['due_date'])) < GMT_DATE) {
                            $res_out[$v['EasycaseMilestone']['mid']]['Milestone']['od_cnt'] += 1;
                        }
                    }
                    if ($all_mil_names_epty) {
                        foreach ($all_mil_names_epty as $k1 => $v1) {
                            $res_out[$v1]['Milestone']['title'] = $all_mil_names[$v1];
                            $res_out[$v1]['Milestone']['uniq_id'] = $all_mil_names_all[$v1]['uniq_id'];
                            $res_out[$v1]['Milestone']['cls_cnt'] = 0;
                            $res_out[$v1]['Milestone']['inp_cnt'] = 0;
                            $res_out[$v1]['Milestone']['od_cnt'] = 0;
                        }
                    }
                } else {
                    $res_out = array();
                    $this->set(compact('res_out'));
                }
            } else {
                if ($all_mil_names) {
                    foreach ($all_mil_names as $k1 => $v1) {
                        $res_out[$k1]['Milestone']['title'] = $v1;
                        $res_out[$k1]['Milestone']['uniq_id'] = $all_mil_names_all[$k1]['uniq_id'];
                        $res_out[$k1]['Milestone']['cls_cnt'] = 0;
                        $res_out[$k1]['Milestone']['inp_cnt'] = 0;
                        $res_out[$k1]['Milestone']['od_cnt'] = 0;
                    }
                }
            }
            $this->set(compact('res_out'));
        } else {
            $res_out = array();
            $this->set(compact('res_out'));
        }
        if ($args) {
            return array('res_out'=>$res_out,'prjid'=>$this->data['projid'],'extra'=>$this->data['extra']);
        }
        $this->set('prjid', $this->data['projid']);
        $this->set('extra', $this->data['extra']);
    }

    public function project_notes($args = null)
    {
        $this->loadModel('ProjectNote');
        $cond = '';
        if ($args) {
            $this->data = $args;
        }
        $notes = array();
        $project_id = $this->Project->getProjectFields(array('uniq_id' => $this->data['projid'],'company_id' => SES_COMP), array('id'));
        if ($project_id) {
            $this->ProjectNote->bindModel(array('belongsTo' => array('User'=> array('className' => 'User','foreignKey' => 'user_id'))));
            $notes = $this->ProjectNote->getProjNotes(SES_COMP, $project_id['Project']['id']);
            //pr($notes);exit;
            if ($args) {
                //required for pdf generation.
                    //return array('res_out'=>$res_out,'prjid'=>$this->data['projid'],'extra'=>$this->data['extra'], 'notes'=>$notes);
            }
        }
        $this->set(compact('notes'));
        $this->set('prjid', $this->data['projid']);
        $this->set('ses_id', SES_ID);
        //$this->set('extra', $this->data['extra']);
    }
        
    public function saveProjectNote()
    {
        $this->loadModel('ProjectNote');
        $jsonRes = array('status'=>'success');
        if (empty($this->data['note']) || empty($this->data['proj_id'])) {
            $jsonRes['status'] = 'error';
            $jsonRes['msg'] = __('Note can not be blank.');
        }
        $projid = $this->data['proj_id'];
        $this->Project->recursive = -1;
        $proj = $this->Project->find('first', array('conditions' => array('Project.uniq_id' => $projid, 'Project.company_id'=>SES_COMP), 'fields' => array('Project.id', 'Project.name')));
        if (empty($proj)) {
            $jsonRes['status'] = 'error';
            $jsonRes['msg'] = __('Invalid operation on this project.');
        }
        if (!empty($this->data['id'])) {
            $this->ProjectNote->bindModel(array('belongsTo' => array('User'=> array('className' => 'User','foreignKey' => 'user_id'))));
            $notArr = $this->ProjectNote->getProjNote(SES_COMP, $proj['Project']['id'], trim($this->data['id']));
            if (empty($notArr)) {
                $jsonRes['status'] = 'error';
                $jsonRes['msg'] = __('You are not authorized to do this action.');
            } elseif ($notArr['ProjectNote']['user_id'] != SES_ID) {
                $jsonRes['status'] = 'error';
                $jsonRes['msg'] = __('You are not authorized to do this action.');
            }
            $notArr['ProjectNote']['note'] = trim($this->data['note'], '&nbsp;');
            $notArr['ProjectNote']['is_updated'] = 1;
            $notArr['ProjectNote']['modified'] = GMT_DATETIME;
        //unset($notArr['User']);
        } else {
            $notArr['ProjectNote']['note'] = trim($this->data['note']);
            $notArr['ProjectNote']['company_id'] = SES_COMP;
            $notArr['ProjectNote']['user_id'] = SES_ID;
            $notArr['ProjectNote']['project_id'] = $proj['Project']['id'];
            $notArr['ProjectNote']['uniq_id'] = $this->Format->generateUniqNumber();
        }
        if ($jsonRes['status'] != 'error' && $this->ProjectNote->save($notArr)) {
            if (!empty($this->data['id'])) {
                $view = new View($this);
                $tz = $view->loadHelper('Tmzone');
                $dt = $view->loadHelper('Datetime');
                $frmt = $view->loadHelper('Format');
                $curDateTz = $tz->GetDateTime(SES_TIMEZONE, TZ_GMT, TZ_DST, TZ_CODE, GMT_DATETIME, "datetime");
                $sh_txt = __('Updated by').' <strong>'.$notArr['User']['name'].' '.$notArr['User']['last_name'].'</strong> '.__('on');
                $locDT1 = $tz->GetDateTime(SES_TIMEZONE, TZ_GMT, TZ_DST, TZ_CODE, $notArr['ProjectNote']['created'], "datetime");
                $created_on = $dt->facebook_style_date_time($locDT1, $curDateTz);
                $sh_txt .= ' <strong>'.$created_on.'</strong>';
                $jsonRes['update_txt'] = $sh_txt;
                $caseMsgRep = $frmt->formatCms($notArr['ProjectNote']['note']);
                $caseMsgRep = preg_replace('/<script.*>.*<\/script>/ims', '', $frmt->html_wordwrap($caseMsgRep, 80));
                $jsonRes['title'] = $caseMsgRep;
            }
            $is_updt = 0;
            if (!empty($this->data['id'])) {
                $is_updt = 1;
                $subject = __('Project note updated on').' "'.$proj['Project']['name'].'"';
            } else {
                $subject = __('Project note added on').' "'.$proj['Project']['name'].'"';
            }
                
            $this->loadModel('ProjectUser');
            $this->ProjectUser->bindModel(array('belongsTo' => array('User')));
            $projArr = $this->ProjectUser->find('all', array('conditions' => array('ProjectUser.project_id' => $proj['Project']['id'], 'ProjectUser.company_id' => SES_COMP, 'ProjectUser.default_email'=>1), 'fields' => array('User.id', 'User.name', 'User.email','ProjectUser.id'), 'order'=>array('ProjectUser.id'=>'ASC')));
            //check for user permission
            if (count($projArr) > 1) {
                $to_email = $projArr[0]['User']['email'];
                $projectEmls = array_unique(Hash::extract($projArr, '{n}.User.email'));
                array_shift($projectEmls);
                if (!empty($projectEmls)) {
                    $this->Email->delivery = 'smtp';
                    $this->Email->to = $to_email;
                    $this->Email->cc = $projectEmls;
                    $this->Email->subject = $subject;
                    $this->Email->from = FROM_EMAIL;
                    $this->Email->template = 'project_note';
                    $this->set('note', trim($this->data['note']));
                    $this->set('is_update', $is_updt);
                    $this->set('pname', $proj['Project']['name']);
                    $this->Email->sendAs = 'html';
                    $this->Sendgrid->sendgridsmtp($this->Email);
                }
            }
            $jsonRes['status'] = 'success';
            $jsonRes['msg'] = __('Note posted successfully.');
        } else {
            $jsonRes['status'] = 'error';
            $jsonRes['msg'] = __('Unable to post the note. Please try again.');
        }
        echo json_encode($jsonRes);
        exit;
    }
    public function deleteProjectNote()
    {
        $this->loadModel('ProjectNote');
        $jsonRes = array('status'=>'success');
        if (empty($this->data['id']) || empty($this->data['proj_id'])) {
            $jsonRes['status'] = 'error';
            $jsonRes['msg'] = __('Invalid operation is not allowed.');
        }
        $projid = $this->data['proj_id'];
        $this->Project->recursive = -1;
        $proj = $this->Project->find('first', array('conditions' => array('Project.uniq_id' => $projid, 'Project.company_id'=>SES_COMP), 'fields' => array('Project.id', 'Project.name')));
        if (empty($proj)) {
            $jsonRes['status'] = 'error';
            $jsonRes['msg'] = __('Invalid operation on this project.');
        }
        $notArr = $this->ProjectNote->getProjNote(SES_COMP, $proj['Project']['id'], trim($this->data['id']));
        if (empty($notArr)) {
            $jsonRes['status'] = 'error';
            $jsonRes['msg'] = __('You are not authorized to do this action.');
        } elseif ($notArr['ProjectNote']['user_id'] != SES_ID) {
            $jsonRes['status'] = 'error';
            $jsonRes['msg'] = __('You are not authorized to do this action.');
        } else {
            $this->ProjectNote->id = $notArr['ProjectNote']['id'];
            if ($this->ProjectNote->delete()) {
                $jsonRes['status'] = 'success';
                $jsonRes['msg'] = __('Note deleted successfully.');
            } else {
                $jsonRes['status'] = 'error';
                $jsonRes['msg'] = __('Unable to delete the note. Please try again.');
            }
        }
        echo json_encode($jsonRes);
        exit;
    }
    public function unbilled_time()
    {
        $projid = $this->data['projid'];
        $this->Project->recursive = -1;
        $proj = $this->Project->find('first', array('conditions' => array('Project.uniq_id' => $projid), 'fields' => array('Project.id', 'Project.name')));
        $project_id = $proj['Project']['id'];

        $conditions = array('LogTime.project_id' => $project_id,
            'LogTime.is_billable' => 1,
            "LogTime.log_id NOT IN (SELECT invoice_logs.log_id FROM invoice_logs LEFT JOIN invoices ON invoices.id=invoice_logs.invoice_id "
            . "WHERE invoices.project_id='$project_id' AND invoice_logs.log_id>0)",
        );
        $params = array();
        $params['conditions'] = $conditions;
        $params['joins'] = array(
            array('table' => 'easycases', 'alias' => 'Easycase', 'type' => 'LEFT', 'conditions' => array('Easycase.id = LogTime.task_id')),
            array('table' => 'users', 'alias' => 'User', 'type' => 'LEFT', 'conditions' => array('User.id = LogTime.user_id')),
            array('table' => 'types', 'alias' => 'Type', 'type' => 'LEFT', 'conditions' => array('Type.id = Easycase.type_id')),
        );
        $params['fields'] = array('LogTime.*', 'Easycase.title', 'Type.name', 'CONCAT_WS(" ",User.name,User.last_name) AS name');
        $conditions['Easycase.isactive'] = '1';
        $hours_params = array('conditions' => $conditions, 'fields' => 'SUM(total_hours) AS total_hours');
        $hours_params['joins'] = array(
            array('table' => 'easycases', 'alias' => 'Easycase', 'type' => 'LEFT', 'conditions' => array('Easycase.id = LogTime.task_id')),
        );
        $tot_hours = $this->LogTime->find('all', $hours_params);

        if (is_array($tot_hours) && isset($tot_hours[0][0]['total_hours']) && intval($tot_hours[0][0]['total_hours']) > 0) {
            $ret_str = '';
            if (!$this->Session->read('Auth.User.is_client')) {
                echo '<a class="overview_hover" href="' . HTTP_ROOT . 'easycases/invoice">' . $this->Format->format_time_hr_min($tot_hours[0][0]['total_hours'], 1) . '</a>';
            } else {
                echo $this->Format->format_time_hr_min($tot_hours[0][0]['total_hours'], 1);
            }
        } else {
            echo '<div class="billable-graph un-bill-time"><h2>00<span>hrs</span></h2><h2>00<span>mins</span></h2></div>';
        }
        exit;
    }

    public function project_status($args = null)
    {
        $this->layout = 'ajax';
        if (isset($args) && !empty($args)) {
            $this->data = $args;
        }
        $projid = $this->data['projid'];
        $this->Project->recursive = -1;

        if (isset($this->params['pass'][0]) && trim($this->params['pass'][0]) == 'user_detail') {
            $user_id = $this->params['pass'][1];
            $fragment = trim($this->params['pass'][2]);
            $projid = 'all';
        } else {
            $user_id = SES_ID;
            $fragment = '';
        }
        if ($projid != 'all') {
            $proj = $this->Project->find('first', array('conditions' => array('Project.uniq_id' => $projid), 'fields' => array('Project.id', 'Project.name')));
            $project_id = $proj['Project']['id'];
        }
        $clt_sql = 1;
        if ($this->Auth->user('is_client') == 1) {
            $clt_sql = "((Easycase.client_status = " . $this->Auth->user('is_client') . " AND Easycase.user_id = " . $this->Auth->user('id') . ") OR Easycase.client_status != " . $this->Auth->user('is_client') . ")";
        }
        if ($projid == 'all') {
            if (SES_TYPE == 1) {
                $projQry = "AND Easycase.project_id IN (SELECT ProjectUser.project_id FROM project_users AS ProjectUser,projects as Project WHERE ProjectUser.company_id=" . SES_COMP . " AND ProjectUser.project_id=Project.id AND Project.isactive='1')";
            } else {
                $projQry = "AND Easycase.project_id IN (SELECT ProjectUser.project_id FROM project_users AS ProjectUser,projects as Project WHERE ProjectUser.user_id=" . $user_id . " AND ProjectUser.company_id=" . SES_COMP . " AND ProjectUser.project_id=Project.id AND Project.isactive='1')";
            }
        } else {
            $projQry = "AND Easycase.project_id='" . $project_id . "'";
        }
        if ($fragment != '') {
            $view = new View($this);
            $tz = $view->loadHelper('Tmzone');
            $curDateTz = $tz->GetDateTime(SES_TIMEZONE, TZ_GMT, TZ_DST, TZ_CODE, GMT_DATETIME, "datetime");
            if ($fragment == 'lastmon') {
                $dates = $this->Format->date_filter('lastmonth', $curDateTz);
                $projQry .= "";
            } else {
                $dates = $this->Format->date_filter('thismonth', $curDateTz);
                $projQry .= "";
            }
        }

        $sql = "SELECT COUNT(Easycase.id) AS tot_count,if(Easycase.type_id=10,10,Easycase.legend) AS legend, Easycase.custom_status_id "
                . "FROM easycases as Easycase "
                . "WHERE Easycase.istype='1' AND " . $clt_sql . " AND  Easycase.isactive='1' AND Easycase.legend != 0 "
                . "AND Easycase.project_id!=0 " . $projQry . " "
                . "GROUP BY Easycase.custom_status_id, if(Easycase.type_id=10,10,Easycase.legend)";
        $common_qry = $this->Easycase->query($sql);
        
        $csts_arr = array();
        $status = array();
        if ($common_qry) {
            $csts_arr = $this->Easycase->getStatusFortasks($common_qry);
            foreach ($common_qry as $sk=>$sv) {
                if ($sv['Easycase']['custom_status_id']) {
                    $status[$sv['Easycase']['custom_status_id']] = $sv[0]['tot_count'];
                } else {
                    $status[$sv[0]['legend']] = $sv[0]['tot_count'];
                }
            }
        }
        //always custom status should start after 20 auto increment id for above
        //$status = Hash::combine($common_qry, '{n}.0.legend', '{n}.0.tot_count');

        $total = array_sum($status);
        $extra = $this->data['extra'];
        $this->set(compact('status', 'total', 'fragment', 'extra', 'common_qry', 'csts_arr'));
        if ($this->data['extra'] != 'overview') {
            $json_data = array();
            $closed = 0;
            $legend = array(1 => __("New", true), 2 => __("In-Progress", true), 3 => __("Closed", true), 4 => __("Start", true), 5 => __("Resolved", true), 6 => __("Modified", true), 10 => __("Modified", true));
            $color = array(1 => "#F19A91", 2 => "#8DC2F8", 3 => "#8AD6A3", 4 => "#A78AB6", 5 => "#F3C788", 6 => "#FFF363",10=>"#c2c2c2");
            if (is_array($status) && count($status)>0) {
                if (isset($status[4])) {
                    $status[2]+=$status[4];
                    unset($status[4]);
                }
                if (isset($status[6])) {
                    $status[2]+=$status[6];
                    unset($status[6]);
                }
                unset($status[10]);
                $i = 0;
                $custom_Arr = array();
                //foreach($status as $key=>$val){
                foreach ($common_qry as $key=>$val) {
                    if ($val[0]['legend'] == 3) {
                        $closed += $val[0]['tot_count'];
                    }
                    if ($val['Easycase']['custom_status_id']) {
                        if (array_key_exists(trim($csts_arr[$val['Easycase']['custom_status_id']]['name']), $custom_Arr)) {
                            $json_data['data'][$custom_Arr[trim($csts_arr[$val['Easycase']['custom_status_id']]['name'])]]['y'] += $val[0]['tot_count'];
                        } else {
                            $custom_Arr[trim($csts_arr[$val['Easycase']['custom_status_id']]['name'])] = $i;
                            $json_data['data'][$i]['name'] = $csts_arr[$val['Easycase']['custom_status_id']]['name'];
                            $json_data['data'][$i]['y'] = $val[0]['tot_count'];
                            $json_data['data'][$i]['color'] = '#'.$csts_arr[$val['Easycase']['custom_status_id']]['color'];
                            $i++;
                        }
                    } else {
                        $json_data['data'][$i]['name'] = $legend[$val[0]['legend']];
                        $json_data['data'][$i]['y'] = $val[0]['tot_count'];
                        $json_data['data'][$i]['color'] = $color[$val[0]['legend']];
                    }
                    //$i++;
                }
                $json_data['status'] = 'ok';
            } else {
                $json_data['status'] = '';
            }
           
            $json_data['total'] = $total;
            $json_data['fragment'] = $fragment;
            $json_data['closed'] = $closed;
            if (isset($args) && !empty($args)) {
                return json_encode($json_data, JSON_NUMERIC_CHECK);
            } else {
                echo json_encode($json_data, JSON_NUMERIC_CHECK);
                exit;
            }
        }
    }

    public function hours_linechart()
    {
        $this->layout = 'ajax';
        $projid = $this->data['projid'];
        $this->Project->recursive = -1;
        $proj = $this->Project->find('first', array('conditions' => array('Project.uniq_id' => $projid), 'fields' => array('Project.id', 'Project.name')));
        $proj_id = $proj['Project']['id'];
        if (!empty($this->request->data['mode']) && $this->request->data['mode'] == 'prev') {
            if (!empty($this->request->data['sdate'])) {
                $sdate = date('Y-m-d', strtotime($this->request->data['sdate'] . ' -30 day'));
                $edate = date('Y-m-d', strtotime($this->request->data['sdate']));
            }
        } elseif (!empty($this->request->data['mode']) && $this->request->data['mode'] == 'next') {
            if (!empty($this->request->data['edate'])) {
                $sdate = date('Y-m-d', strtotime($this->request->data['edate']));
                $edate = date('Y-m-d', strtotime($this->request->data['edate'] . ' +30 day'));
            }
        } else {
            $sdate = date('Y-m-d', strtotime(date('Y-m-d') . ' -30 day'));
            $edate = date('Y-m-d');
        }

        $dt_arr = array();
        $dts_arr = array();
        $interval = 1;
        $startDate = $sdate;
        $endDate = $edate;

        $view = new View($this);
        $tz = $view->loadHelper('Tmzone');
        if ($sdate != '') {
            $before = date('Y-m-d', strtotime($sdate));
            $to = date('Y-m-d', strtotime($edate));
            $days = (strtotime($to) - strtotime($before)) / (60 * 60 * 24);

            $x = floor($days);
            if ($x < 7) {
                $interval = 1;
            } elseif ($x > 80) {
                $interval = ceil($x / 10);
            } else {
                $interval = 2;
            }

            for ($i = 0; $i <= $x; $i++) {
                $m = " +" . $i . "day";
                $dt = date('Y-m-d', strtotime(date("Y-m-d", strtotime($before)) . $m));
                $dts = date('M d, Y', strtotime(date("Y-m-d H:i:s", strtotime($before)) . $m));
                $times = explode(" ", GMT_DATETIME);
                array_push($dt_arr, $dt);
                array_push($dts_arr, $dts);
            }
        }
        $this->set('tinterval', $interval);
        $this->set('dt_arr', json_encode($dts_arr));

        $cond = "";
        if (!empty($sdate)) {
            $dtt = date('Y-m-d', strtotime($sdate));
            $cond .= " AND DATE(start_datetime) >= '" . $dt_arr[0] . "' ";
            $case_cond .= " AND DATE(actual_dt_created) >= '" . $dt_arr[0] . "' ";
        }
        if (!empty($edate)) {
            $dtt = date('Y-m-d', strtotime($edate));
            $cond .= " AND DATE(start_datetime) <= '" . $dt_arr[$x] . "' ";
            $case_cond .= " AND DATE(actual_dt_created) <= '" . $dt_arr[$x] . "' ";
        }
        //if (!empty($this->data['pjid'])) {
        $cond .= " AND LogTime.project_id = '" . $proj_id . "' ";
        $case_cond .= " AND Easycase.project_id = '" . $proj_id . "' ";
        //}
        #if(!empty($this->data['type_id'])){$cond .= " AND type_id = '".$this->data['type_id']."'";}

        $clt_sql = 1;
        if ($this->Auth->user('is_client') == 1) {
            $clt_sql = "((Easycase.client_status = " . $this->Auth->user('is_client') . " AND Easycase.user_id = " . $this->Auth->user('id') . ") OR Easycase.client_status != " . $this->Auth->user('is_client') . ")";
            $case_sql = "SELECT Easycase.id FROM easycases as Easycase "
                    . "WHERE Easycase.project_id!=0 AND " . $clt_sql . " AND Easycase.reply_type=0 " . $case_cond . "";
            #$easycase = $this->Easycase->query($sql);
            $clt_sql = "LogTime.task_id IN ($case_sql)";
        }


        $sql = "SELECT Users.name as devname,LogTime.project_id,LogTime.user_id, LogTime.start_datetime AS cdate,"
                . "ROUND(LogTime.total_hours/3600,1) AS hours "
                . "FROM log_times as LogTime "
                . "LEFT JOIN users as Users ON Users.id = LogTime.user_id "
                . "LEFT JOIN easycases AS Easycase ON Easycase.id=LogTime.task_id AND LogTime.project_id=Easycase.project_id "
                . "WHERE Users.id>0 AND LogTime.project_id!=0 AND Easycase.isactive=1 AND " . $clt_sql . " " . $cond . " ";

        $easycase = $this->LogTime->query($sql);
        $view = new View($this);
        $tz = $view->loadHelper('Tmzone');
        $dt = $view->loadHelper('Datetime');
        $timezone_id = SES_TIMEZONE;
        $timezone_GMT = TZ_GMT;
        $timezone_DST = TZ_DST;
        $timezone_code = TZ_CODE;
        $curDateTz = $tz->GetDateTime($timezone_id, $timezone_GMT, $timezone_DST, $timezone_code, GMT_DATETIME, "datetime");
        $fstartDate = $dt->dateFormatOutputdateTime_day($startDate, $curDateTz, 'date');
        $fendDate = $dt->dateFormatOutputdateTime_day($endDate, $curDateTz, 'date');
//        pr($startDate); exit;
        $name = array();
        if (!empty($easycase)) {
            foreach ($easycase as $k => $v) {
                $name1 = 'test'; #$v['Users']['devname']
                $name[] = $name1;
                $cdts = $tz->GetDateTime(SES_TIMEZONE, TZ_GMT, TZ_DST, TZ_CODE, $v['LogTime']['cdate'], "date");

                $reportArr[$cdts]['name'] = $name1;
                $reportArr[$cdts][$name1]['hour'][] = $v[0]['hours'];
            }
            #pr($dt_arr);exit;
            #pr($name);exit;

            foreach ($dt_arr as $key => $date) {
                foreach ($name as $nm) {
                    if (array_key_exists($date, $reportArr)) {
                        if (!empty($reportArr[$date][$nm]['hour'])) {
                            $hrspent = array_sum($reportArr[$date][$nm]['hour']);
                        } else {
                            $hrspent = 0;
                        }
                    } else {
                        $hrspent = 0;
                    }
                    $hourspent[$date][$nm] = (float) $hrspent;
                }
            }

            if (!empty($dt_arr)) {
                $startDate = $dt_arr['0'];
                $endDate = $dt_arr[$key];
            }
            $uname = '';
            foreach ($hourspent as $key => $value) {
                foreach ($value as $nm => $hr) {
                    $userArr[$nm][] = $hr;
                }
            }
            foreach ($userArr as $knm => $vhr) {
                $carr[] = array('name' => $knm, 'data' => $vhr, 'showInLegend' => false);
            }
            $this->set('carr', json_encode($carr));
            $this->set(compact('startDate'));
            $this->set(compact('endDate'));
            $this->set(compact('fstartDate'));
            $this->set(compact('fendDate'));
        } else {
            //print "<div class='fl'><font color='red' size='2px'>No data for this date range & project.</font></div>";exit;
            print '<input type="hidden" value="' . $fstartDate . '" id="foverStartDate" /><input type="hidden" value="' . $fendDate . '" id="foverEndDate" /><input type="hidden" value="' . $startDate . '" id="overStartDate" /><input type="hidden" value="' . $endDate . '" id="overEndDate" /><img src="' . HTTP_ROOT . 'img/sample/analytics/hours_spent_by_all_line.jpg" style="width:98%;">';
            exit;
        }
    }

    /* end of new dashboard modules */

    public function quickTask($tskDetArr = null)
    {
        $this->layout = 'ajax';
        $arr = null;
        $this->loadModel("TypeCompany");
        $view = new View($this);
        $tz = $view->loadHelper('Tmzone');
        
        if (!$this->Format->isAllowed('Create Task')) {
            $arr['error'] = 1;
            $arr['msg'] = __('Sorry! You do not have permission to access this page.', true);
            echo json_encode($arr);
            exit;
        }
        if (!empty($tskDetArr)) {
            $prj = $this->Project->findByUniqId($tskDetArr['project_id']);
            $defaultAssignto = 0;
            if ($prj) {
                $defaultAssignto = $prj['Project']['default_assign'];
            } else {
                $arr['error'] = 1;
                $arr['msg'] = __('Invalid input. Please try again.', true);
                echo json_encode($arr);
                exit;
            }
            $new_task = null;
            $new_task['CS_project_id'] = $tskDetArr['project_id'];
            $new_task['CS_istype'] = 1;
            $new_task['CS_title'] = trim($tskDetArr['title']);
            $new_task['CS_type_id'] = (isset($GLOBALS['TYPE'][0]['Type']['id']) && $GLOBALS['TYPE'][0]['Type']['id']) ? $GLOBALS['TYPE'][0]['Type']['id'] : 8; //update
            $new_task['CS_priority'] = 2;
            $new_task['CS_message'] = '';
            $new_task['CS_assign_to'] = $defaultAssignto;
            $new_task['CS_user_id'] = SES_ID;
            $new_task['CS_due_date'] = 'No Due Date';
            $new_task['CS_id'] = 0;
            $new_task['datatype'] = 0;
            $new_task['CS_legend'] = 1;
            $new_task['prelegend'] = '';
            $new_task['hours'] = 0;
            $new_task['estimated_hours'] = 0;
            $new_task['completed'] = 0;
            $new_task['taskid'] = 0;
            $new_task['task_uid'] = 0;
            $new_task['editRemovedFile'] = '';
            $new_task['is_client'] = 0;
            $value = $this->Postcase->casePosting($new_task);
            $value = json_decode($value, true);
            $arr['success'] = 1;
            $arr['msg'] = __('Task Group successfully converted to task.', true);
            $arr['curCaseId'] = $value['curCaseId'];
            $arr['iotoserver'] = $value['iotoserver'];
            $arr['isAssignedUserFree'] = 1;//$value['isAssignedUserFree'];
            return $arr;
        } elseif (!empty($this->data)) {
            $est_hr = empty($this->data['estimated']) ? 0 : $this->data['estimated'];
            $task_type = 8;
            $story_point = empty($this->data['story_point']) ? 0 : $this->data['story_point'];
            $defaultAssignto = 0;
            if (isset($this->data['view_type']) && strtolower(trim($this->data['view_type'])) == 'list') {
                $task_type = $this->data['task_type'];
                $story_point = $this->data['story_point'];
                $est_hr = (empty(trim($this->data['estimated'])))?0:$this->data['estimated'];
                if (trim($this->data['assign_to']) == 'me') {
                    $defaultAssignto = SES_ID;
                } else {
                    if (trim($this->data['assign_to']) == 0) {
                        $defaultAssignto = 0;
                    } else {
                        $qt_user = $this->User->findById(trim($this->data['assign_to']));
                        if ($qt_user) {
                            $defaultAssignto = $qt_user['User']['id'];
                        } else {
                            $defaultAssignto = SES_ID;
                        }
                    }
                }
            } elseif (isset($this->data['view_type']) && (strtolower(trim($this->data['view_type'])) == 'weekly_time_sheet' || strtolower(trim($this->data['view_type'])) == 'daily_time_sheet')) {
                $defaultAssignto = $this->data['assign_to'];
            } else {
                $prj = $this->Project->findByUniqId($this->data['project_id']);
                $task_type = !empty($prj['Project']['task_type']) ? $prj['Project']['task_type'] : '';
                if (isset($this->data['task_type']) && !empty($this->data['task_type'])) {
                    $task_type = trim($this->data['task_type']);
                }
                if (empty($task_type)) {
                    $task_type = $this->TypeCompany->getSelType(SES_COMP);
                } else {
                    if (isset($this->data['task_type']) && !empty($this->data['task_type'])) {
                    } else {
                        $task_type = $this->TypeCompany->getCheckedTaskType($task_type, SES_COMP);
                    }
                }
                if ($prj) {
                    $defaultAssignto = $prj['Project']['default_assign'];
                }
            }
            /* saving in secs */
            $estHour = trim($est_hr) != '' ? trim($est_hr) : '0';
            /*if (strpos($estHour, ':') > -1) {
                $split_est = explode(':', $estHour);
                $est_sec = ((($split_est[0]) * 60) + intval($split_est[1])) * 60;
            } else {
                $est_sec = $estHour * 3600;
            }
            $estHour = $est_sec;*/
            if (isset($this->data['view_type']) && strtolower(trim($this->data['view_type'])) == 'list') {
                $due_date = (empty(trim($this->data['due_date'])))?'No Due Date':$this->data['due_date'];
            }
            if (isset($this->data['view_type']) && strtolower(trim($this->data['view_type'])) == '') {
                $due_date = (empty(trim($this->data['due_date'])))?'No Due Date':$this->data['due_date'];
            }
            if (empty($this->data['project_id'])) {
                $arr['error'] = 1;
                $arr['msg'] = __('Invalid input. Please try again.', true);
                echo json_encode($arr);
                exit;
            }
            $new_task = null;
            if (!empty($this->data['view_type']) && ($this->data['view_type'] == "weekly_time_sheet" || $this->data['view_type'] == "daily_time_sheet")) {
                $prjdt = $this->Project->findById($this->data['project_id'], array('Project.id','Project.uniq_id'));
                $new_task['CS_project_id'] = $prjdt['Project']['uniq_id'];
            } else {
                $new_task['CS_project_id'] = $this->data['project_id'];
            }
            $new_task['CS_istype'] = 1;
            $new_task['CS_title'] = trim($this->data['title']);
            $new_task['CS_type_id'] = (!empty($task_type)) ? $task_type : 8; //update
            $new_task['story_point'] = $story_point; //update
            $new_task['CS_priority'] = 2;
            $new_task['CS_message'] = '';
            $new_task['CS_assign_to'] = $defaultAssignto;
            $new_task['CS_user_id'] = SES_ID;
            $new_task['CS_due_date'] = $due_date;
            if ($due_date != 'No Due Date') {
                $new_task['gantt_start_date'] = $tz->GetDateTime(SES_TIMEZONE, TZ_GMT, TZ_DST, TZ_CODE, GMT_DATETIME, "date");
            }
            $new_task['CS_id'] = 0;
            $new_task['datatype'] = 0;
            $new_task['CS_legend'] = 1;
            $new_task['prelegend'] = '';
            $new_task['hours'] = 0;
            $new_task['estimated_hours'] = $estHour;
            $new_task['completed'] = 0;
            $new_task['taskid'] = 0;
            $new_task['task_uid'] = 0;
            $new_task['editRemovedFile'] = '';
            $new_task['is_client'] = 0;
            if (trim($this->data['mid']) != '') {
                $new_task['CS_milestone'] = trim($this->data['mid']);
            }
            $value = $this->Postcase->casePosting($new_task);
            $value = json_decode($value, true);
            if ($value['success'] =='success') {
                if (isset($this->data['view_type']) && strtolower(trim($this->data['view_type'])) == 'list') {
                    $arr['projId'] = $value['projId'];
                    $arr['emailTitle'] = $value['emailTitle'];
                    $arr['emailMsg'] = $value['emailMsg'];
                    $arr['casePriority'] = $value['casePriority'];
                    $arr['caseTypeId'] = $value['caseTypeId'];
                    $arr['csType'] = $value['csType'];
                    $arr['caUid'] = $value['caUid'];
                    $arr['caseUniqId'] = $value['caseUniqId'];
                    $arr['is_client'] = 0;
                    $arr['msg'] = $value['msg'];
                }
                if (isset($this->data['view_type']) && (strtolower(trim($this->data['view_type'])) == 'weekly_time_sheet' || strtolower(trim($this->data['view_type'])) == 'daily_time_sheet')) {
                    $arr['caseUniqId'] = $value['caseUniqId'];
                    $arr['case_title'] = $value['case_title'];
                }
            }
            $arr['success'] = 1;
            $arr['msg'] = __('Task successfully posted.', true);
            $arr['curCaseId'] = $value['curCaseId'];
            $arr['curCaseNo'] = $value['caseNo'];
            $arr['iotoserver'] = $value['iotoserver'];
            $arr['isAssignedUserFree'] = ($due_date != 'No Due Date')?$value['isAssignedUserFree']:1;
            $arr['estimated_hours'] = $value['estimated_hours'];
            $arr['gantt_start_date'] = $tz->GetDateTime(SES_TIMEZONE, TZ_GMT, TZ_DST, TZ_CODE, GMT_DATETIME, "date");
            $arr['due_date'] = $due_date;
            echo json_encode($arr);
            exit;
        } else {
            $arr['error'] = 1;
            $arr['msg'] = __('Sorry! invalid input. Please try again.', true);
            echo json_encode($arr);
            exit;
        }
    }

    /* Dashboard functions start here */

    public function admin_task_status()
    {
        $this->layout = 'ajax';
        $project_uid = (isset($this->params->data['projid']) && !empty($this->params->data['projid'])) ? $this->params->data['projid'] : 'all';
        $cond = '';
        $newArr = array();
        if ($project_uid != 'all') {
            $cond = "Project.uniq_id = '" . $project_uid . "' AND";
        } else {
            $activeprjs = $this->Project->find('all', array('conditions' => array('Project.company_id' => SES_COMP, 'Project.isactive' => 1), 'fields' => array('Project.id')));
            $projectIds = Hash::extract($activeprjs, '{n}.Project.id');
            if (empty($projectIds)) {
                echo "<img src='" . HTTP_ROOT . "img/sample/dashboard/admit_task_status.png' style='height:100%;width:100%'/>";
                exit;
            }
            if (count($projectIds) <= 5) {
                $top5projectIds = $projectIds;
            } else {
                //$projectIds = Hash::extract($activeprjs, '{n}.Project.id');
                /*$qry = "SELECT COUNT(Easycase.id) AS cnt, Easycase.project_id from easycases AS Easycase WHERE  Easycase.project_id IN (" . implode(",", $projectIds) . ") AND Easycase.istype=1 AND Easycase.isactive=1 GROUP BY Easycase.project_id ORDER BY cnt DESC LIMIT 5";
                $top5projects = $this->Easycase->query($qry);
                $top5projectIds = Hash::extract($top5projects, '{n}.Easycase.project_id');*/
                $top5projects = $this->ProjectUser->find('all', array('conditions' => array( 'ProjectUser.project_id' => $projectIds),'fields'=>array('DISTINCT ProjectUser.project_id'),'order'=>array('ProjectUser.dt_visited'=>'DESC'),'limit'=>5));
                $top5projectIds = Hash::extract($top5projects, '{n}.ProjectUser.project_id');
            }
            if (!empty($top5projectIds)) {
                $projQry = "Easycase.project_id IN (" . implode(",", $top5projectIds) . ")";
            } else {
                $projQry = "1";
            }
            $qry = "SELECT Project.id, Project.name, Project.uniq_id, DATE(Project.dt_created) AS created_date from projects as Project WHERE  Project.id IN (" . implode(",", $top5projectIds) . ") GROUP BY Project.id";
            $topprojects = $this->Easycase->query($qry);
            //$topprojects = Hash::combine($topprojects, '{n}.Easycase.project_id', '{n}.Project.name');
        }
        $stsMsg = '';
        $stsMsgTtl = '';
        $stsArr = array(1 => 'New', 2 => 'InProgress', 3 => 'Closed', 4 => 'InProgress', 5 => 'Resolved');
        $stsColorArr = array(__('New', true) => '#F19A91', __('In-Progress', true) => '#8DC2F8', __('Closed', true) => '#8AD6A3', __('Resolved', true) => '#F3C788');
        $clt_sql = " AND 1 AND ";
        if ($this->Auth->user('is_client') == 1) {
            $clt_sql = " AND ((Easycase.client_status = " . $this->Auth->user('is_client') . " AND Easycase.user_id = " . $this->Auth->user('id') . ") OR Easycase.client_status != " . $this->Auth->user('is_client') . ") AND ";
        }
        $query_All1 = $this->Easycase->query("SELECT Easycase.custom_status_id,Easycase.legend,COUNT(Easycase.id) as count, Easycase.project_id, Project.name,Project.description,Project.uniq_id,Project.priority,DATE(Project.dt_updated) AS updated_date FROM easycases as Easycase LEFT JOIN projects AS Project ON Easycase.project_id=Project.id LEFT JOIN users AS User ON Project.user_id=User.id WHERE Easycase.istype='1' AND Easycase.isactive='1' " . $clt_sql . "Easycase.type_id!='10' AND Easycase.project_id!=0 AND " . $projQry . " GROUP BY Easycase.project_id, Easycase.custom_status_id, Easycase.legend ORDER BY FIELD(legend,1,6,2,4,5,3)");
        if (empty($query_All1)) {
            echo "<img src='" . HTTP_ROOT . "img/sample/dashboard/admit_task_status.png' style='height:100%;width:100%'/>";
            exit;
        }
        $topprojects = Hash::combine($query_All1, '{n}.Project.uniq_id', '{n}.Project.name');
        $projectsDesc = Hash::combine($query_All1, '{n}.Project.uniq_id', '{n}.Project.description');
        $projectDates = Hash::combine($query_All1, '{n}.Project.uniq_id', '{n}.0.updated_date');
        $projectPrio = Hash::combine($query_All1, '{n}.Project.uniq_id', '{n}.Project.priority');
        $projects = array_merge_recursive($topprojects, $projectDates, $projectsDesc, $projectPrio);
        $stsCalc = array();
        $csts_arr = array();
        //custom status ref for other pages
        $sts_ids = array_filter(array_unique(Hash::extract($query_All1, '{n}.Easycase.custom_status_id')));
        if ($sts_ids) {
            $Csts = ClassRegistry::init('CustomStatus');
            $csts_arr = $Csts->find('all', array('conditions'=>array('CustomStatus.id'=>$sts_ids)));
            if ($csts_arr) {
                $csts_arr = Hash::combine($csts_arr, '{n}.CustomStatus.id', '{n}.CustomStatus');
            }
        }
        $dflt_colr = array(0=>'fff000',1=>'F08E83',2=>'6BA8DE',4=>'6BA8DE',5=>'FAB858',3=>'72CA8D');
        foreach ($query_All1 as $k => $v) {
            if ($v['Easycase']['custom_status_id']) {
                $stsCalc[$v['Project']['name']][$csts_arr[$v['Easycase']['custom_status_id']]['name']]['cnt'] += $v[0]['count'];
                $stsCalc[$v['Project']['name']][$csts_arr[$v['Easycase']['custom_status_id']]['name']]['color'] = $csts_arr[$v['Easycase']['custom_status_id']]['color'];
            } else {
                $stsCalc[$v['Project']['name']][$stsArr[$v['Easycase']['legend']]]['cnt'] += $v[0]['count'];
                $stsCalc[$v['Project']['name']][$stsArr[$v['Easycase']['legend']]]['color'] = $dflt_colr[$v['Easycase']['legend']];
            }
        }
        $prio = array(0=>__('High', true),1=>__('Medium', true),2=>__('Low', true));
        $prio_eng = array(0=>'High',1=>'Medium',2=>'Low');
        foreach ($projects as $k_p => $val_p) {
            $projects[$k_p][4] = strtolower($prio_eng[$projects[$k_p][3]]);
            $projects[$k_p][3] = $prio[$projects[$k_p][3]];
        }
        $newArr['name'] = __('New', true);
        $newArr['color'] = '#AE432E';
        $wipArr['name'] = __('In Progress', true);
        $wipArr['color'] = '#244F7A';
        $resolvedArr['name'] = __('Resolved', true);
        $resolvedArr['color'] = '#EF6807';
        $closedArr['name'] = __('Closed', true);
        $closedArr['color'] = '#77AB13';
        foreach ($stsCalc as $k => $val) {
            #pr($val['New']);
            $newArr['data'][] = $val[__('New', true)];
            $wipArr['data'][] = $val[__('In Progress', true)];
            $resolvedArr['data'][] = $val[__('Resolved', true)];
            $closedArr['data'][] = $val[__('Closed', true)];
        }
        $series = array(0 => $newArr, 1 => $wipArr, 2 => $resolvedArr, 3 => $closedArr);
        if (isset($this->params->data['angular']) && !empty($this->params->data['angular'])) {
            $arr['series'] = $stsCalc;
            $arr['projects'] = $projects;
            print json_encode($arr);
            exit;
        }
        $this->set('series', json_encode($stsCalc));
        $this->set('projects', $projects);
    }

    public function all_projects()
    {
        $this->layout = 'ajax';
        $this->Project->recursive = -1;
        /*  Code Commented by Tapan Sir 24.12.2020
               $count_sql = 'SELECT count(id) as total,isactive '
                       . 'FROM projects AS `Project` '
                       . 'WHERE Project.isactive = 1 AND  Project.company_id=' . SES_COMP . ' ' . $projQry . ' ' . $clt_sql . '  '
                       . 'UNION '
                       . 'SELECT count(id) as total,isactive '
                       . 'FROM projects AS `Project` '
                       . 'WHERE Project.isactive = 2 AND  Project.company_id=' . SES_COMP . ' ' . $projQry . ' ' . $clt_sql . '  ';
               */

        $count_sql = 'SELECT count(id) as total,isactive '
                . 'FROM projects AS `Project` '
                . 'WHERE Project.isactive in(1,2) AND  Project.company_id=' . SES_COMP . ' ' . $projQry . ' ' . $clt_sql . ' GROUP By isactive';
        $cntprj = $this->Project->query($count_sql);

        if (is_array($cntprj) && count($cntprj) > 0) {
            /*  Code Commented by Tapan Sir 24.12.2020
            $activePrj = $cntprj[0][0]['isactive'] == 1 ? $cntprj[0][0]['total'] : 0;
            $completedPrj = $cntprj[0][0]['isactive'] == 2 ? $cntprj[0][0]['total'] : $cntprj[1][0]['total'];

            */
            $activePrj = $cntprj[0]['Project']['isactive'] == 1 ? $cntprj[0][0]['total'] : 0;
            $completedPrj = $cntprj[0]['Project']['isactive'] == 2 ? $cntprj[0][0]['total'] : $cntprj[1][0]['total'];
            $totalprj = ($cntprj[0][0]['total'] + $cntprj[1][0]['total']);
            $data = array(
                array('type' => 'active', 'count' => $activePrj > 0 ? $activePrj : 0, 'display' => $activePrj),
                array('type' => 'completed', 'count' => $completedPrj > 0 ? $completedPrj : 0, 'display' => $completedPrj),
                array('type' => 'total_prj', 'count' => $totalprj > 0 ? $totalprj : 0, 'display' => $totalprj),
            );
            #pr($data);exit;
            $this->set('data', $data);
        } else {
            echo "<img src='".HTTP_ROOT."img/sample/dashboard/hour.png' alt='' style='margin-top:50px'/>";
            exit;
        }
    }

    public function all_clients()
    {
        $this->layout = 'ajax';
        $retArr = null;
        $dates = $this->Format->date_filter('last30days', $curDateTime);
        $clients = $this->CompanyUser->find('all', array('conditions' => array('CompanyUser.company_id' => SES_COMP, 'CompanyUser.is_client' => 1), 'fields' => array('count(CompanyUser.id) AS tot_clients')));
        $last30daysclients = $this->CompanyUser->find('all', array('conditions' => array('CompanyUser.company_id' => SES_COMP, 'CompanyUser.is_client' => 1, "CompanyUser.created BETWEEN '" . $dates['strddt'] . "' AND '" . $dates['enddt'] . "'"), 'fields' => array('count(CompanyUser.id) AS tot_30days_clients')));
        #pr($clients);
        #pr($last30daysclients);exit;
        $tot = $clients[0][0]['tot_clients'] + $last30daysclients[0][0]['tot_30days_clients'];
        if ($tot > 0) {
            $piearr = array(
                array('name' => __('Total Clients', true), 'count' => $clients[0][0]['tot_clients'], 'y' => (floatval($clients[0][0]['tot_clients']) / $tot) * 100),
                array('name' => __('Clients in Last 30days', true), 'count' => $last30daysclients[0][0]['tot_30days_clients'], 'y' => (floatval($last30daysclients[0][0]['tot_30days_clients']) / $tot) * 100)
            );
            #pr($piearr);exit;
            $retArr['piearr'] = $piearr;
            $retArr['status'] = 'ok';
        //$this->set('piearr', json_encode($piearr));
        } else {
            $retArr['status'] = '';
            //print '<img src="' . HTTP_ROOT . '/img/sample/dashboard/clients.jpg">';exit;
        }
        echo json_encode($retArr);
        exit;
    }

    public function dashboard_timelog()
    {
        $this->layout = 'ajax';
        $this->Project->recursive = -1;
        if (SES_TYPE < 3) {
            $user_id = 'ProjectUser.user_id > 0';
        } else {
            $user_id = 'ProjectUser.user_id=' . SES_ID;
        }
        $clt_sql = "";
        if ($this->Auth->user('is_client') == 1) {
            $clt_sql = " AND ((Easycase.client_status = " . $this->Auth->user('is_client') . " AND Easycase.user_id = " . $this->Auth->user('id') . ") OR Easycase.client_status != " . $this->Auth->user('is_client') . ") ";
        }
        $dates = $this->Format->date_filter('last30days', $curDateTz);
        $days = (strtotime($dates['enddt']) - strtotime($dates['strddt'])) / (60 * 60 * 24);
        $x = floor($days);
        if ($x < 7) {
            $interval = 1;
        } elseif ($x > 80) {
            $interval = ceil($x / 10);
        } else {
            $interval = 7;
        }
        $this->set('tinterval', $interval);
        $dt_arr = array();
        $dts_arr = array();
        for ($i = 0; $i <= $x; $i++) {
            $m = " +" . $i . "day";
            $dt = date('Y-m-d', strtotime(date("Y-m-d", strtotime($dates['strddt'])) . $m));
            $dts = date('M d, Y', strtotime(date("Y-m-d H:i:s", strtotime($dates['strddt'])) . $m));
            $times = explode(" ", GMT_DATETIME);
            array_push($dt_arr, $dt);
            array_push($dts_arr, $dts);
        }
        $frmTz = '+00:00';
        $toTz = $this->Tmzone->getGmtTz(TZ_GMT, TZ_DST);
        $dateCond = " AND DATE(CONVERT_TZ(LogTime.start_datetime,'".$frmTz."','".$toTz."')) BETWEEN '" . date('Y-m-d', strtotime($dates['strddt'])) . "' AND '" . date('Y-m-d', strtotime($dates['enddt'])) . "'";
        $projQry = " AND LogTime.project_id IN (SELECT ProjectUser.project_id FROM project_users AS ProjectUser,projects as Project WHERE " . $user_id . " AND ProjectUser.company_id=" . SES_COMP . " AND ProjectUser.project_id=Project.id AND Project.isactive='1') ";

        /* find total billable and non-billable time */
        /*
          Existing query
         $count_sql = 'SELECT sum(total_hours) as secds,is_billable,DATE(CONVERT_TZ(LogTime.start_datetime,"'.$frmTz.'","'.$toTz.'")) AS date '
                 . 'FROM log_times AS `LogTime` '
                 . "LEFT JOIN easycases AS Easycase ON Easycase.id=LogTime.task_id AND LogTime.project_id=Easycase.project_id "
                 . 'WHERE is_billable = 1 AND Easycase.isactive =1 ' . $projQry . ' ' . $clt_sql . $dateCond . '  '
                 . 'GROUP BY DATE(CONVERT_TZ(LogTime.start_datetime,"'.$frmTz.'","'.$toTz.'"))  '
                 . 'UNION '
                 . 'SELECT sum(total_hours) as secds, is_billable,DATE(CONVERT_TZ(LogTime.start_datetime,"'.$frmTz.'","'.$toTz.'")) AS date '
                 . 'FROM log_times AS LogTime '
                 . "LEFT JOIN easycases AS Easycase ON Easycase.id=LogTime.task_id AND LogTime.project_id=Easycase.project_id "
                 . 'WHERE is_billable = 0 AND Easycase.isactive =1 ' . $projQry . ' ' . $clt_sql . $dateCond . '  '
                 . 'GROUP BY DATE(CONVERT_TZ(LogTime.start_datetime,"'.$frmTz.'","'.$toTz.'")) ';
         #echo $count_sql;exit;
         */
        
        
        
        
        $count_sql = 'SELECT sum(total_hours) as secds,is_billable,DATE(CONVERT_TZ(LogTime.start_datetime,"'.$frmTz.'","'.$toTz.'")) AS date '
                . 'FROM log_times AS `LogTime` '
                . "INNER JOIN easycases AS Easycase ON Easycase.id=LogTime.task_id AND LogTime.project_id=Easycase.project_id "
                . 'INNER JOIN projects AS Project ON Easycase.project_id=Project.id WHERE is_billable IN(0, 1) AND Easycase.isactive =1 AND Project.isactive=1 AND Project.company_id=' . SES_COMP . $clt_sql . $dateCond . '  '
                . 'GROUP BY DATE(CONVERT_TZ(LogTime.start_datetime,"'.$frmTz.'","'.$toTz.'"))  '
                ;
        $cntlog = $this->LogTime->query($count_sql);

        if (is_array($cntlog) && count($cntlog) > 0) {
            $billablearr = array();
            $nonbillablearr = array();
            foreach ($cntlog as $k => $val) {
                if ($val[0]['is_billable'] == 1) {
                    $billablearr[$val[0]['date']] = $val[0];
                } else {
                    $nonbillablearr[$val[0]['date']] = $val[0];
                }
            }
            foreach ($dt_arr as $key => $dt) {
                $nonbillable_series['name'] = __('Non-billable', true);
                $nonbillable_series['color'] = '#C5C5C5';
                if (array_key_exists($dt, $nonbillablearr)) {
                    $nonbillable_series['data'][] = round(($nonbillablearr[$dt]['secds'] / 3600), 1);
                } else {
                    $nonbillable_series['data'][] = 0;
                }
                $billable_series['name'] = __('Billable', true);
                $billable_series['color'] = '#00A2FF';
                if (array_key_exists($dt, $billablearr)) {
                    $billable_series['data'][] = round(($billablearr[$dt]['secds'] / 3600), 1);
                } else {
                    $billable_series['data'][] = 0;
                }
            }
            $series[0] = $nonbillable_series;
            $series[1] = $billable_series;
            $mainArr = null;
            $mainArr['dates'] = $dts_arr;
            $mainArr['series'] = $series;
            $mainArr['tinterval'] = $interval;
            $mainArr['imag'] = '';
            echo json_encode($mainArr);
            exit;
            $this->set('dt_arr', json_encode($dts_arr));
            $this->set('series', json_encode($series));
        } else {
            $mainArr = null;
            $mainArr['imag'] = "<img src='" . HTTP_ROOT . "img/sample/dashboard/dbord_timelog.jpg' >";
            echo json_encode($mainArr);
            exit;
            echo "<img src='" . HTTP_ROOT . "img/sample/dashboard/dbord_timelog.jpg' />";
            exit;
        }
    }

    public function project_resource_utilization()
    {
        $this->layout = 'ajax';
        $project_uid = (isset($this->params->data['projid']) && !empty($this->params->data['projid'])) ? $this->params->data['projid'] : 'all';
        $cond = '';
        if ($project_uid != 'all') {
            $cond = "Project.uniq_id = '" . $project_uid . "' AND";
        } else {
            $activeprjs = $this->Project->find('all', array('conditions' => array('Project.company_id' => SES_COMP, 'Project.isactive' => 1), 'fields' => array('Project.id')));
            $projectIds = Hash::extract($activeprjs, '{n}.Project.id');
            if (empty($projectIds)) {
                echo "<img src='" . HTTP_ROOT . "img/sample/dashboard/projectwise_resource_utilization.png' style='height:100%;width:100%'/>";
                exit;
            } else {
                if (count($projectIds) <= 5) {
                    $top5projectIds = $projectIds;
                } else {
                    $qry = "SELECT COUNT(Easycase.id) AS cnt, Easycase.project_id from easycases AS Easycase WHERE  Easycase.project_id IN (" . implode(",", $projectIds) . ") AND Easycase.istype=1 AND Easycase.isactive=1 GROUP BY Easycase.project_id ORDER BY cnt DESC LIMIT 5";
                    $top5projects = $this->Easycase->query($qry);
                    $top5projectIds = Hash::extract($top5projects, '{n}.Easycase.project_id');
                }
                $projQry = "Easycase.project_id IN (" . implode(",", $top5projectIds) . ")";
                $qry = "SELECT Project.id, Project.name, Project.uniq_id, DATE(Project.dt_created) AS created_date from projects as Project WHERE  Project.id IN (" . implode(",", $top5projectIds) . ") GROUP BY Project.id";
                $topprojects = $this->Project->query($qry);
                $topprojects = Hash::combine($topprojects, '{n}.Project.id', '{n}.Project.name');
            }
        }
        $thismonth = $this->Format->date_filter('thismonth', $curdate);
        $lastmonth = $this->Format->date_filter('lastmonth', $curdate);
        $thismonthqry = "SELECT sum(total_hours) as thismonth_hours, LogTime.project_id, Project.name from log_times as LogTime "
                . "Left join easycases as Easycase on LogTime.project_id=Easycase.project_id AND LogTime.task_id=Easycase.id "
                . "LEft join projects as Project on LogTime.project_id=Project.id Where Easycase.isactive=1 AND "
                . $projQry . " AND "
                . "DATE(LogTime.start_datetime) BETWEEN '" . date('Y-m-d', strtotime($thismonth['strddt'])) . "' AND '" . date('Y-m-d', strtotime($thismonth['enddt'])) . "' "
                . " group by LogTime.project_id";
        $thismonthdata = $this->LogTime->query($thismonthqry);
        $thismonthdata = Hash::combine($thismonthdata, '{n}.Project.name', '{n}.0.thismonth_hours', '{n}.LogTime.project_id');
        $prevmonthqry = "SELECT sum(total_hours) as prevmonth_hours, LogTime.project_id, Project.name from log_times as LogTime "
                . "Left join easycases as Easycase on LogTime.project_id=Easycase.project_id AND LogTime.task_id=Easycase.id "
                . "LEft join projects as Project on LogTime.project_id=Project.id Where Easycase.isactive=1 AND "
                . $projQry . " AND "
                . "DATE(LogTime.start_datetime) BETWEEN '" . date('Y-m-d', strtotime($lastmonth['strddt'])) . "' AND '" . date('Y-m-d', strtotime($lastmonth['enddt'])) . "' "
                . " group by LogTime.project_id";
        $prevmonthdata = $this->LogTime->query($prevmonthqry);
        $prevmonthdata = Hash::combine($prevmonthdata, '{n}.Project.name', '{n}.0.prevmonth_hours', '{n}.LogTime.project_id');
        $futureWorkqry = "SELECT sum(Easycase.estimated_hours) as future_hours, Easycase.project_id, Project.name from easycases as Easycase "
                . "Left join projects as Project on Easycase.project_id=Project.id WHERE Easycase.isactive=1 AND "
                . $projQry . " AND "
                . "Date(Easycase.actual_dt_created) <='" . date('Y-m-d', strtotime($thismonth['enddt'])) . "'"
                . " Group by Easycase.project_id";
        $futureWorkdata = $this->Easycase->query($futureWorkqry);
        $futureWorkdata = Hash::combine($futureWorkdata, '{n}.project.name', '{n}.0.future_hours', '{n}.Easycase.project_id');
        foreach ($top5projectIds as $pid) {
            if (!array_key_exists($pid, $thismonthdata)) {
                $thismonthdata[$pid] = array($topprojects[$pid] => 0);
            }
            if (!array_key_exists($pid, $prevmonthdata)) {
                $prevmonthdata[$pid] = array($topprojects[$pid] => 0);
            }
            if (!array_key_exists($pid, $futureWorkdata)) {
                $futureWorkdata[$pid] = array($topprojects[$pid] => 0);
            }
        }
        ksort($thismonthdata);
        ksort($prevmonthdata);
        ksort($futureWorkdata);
        ksort($topprojects);
        if (isset($this->params->data['angular']) && !empty($this->params->data['angular'])) {
            $arr['thismonthdata'] = $thismonthdata;
            $arr['prevmonthdata'] = $prevmonthdata;
            $arr['futureWorkdata'] = $futureWorkdata;
            $arr['topprojects'] = $topprojects;
            print json_encode($arr);
            exit;
        }
        $this->set('thismonthdata', $thismonthdata);
        $this->set('prevmonthdata', $prevmonthdata);
        $this->set('futureWorkdata', $futureWorkdata);
        $this->set('topprojects', $topprojects);
    }

    public function dashboard_status()
    {
        $this->layout = 'ajax';
        $projid = $this->data['projid'];
        $this->Project->recursive = -1;

        if (isset($this->params['pass'][0]) && trim($this->params['pass'][0]) == 'user_detail') {
            $user_id = $this->params['pass'][1];
            $fragment = trim($this->params['pass'][2]);
            $projid = 'all';
        } else {
            $user_id = SES_ID;
            $fragment = '';
        }
        if ($projid != 'all') {
            $proj = $this->Project->find('first', array('conditions' => array('Project.uniq_id' => $projid), 'fields' => array('Project.id', 'Project.name')));
            $project_id = $proj['Project']['id'];
        }
        $clt_sql = 1;
        if ($this->Auth->user('is_client') == 1) {
            $clt_sql = "((Easycase.client_status = " . $this->Auth->user('is_client') . " AND Easycase.user_id = " . $this->Auth->user('id') . ") OR Easycase.client_status != " . $this->Auth->user('is_client') . ")";
        }
        if ($projid == 'all') {
            $projQry = "AND Easycase.project_id IN (SELECT ProjectUser.project_id FROM project_users AS ProjectUser,projects as Project WHERE ProjectUser.user_id=" . $user_id . " AND ProjectUser.company_id=" . SES_COMP . " AND ProjectUser.project_id=Project.id AND Project.isactive='1')";
        } else {
            $projQry = "AND Easycase.project_id='" . $project_id . "'";
        }
        if ($fragment != '') {
            $view = new View($this);
            $tz = $view->loadHelper('Tmzone');
            $curDateTz = $tz->GetDateTime(SES_TIMEZONE, TZ_GMT, TZ_DST, TZ_CODE, GMT_DATETIME, "datetime");
            if ($fragment == 'lastmon') {
                $dates = $this->Format->date_filter('lastmonth', $curDateTz);
                $projQry .= "";
            } else {
                $dates = $this->Format->date_filter('thismonth', $curDateTz);
                $projQry .= "";
            }
        }

        $sql = "SELECT COUNT(Easycase.id) AS tot_count,if(Easycase.type_id=10,10,Easycase.legend) AS legend "
                . "FROM easycases as Easycase "
                . "WHERE Easycase.istype='1' AND " . $clt_sql . " AND  Easycase.isactive='1' AND Easycase.legend != 0 "
                . "AND Easycase.project_id!=0 " . $projQry . " "
                . "GROUP BY if(Easycase.type_id=10,10,Easycase.legend)";
        $common_qry = $this->Easycase->query($sql);
        #echo '<pre>';print_r($common_qry);exit;
        $status = Hash::combine($common_qry, '{n}.0.legend', '{n}.0.tot_count');
        $json_status = array();
        $json_status['name'] = 'status';
        $json_status['marker'] = array('symbol' => 'square');
        $json_status['data'] = array();
        array_push($json_status['data'], array('y' => $status['1'] == '' ? 0 : $status['1'], 'name' => 'New', 'marker' => array('symbol' => 'url(img/new-chart.png)')));
        array_push($json_status['data'], array('y' => $status['2'] == '' ? 0 : $status['2'], 'name' => 'In Progress', 'marker' => array('symbol' => 'url(img/inprogress-chart.png)')));
        array_push($json_status['data'], array('y' => $status['3'] == '' ? 0 : $status['3'], 'name' => 'Closed', 'marker' => array('symbol' => 'url(img/closed-chart.png)')));
        array_push($json_status['data'], array('y' => $status['5'] == '' ? 0 : $status['5'], 'name' => 'Resolved', 'marker' => array('symbol' => 'url(img/resolved-chart.png)')));
        $total = array_sum($status);
        $this->set('data', json_encode($json_status['data'], JSON_NUMERIC_CHECK));
        $this->set(compact('status', 'total', 'fragment'));
    }

    public function switchmyproj()
    {
        $this->layout = 'ajax';
        $pid = $this->Easycase->query('SELECT project_id FROM easycases where uniq_id = "' . $this->request->data['easycase_uid'] . '"');
        if ($pid) {
            $this->ProjectUser->query("UPDATE project_users SET dt_visited = '" . GMT_DATETIME . "' WHERE project_id=" . $pid[0]['easycases']['project_id'] . " AND user_id=" . SES_ID . " AND company_id=" . SES_COMP);
            $punq = $this->Project->query('SELECT uniq_id FROM projects where id = "' . $pid[0]['easycases']['project_id'] . '"');
        }
        echo $punq[0]['projects']['uniq_id'];
        exit;
    }

    public function testEmailSend()
    {
        $from = 'acharya.satyajet@gmail.com';
        $to = 'sutu.satyajeet@gmail.com';
        $subject = 'Testing';
        $message = 'This is a test only';
        $fromname = 'Satyajeet';
        print_r($this->Sendgrid->sendGridEmail($from, $to, $subject, $message, '', $fromname));
        exit;
    }

    /*
     * Function to Export Task list page data
     * Author Satyajeet
     */

    public function export_csv_tasklist_back()
    {
        set_time_limit(0);
        ini_set('max_execution_time', 0);
        ini_set('memory_limit', '256M');
        $this->_datestime();
        $page_limit = CASE_PAGE_LIMIT;
        $projUniq = $this->params->query['projFil']; // Project Uniq ID
        $projIsChange = $this->params->query['projIsChange']; // Project Uniq ID
        $caseStatus = $this->params->query['caseStatus']; // Filter by Status(legend)
        $caseCustomStatus = $this->params->query['caseCustomStatus']; // Filter by Custom Status
        $priorityFil = $this->params->query['priFil']; // Filter by Priority
        $caseTypes = $this->params->query['caseTypes']; // Filter by case Types
        $caseLabel = $this->params->query['caseLabel']; // Filter by case Types
        $caseUserId = $this->params->query['caseMember']; // Filter by Member
        $caseComment = $this->params->query['caseComment']; // Filter by Member
        $caseAssignTo = $this->params->query['caseAssignTo']; // Filter by AssignTo
        $caseDate = $this->params->query['caseDate']; // Sort by Date
        $caseDueDate = $this->params->query['caseDueDate']; // Sort by Due Date
        @$case_duedate = $this->params->query['case_due_date'];
        @$case_date = urldecode($this->params->query['case_date']);
        $caseSrch = $this->params->query['caseSearch']; // Search by keyword
        $casePage = $this->params->query['casePage']; // Pagination
        $caseUniqId = $this->params->query['caseId']; // Case Uniq ID to close a case
        $caseTitle = $this->params->query['caseTitle']; // Case Uniq ID to close a case
        $caseNum = $this->params->query['caseNum']; // Sort by Due Date
        $caseLegendsort = $this->params->query['caseLegendsort']; // Sort by Case Status
        $caseAtsort = $this->params->query['caseAtsort']; // Sort by Case Status
        $startCaseId = $this->params->query['startCaseId']; // Start Case
        $caseResolve = $this->params->query['caseResolve']; // Resolve Case
        $caseNew = $this->params->query['caseNew']; // New Case
        $caseMenuFilters = $this->params->query['caseMenuFilters']; // Resolve Case
        $milestoneIds = $this->params->query['milestoneIds']; // Resolve Case
        $caseCreateDate = $this->params->query['caseCreateDate']; // Sort by Created Date
        @$case_srch = $this->params->query['case_srch'];
        @$milestone_type = $this->params->query['mstype'];
        $changecasetype = $this->params->query['caseChangeType'];
        $caseChangeDuedate = $this->params->query['caseChangeDuedate'];
        $caseChangePriority = $this->params->query['caseChangePriority'];
        $caseChangeAssignto = $this->params->query['caseChangeAssignto'];
        $customfilterid = $this->params->query['customfilter'];
        $detailscount = $this->params->query['detailscount']; // Count number to open casedetails
        $caseUrl = $this->params->query['caseUrl'];
        $checkedFields = explode(',', $this->params->query['checkedFields']);
        #pr($checkedFields);exit;
        $filterenabled = 0;
        $clt_sql = 1;
        if ($this->Auth->user('is_client') == 1) {
            $clt_sql = "((Easycase.client_status = " . $this->Auth->user('is_client') . " AND Easycase.user_id = " . $this->Auth->user('id') . ") OR Easycase.client_status != " . $this->Auth->user('is_client') . ")";
        }
        ######## get project ID from project uniq-id ################
        $curProjId = null;
        $curProjShortName = null;
        if ($projUniq != 'all') {
            //$this->ProjectUser->bindModel(array('belongsTo' => array('Project')));
            $this->ProjectUser->bindModel(array('belongsTo' => array('Project')));
            $projArr = $this->ProjectUser->find('first', array('conditions' => array('Project.uniq_id' => $projUniq, 'ProjectUser.user_id' => SES_ID, 'Project.isactive' => 1, 'ProjectUser.company_id' => SES_COMP), 'fields' => array('Project.id', 'Project.short_name', 'ProjectUser.id')));
            if (count($projArr)) {
                $curProjId = $projArr['Project']['id'];
                $curProjShortName = $projArr['Project']['short_name'];

                //Updating ProjectUser table to current date-time
                if ($projIsChange != $projUniq) {
                    $ProjectUser['id'] = $projArr['ProjectUser']['id'];
                    $ProjectUser['dt_visited'] = GMT_DATETIME;
                    $this->ProjectUser->save($ProjectUser);
                }
            }
        }
        $istype = " Easycase.istype='1' ";
        if (in_array('comment', $checkedFields)) {
            $istype = " Easycase.istype IN(1,2) ";
        }
        ######### Filter by CaseUniqId ##########
        $qry = "";
        if (trim($caseUrl)) {
            $filterenabled = 1;
            $qry.= " AND Easycase.uniq_id='" . $caseUrl . "'";
        }
        $is_def_status_enbled = 0;
        ######### Filter by Custom Status ##########
        if (trim($caseCustomStatus) && $caseCustomStatus != "all") {
            $is_def_status_enbled = 1;
            $filterenabled = 1;
            $qry.= " AND (";
            $qry.= $this->Format->customStatusFilter($caseCustomStatus, $projUniq, $caseStatus, 1);
            $stsLegArr = $caseCustomStatus . "-" . "";
            $expStsLeg = explode("-", $stsLegArr);
        }
        ######### Filter by Status ##########
        if (trim($caseStatus) && $caseStatus != "all") {
            $filterenabled = 1;
            if (!$is_def_status_enbled) {
                $qry.= " AND (";
            } else {
                $qry.= " OR ";
            }
            $qry.= $this->Format->statusFilter($caseStatus, '', 1);
            $qry .= ")";
            $stsLegArr = $caseStatus . "-" . "";
            $expStsLeg = explode("-", $stsLegArr);
            if (!in_array("upd", $expStsLeg)) {
                $qry.= " AND Easycase.type_id !=10";
            }
        } else {
            if (trim($caseCustomStatus) && $caseCustomStatus != "all") {
                $qry .= ")";
            }
        }
        /*######### Filter by Status ##########
        if (trim($caseStatus) && $caseStatus != "all") {
            $filterenabled = 1;
            $qry.= $this->Format->statusFilter($caseStatus);
            $stsLegArr = $caseStatus . "-" . "";
            $expStsLeg = explode("-", $stsLegArr);
            if (!in_array("upd", $expStsLeg)) {
                $qry.= " AND Easycase.type_id !=10";
            }
        }
        ######### Filter by Custom Status ##########
        if (trim($caseCustomStatus) && $caseCustomStatus != "all") {
            $filterenabled = 1;
            $qry.= $this->Format->customStatusFilter($caseCustomStatus, $projUniq,$caseStatus);
            $stsLegArr = $caseCustomStatus . "-" . "";
            $expStsLeg = explode("-", $stsLegArr);
                }*/
        ######### Filter by Case Types ##########
        if (trim($caseTypes) && $caseTypes != "all") {
            $qry.= $this->Format->typeFilter($caseTypes);
            $filterenabled = 1;
        }
        ######### Filter by Case Label ##########
        if (trim($caseLabel) && $caseLabel != "all") {
            $qry.= $this->Format->labelFilter($caseLabel, $curProjId, SES_COMP, SES_TYPE, SES_ID);
        }
        ######### Filter by Priority ##########
        if (trim($priorityFil) && $priorityFil != "all") {
            $qry.= $this->Format->priorityFilter($priorityFil, $caseTypes);
            $filterenabled = 1;
        }
        ######### Filter by Member ##########
        if (trim($caseUserId) && $caseUserId != "all") {
            $qry.= $this->Format->memberFilter($caseUserId);
            $filterenabled = 1;
        }
        ######### Filter by Member ##########
        if (trim($caseComment) && $caseComment != "all") {
            $qry.= $this->Format->commentFilter($caseComment, $curProjId, $case_date);
            $filterenabled = 1;
        }
        ######### Filter by AssignTo ##########
        if (trim($caseAssignTo) && $caseAssignTo != "all" && $caseAssignTo != "unassigned") {
            $qry.= $this->Format->assigntoFilter($caseAssignTo);
            $filterenabled = 1;
        } elseif (trim($caseAssignTo) == "unassigned") {
            $qry.= " AND Easycase.assign_to='0'";
            $filterenabled = 1;
        }
        // Order by
        $sortby = '';
        $caseStatusby = '';
        $caseUpdatedby = '';
        $casePriority = '';
        if (isset($_COOKIE['TASKSORTBY'])) {
            $sortby = $_COOKIE['TASKSORTBY'];
            $sortorder = $_COOKIE['TASKSORTORDER'];
        } else {
            $sortorder = 'DESC';
        }

        $orderby = "Easycase.case_no ASC";
        if ($sortby == 'title') {
            $orderby .= " ,LTRIM(Easycase.title) " . $sortorder;
            $caseTitle = strtolower($sortorder);
        } elseif ($sortby == 'duedate') {
            $caseDueDate = strtolower($sortorder);
            $orderby .= " ,Easycase.due_date " . $sortorder;
        } elseif ($sortby == 'estimatedhours') {
            $caseEstHours = strtolower($sortorder);
            $orderby = "Easycase.estimated_hours " . $sortorder;
        } elseif ($sortby == 'caseno') {
            $caseNum = strtolower($sortorder);
            $orderby .= " ,Easycase.case_no " . $sortorder;
        } elseif ($sortby == 'caseAt') {
            $caseAtsort = strtolower($sortorder);
            $orderby .= " ,Assigned " . $sortorder;
        } elseif ($sortby == 'priority') {
            $casePriority = strtolower($sortorder);
            $orderby .= " ,Easycase.priority " . $sortorder;
        } elseif ($sortby == 'status') {
            $caseStatusby = strtolower($sortorder);
            $orderby .= " ,Easycase.legend " . $sortorder;
        } else {
            $caseUpdatedby = strtolower($sortorder);
//            $orderby = "Easycase.dt_created " . $sortorder;
            $orderby .= " ,Easycase.dt_created " . $sortorder;
        }
        $groupby = '';
        $gby = '';
        $mileSton_orderby = '';
        $case_join = 'LEFT';
        $milstone_filter_condition = '';
        if ($_COOKIE['TASKGROUPBY'] != 'date') {
            $orderby = "Easycase.case_no ASC";
            $groupby = $_COOKIE['TASKGROUPBY'];
            if ($groupby != 'milestone') {
                setcookie('TASKSORTBY', '', time() - 3600, '/', DOMAIN_COOKIE, false, false);
                setcookie('TASKSORTORDER', '', time() - 3600, '/', DOMAIN_COOKIE, false, false);
            }
            if ($groupby == 'status') {
                $gby = 'status';
                $orderby .= " ,FIND_IN_SET(Easycase.type_id,'10'),FIND_IN_SET(Easycase.legend,'1,2,4,5,3,10') ";
            } elseif ($groupby == 'priority') {
                $orderby .= " if(Easycase.priority = '' or Easycase.priority is null,4,Easycase.priority),Easycase.priority";
                $gby = 'priority';
            } elseif ($groupby == 'duedate') {
                $orderby .= " ,Easycase.due_date DESC";
                $gby = 'due_date';
            } elseif ($groupby == 'crtdate') {
                $gby = 'crtdate';
                $orderby .= " ,Easycase.actual_dt_created DESC";
            } elseif ($groupby == 'assignto') {
                $gby = 'assignto';
                $orderby .= " ,Assigned ASC";
            } elseif (in_array('task_group', $checkedFields)) {
                $gby = 'milestone';
                $orderby .=" ,EasycaseMilestone.milestone_id ASC";
                if ((isset($_COOKIE['TASKGROUP_FIL']) && $_COOKIE['TASKGROUP_FIL']) || (isset($last_filter_taskgroup) && $last_filter_taskgroup)) {
                    if (trim($_COOKIE['TASKGROUP_FIL']) == 'active' || trim($last_filter_taskgroup) == 'active') {
                        $case_join = 'INNER';
                        if ($projUniq == 'all') {
                            $milstone_filter_condition = ' AND EasycaseMilestone.milestone_id NOT IN(SELECT id FROM milestones as Milestone WHERE Milestone.isactive=0 AND Milestone.company_id =' . SES_COMP . ') ';
                        } else {
                            $milstone_filter_condition = ' AND EasycaseMilestone.milestone_id NOT IN(SELECT id FROM milestones as Milestone WHERE Milestone.isactive=0 AND Milestone.company_id =' . SES_COMP . ' AND Milestone.project_id =' . $curProjId . ') ';
                        }
                    } elseif (trim($_COOKIE['TASKGROUP_FIL']) == 'completed' || trim($last_filter_taskgroup) == 'completed') {
                        $case_join = 'INNER';
                        if ($projUniq == 'all') {
                            $milstone_filter_condition = ' AND EasycaseMilestone.milestone_id NOT IN(SELECT id FROM milestones as Milestone WHERE Milestone.isactive=1 AND Milestone.company_id =' . SES_COMP . ') ';
                        } else {
                            $milstone_filter_condition = ' AND EasycaseMilestone.milestone_id NOT IN(SELECT id FROM milestones as Milestone WHERE Milestone.isactive=1 AND Milestone.company_id =' . SES_COMP . ' AND Milestone.project_id =' . $curProjId . ') ';
                        }
                    }
                }
            }
            $orderby = "Easycase.project_id ASC,Easycase.case_no ASC,Easycase.istype ASC";
            if ($groupby != 'date') {
                $orderby .=" ,Easycase.dt_created DESC";
                if (in_array('task_group', $checkedFields)) {
                    $orderby .= " ,EasycaseMilestone.milestone_id DESC";
                    if ($sortby == 'duedate') {
                        $caseDueDate = strtolower($sortorder);
                        $mileSton_orderby = " ,Easycase.due_date " . $sortorder;
                    } elseif ($sortby == 'caseAt') {
                        $caseAtsort = strtolower($sortorder);
                        $mileSton_orderby = " ,Assigned " . $sortorder;
                    } elseif ($sortby == 'title') {
                        $caseTitle = strtolower($sortorder);
                        $mileSton_orderby = " ,LTRIM(Easycase.title) " . $sortorder;
                    } elseif ($sortby == 'caseno') {
                        $caseNum = strtolower($sortorder);
                        $mileSton_orderby = " ,Easycase.case_no " . $sortorder;
                    } elseif ($sortby == 'priority') {
                        $casePriority = strtolower($sortorder);
                        $mileSton_orderby = " ,Easycase.priority " . $sortorder;
                    } else {
                        $caseUpdatedby = strtolower($sortorder);
                        $mileSton_orderby = " ,Easycase.dt_created " . $sortorder;
                    }
                }
            }
        }
        $orderby = ltrim($orderby, ' ,');
        ######### Search by KeyWord ##########
        $searchcase = "";
        if (trim(urldecode($caseSrch)) && (trim($case_srch) == "")) {
            $filterenabled = 1;
            $searchcase = $this->Format->caseKeywordSearch($caseSrch, 'full');
        }
        if (trim(urldecode($case_srch)) != "") {
            $filterenabled = 1;
            $searchcase = "AND (Easycase.case_no = '$case_srch')";
        }

        if (trim(urldecode($caseSrch))) {
            $filterenabled = 1;
            if ((substr($caseSrch, 0, 1)) == '#') {
                $tmp = explode("#", $caseSrch);
                $casno = trim($tmp['1']);
                $searchcase = " AND (Easycase.case_no = '" . $casno . "')";
            }
        }

        $cond_easycase_actuve = "";

        if ((isset($case_srch) && !empty($case_srch)) || isset($caseSrch) && !empty($caseSrch)) {
            $cond_easycase_actuve = "";
        } else {
            $cond_easycase_actuve = "AND Easycase.isactive=1";
        }
        if (trim($case_date) != "") {
            $frmTz = '+00:00';
            $toTz = $this->Tmzone->getGmtTz(TZ_GMT, TZ_DST);
            $GMT_DATE =$this->Tmzone->GetDateTime(SES_TIMEZONE, TZ_GMT, TZ_DST, TZ_CODE, GMT_DATETIME, "datetime");
            
            if (trim($case_date) == 'one') {
                $one_date = date('Y-m-d H:i:s', strtotime($GMT_DATE) - 3600);
                $qry.= " AND CONVERT_TZ(Easycase.dt_created,'".$frmTz."','".$toTz."') >='" . $one_date . "'";
            } elseif (trim($case_date) == '24') {
                $filterenabled = 1;
                $day_date = date("Y-m-d H:i:s", strtotime($GMT_DATE. " -1 day"));
                $qry.= " AND CONVERT_TZ(Easycase.dt_created,'".$frmTz."','".$toTz."') >='" . $day_date . "'";
            } elseif (trim($case_date) == 'week') {
                $filterenabled = 1;
                $week_date = date("Y-m-d H:i:s", strtotime($GMT_DATE . " -1 week"));
                $qry.= " AND CONVERT_TZ(Easycase.dt_created,'".$frmTz."','".$toTz."') >='" . $week_date . "'";
            } elseif (trim($case_date) == 'month') {
                $filterenabled = 1;
                $month_date = date("Y-m-d H:i:s", strtotime($GMT_DATE . " -1 month"));
                $qry.= " AND CONVERT_TZ(Easycase.dt_created,'".$frmTz."','".$toTz."') >='" . $month_date . "'";
            } elseif (trim($case_date) == 'year') {
                $filterenabled = 1;
                $year_date = date("Y-m-d H:i:s", strtotime($GMT_DATE . " -1 year"));
                $qry.= " AND CONVERT_TZ(Easycase.dt_created,'".$frmTz."','".$toTz."') >='" . $year_date . "'";
            } elseif (strstr(trim($case_date), "_")) {
                $filterenabled = 1;
                $ar_dt = explode("_", trim($case_date));
                $frm_dt = $ar_dt['0'];
                $to_dt = $ar_dt['1'];
                //$qry.= " AND DATE(Easycase.dt_created) >= '" . date('Y-m-d H:i:s', strtotime($frm_dt)) . "' AND DATE(Easycase.dt_created) <= '" . date('Y-m-d H:i:s', strtotime($to_dt)) . "'";
                $qry.= " AND DATE(CONVERT_TZ(Easycase.dt_created,'".$frmTz."','".$toTz."')) >= '" . date('Y-m-d', strtotime($frm_dt)) . "' AND DATE(CONVERT_TZ(Easycase.dt_created,'".$frmTz."','".$toTz."')) <= '" . date('Y-m-d', strtotime($to_dt)) . "'";
            }
        }
        if (trim($case_duedate) != "") {
            $frmTz = '+00:00';
            $toTz = $this->Tmzone->getGmtTz(TZ_GMT, TZ_DST);
            $GMT_DATE =$this->Tmzone->GetDateTime(SES_TIMEZONE, TZ_GMT, TZ_DST, TZ_CODE, GMT_DATETIME, "date");
            if (trim($case_duedate) == '24') {
                $filterenabled = 1;
                $day_date = date("Y-m-d H:i:s", strtotime(date("Y-m-d H:i:s", strtotime(date("Y-m-d H:i:s"))) . " +1 day"));
                $qry.= " AND (DATE(CONVERT_TZ(Easycase.due_date,'".$frmTz."','".$toTz."')) ='" . $GMT_DATE . "')";
            } elseif (trim($case_duedate) == 'overdue') {
                $filterenabled = 1;
                $week_date = date("Y-m-d H:i:s", strtotime(date("Y-m-d H:i:s", strtotime(date("Y-m-d H:i:s"))) . " +1 week"));
                $qry .= " AND ( DATE(CONVERT_TZ(Easycase.due_date,'".$frmTz."','".$toTz."')) <'" . $GMT_DATE . "') AND (DATE(CONVERT_TZ(Easycase.due_date,'".$frmTz."','".$toTz."')) !='0000-00-00') AND (Easycase.legend !=3) ";
            } elseif (strstr(trim($case_duedate), ":") && trim($case_duedate) !== '0000-00-00 00:00:00') {
                $filterenabled = 1;
                $ar_dt = explode(":", trim($case_duedate));
                $frm_dt = $ar_dt['0'];
                $to_dt = $ar_dt['1'];
                $qry.= " AND DATE(CONVERT_TZ(Easycase.due_date,'".$frmTz."','".$toTz."')) >= '" . date('Y-m-d', strtotime($frm_dt)) . "' AND DATE(CONVERT_TZ(Easycase.due_date,'".$frmTz."','".$toTz."')) <= '" . date('Y-m-d', strtotime($to_dt)) . "'";
            }
        }
        ######### Filter by Assign To ##########
        if ($caseMenuFilters == "assigntome") {
            //$qry.= " AND ((Easycase.assign_to=" . SES_ID . ") OR (Easycase.assign_to=0 AND Easycase.user_id=" . SES_ID . "))";
            $qry.= " AND (Easycase.assign_to=" . SES_ID . ")";
        } elseif ($caseMenuFilters == "favourite") {
            if ($projUniq != 'all') {
                $this->loadModel('ProjectUser');
                $this->ProjectUser->bindModel(array('belongsTo' => array('Project')));
                $projArr = $this->ProjectUser->find('first', array('conditions' => array('Project.uniq_id' => $projUniq, 'ProjectUser.user_id' => SES_ID, 'Project.isactive' => 1, 'ProjectUser.company_id' => SES_COMP), 'fields' => array('Project.id', 'Project.short_name', 'ProjectUser.id')));
                if (count($projArr)) {
                    $curProjId = $projArr['Project']['id'];
                    $curProjShortName = $projArr['Project']['short_name'];
                    $conditions = array('EasycaseFavourite.project_id'=>$curProjId,'EasycaseFavourite.company_id'=>SES_COMP,'EasycaseFavourite.user_id'=>SES_ID);
                    $this->loadModel('EasycaseFavourite');
                    $easycase_favourite = $this->EasycaseFavourite->find('list', array('fields'=>array('EasycaseFavourite.id','EasycaseFavourite.easycase_id'),'conditions'=>$conditions));
                    //if(!empty($easycase_favourite)){
                    $qry .= " AND Easycase.id IN('".implode("','", $easycase_favourite)."')";
                    //}
                }
            } else {
                $conditions = array('EasycaseFavourite.company_id'=>SES_COMP,'EasycaseFavourite.user_id'=>SES_ID);
                $this->loadModel('EasycaseFavourite');
                $easycase_favourite = $this->EasycaseFavourite->find('list', array('fields'=>array('EasycaseFavourite.id','EasycaseFavourite.easycase_id'),'conditions'=>$conditions));
                // if(!empty($easycase_favourite)){
                $qry .= " AND Easycase.id IN('".implode("','", $easycase_favourite)."')";
                // }
            }
        }
        ######### Filter by Delegate To ##########
        elseif ($caseMenuFilters == "delegateto") {
            $qry.= " AND Easycase.assign_to!=0 AND Easycase.assign_to!=" . SES_ID . " AND Easycase.user_id=" . SES_ID;
        } elseif ($caseMenuFilters == "closecase") {
            $qry.= " AND Easycase.legend='3' AND Easycase.type_id !='10'";
        } elseif ($caseMenuFilters == "overdue") {
            $cur_dt = date('Y-m-d H:i:s', strtotime(GMT_DATETIME));
            $qry.= " AND Easycase.due_date !='' AND Easycase.due_date != '0000-00-00 00:00:00' AND Easycase.due_date !='1970-01-01 00:00:00' AND Easycase.due_date < '" . $cur_dt . "' AND (Easycase.legend !=3) ";
        } elseif ($caseMenuFilters == "highpriority") {
            $qry.= " AND Easycase.priority ='0' ";
        } elseif ($caseMenuFilters == "newwip") {
            $qry.= " AND (Easycase.legend='1' OR Easycase.legend='2')  AND Easycase.type_id !='10'";
        } elseif ($caseMenuFilters == "openedtasks") {
            $qry.= " AND (Easycase.legend='1' OR Easycase.legend='2' OR Easycase.legend='5' OR Easycase.legend='4')  AND Easycase.type_id !='10'";
        } elseif ($caseMenuFilters == "closedtasks") {
            $qry.= " AND Easycase.legend='3' AND Easycase.type_id !='10'";
        }
        ######### Filter by Latest ##########
        elseif ($caseMenuFilters == "latest") {
            $filterenabled = 1;
            $qry_rest = $qry;
            $before = date('Y-m-d H:i:s', strtotime(GMT_DATETIME . "-2 day"));
            $all_rest = " AND Easycase.dt_created > '" . $before . "' AND Easycase.dt_created <= '" . GMT_DATETIME . "'";
            $qry_rest.= " AND Easycase.dt_created > '" . $before . "' AND Easycase.dt_created <= '" . GMT_DATETIME . "'";
        }
        if ($caseMenuFilters == "latest" && $projUniq != 'all') {
            $CaseCount3 = $this->Easycase->query("SELECT COUNT(Easycase.id) as count FROM easycases as Easycase WHERE " . $istype . $cond_easycase_actuve . " AND Easycase.project_id='$curProjId' AND Easycase.project_id!=0  " . $searchcase . " " . trim($qry_rest));
            $CaseCount = $CaseCount3['0']['0']['count'];
            if ($CaseCount == 0) {
                $rest = $this->Easycase->query("SELECT dt_created FROM easycases WHERE project_id ='" . $curProjId . "' ORDER BY dt_created DESC LIMIT 0 , 1");
                @$sdate = explode(" ", @$rest[0]['easycases']['dt_created']);
                $qry.= " AND Easycase.dt_created >= '" . @$sdate[0] . "' AND Easycase.dt_created <= '" . GMT_DATETIME . "'";
            } else {
                $qry = $qry . $all_rest;
            }
        } elseif ($caseMenuFilters == "latest" && $projUniq == 'all') {
            $qry = $qry . $all_rest;
        }
        $msQuery1 = " ";
        if (isset($caseMenuFilters) && $caseMenuFilters == "milestone") {
            $msQuery = "";
            if ($milestoneIds != "all" && strstr($milestoneIds, "-")) {
                $expMilestoneIds = explode("-", $milestoneIds);
                foreach ($expMilestoneIds as $msid) {
                    if ($msid) {
                        $msQuery.= "EasycaseMilestone.milestone_id=" . $msid . " OR ";
                    }
                }
                if ($msQuery) {
                    $msQuery = substr($msQuery, 0, -3);
                    $msQuery = " AND (" . $msQuery . ")";
                }
            } else {
                $tody = date('Y-m-d', strtotime("now"));
            }
        }
        $mileSton_names = array();
        $all_mileSton_names = array();
        if ($projUniq) {
            $page = $casePage;
            $limit1 = $page * $page_limit - $page_limit;
            $limit2 = $page_limit;
            if (isset($caseMenuFilters) && $caseMenuFilters == "milestone") {
                if ($milestone_type == 0) {
                    $qrycheck = "Milestone.isactive='0'";
                } else {
                    $qrycheck = "Milestone.isactive='1'";
                }
                if ($projUniq != 'all') {
                    $caseAll = $this->Easycase->query("SELECT SQL_CALC_FOUND_ROWS Easycase.*,User.name,IF((Easycase.assign_to =" . SES_ID . "),User.name,User.name) AS Assigned FROM ( SELECT Easycase.*,EasycaseMilestone.id AS Emid, EasycaseMilestone.milestone_id AS Em_milestone_id,EasycaseMilestone.user_id AS Em_user_id,EasycaseMilestone.id_seq,Milestone.id as Mid,Milestone.title AS Mtitle ,Milestone.end_date,Milestone.isactive AS Misactive,Milestone.project_id AS Mproject_id,Milestone.uniq_id AS Muinq_id FROM easycases as Easycase,easycase_milestones AS EasycaseMilestone,milestones AS Milestone WHERE EasycaseMilestone.easycase_id=Easycase.id AND Milestone.id=EasycaseMilestone.milestone_id" . $msQuery1 . "AND Easycase.istype='1' AND " . $clt_sql . " " . $cond_easycase_actuve . " AND " . $qrycheck . " AND Easycase.project_id='$curProjId' AND Easycase.project_id!=0  " . $searchcase . " " . trim($qry) . " AND EasycaseMilestone.easycase_id=Easycase.id AND EasycaseMilestone.project_id=" . $curProjId . $msQuery . " ) AS Easycase LEFT JOIN users User ON Easycase.assign_to=User.id ORDER BY Easycase.end_date ASC,Easycase.Mtitle ASC," . $orderby . " LIMIT 0,1500");
                }
                if ($projUniq == 'all') {
                    $caseAll = $this->Easycase->query("SELECT SQL_CALC_FOUND_ROWS Easycase.*,User.name,IF((Easycase.assign_to =" . SES_ID . "),User.name,User.name) AS Assigned FROM ( SELECT  Easycase.*,EasycaseMilestone.id AS Emid, EasycaseMilestone.milestone_id AS Em_milestone_id,EasycaseMilestone.user_id AS Em_user_id,EasycaseMilestone.id_seq,Milestone.id as Mid,Milestone.title AS Mtitle ,Milestone.end_date,Milestone.isactive AS Misactive,Milestone.project_id AS Mproject_id,Milestone.uniq_id AS Muinq_id FROM easycases as Easycase,easycase_milestones AS EasycaseMilestone,milestones AS Milestone WHERE EasycaseMilestone.easycase_id=Easycase.id AND Milestone.id=EasycaseMilestone.milestone_id AND " . $istype . " AND " . $clt_sql . " " . $cond_easycase_actuve . " AND " . $qrycheck . " AND Easycase.project_id!=0 AND Easycase.project_id IN (SELECT ProjectUser.project_id FROM project_users AS ProjectUser,projects as Project WHERE ProjectUser.user_id=" . SES_ID . " AND ProjectUser.project_id=Project.id AND Project.isactive='1' AND ProjectUser.company_id='" . SES_COMP . "') " . $searchcase . " " . trim($qry) . " AND EasycaseMilestone.easycase_id=Easycase.id AND EasycaseMilestone.project_id IN (SELECT ProjectUser.project_id FROM project_users AS ProjectUser,projects as Project WHERE ProjectUser.user_id=" . SES_ID . " AND ProjectUser.project_id=Project.id AND Project.isactive='1')" . $msQuery . " ) AS Easycase LEFT JOIN users User ON Easycase.assign_to=User.id ORDER BY Easycase.end_date ASC,Easycase.Mtitle ASC," . $orderby . " LIMIT 0,1500");
                }
            } else {
                //$orderby .=" ";
                $istype_2  = "";
                if ($projUniq == 'all') {
                    if (in_array('comment', $checkedFields)) {
                        $res_cs_nos = $this->Easycase->query("SELECT case_no FROM easycases as Easycase WHERE Easycase.istype=1 AND " . $clt_sql . " " . $cond_easycase_actuve . " AND Easycase.project_id!=0 AND Easycase.project_id IN (SELECT ProjectUser.project_id FROM project_users AS ProjectUser,projects as Project WHERE ProjectUser.user_id=" . SES_ID . " AND ProjectUser.project_id=Project.id AND Project.isactive='1' AND ProjectUser.company_id='" . SES_COMP . "') " . $searchcase . " " . trim($qry) . "  ORDER BY  Easycase.id DESC");
                        if ($res_cs_nos) {
                            $cs_no_ids = Hash::extract($res_cs_nos, '{n}.Easycase.case_no');
                            $istype_2 = " ELSE Easycase.case_no IN(".implode(',', $cs_no_ids).") ";
                        }
                    }
                    if ($caseMenuFilters == "latest") {
                        $caseAll = $this->Easycase->query("SELECT SQL_CALC_FOUND_ROWS Easycase.*,User.name,IF((Easycase.assign_to =" . SES_ID . "),User.name,User.name) AS Assigned FROM ( SELECT * FROM easycases as Easycase WHERE " . $istype . " AND " . $clt_sql . " " . $cond_easycase_actuve . " AND Easycase.project_id!=0 AND Easycase.project_id IN (SELECT ProjectUser.project_id FROM project_users AS ProjectUser,projects as Project WHERE ProjectUser.user_id=" . SES_ID . " AND ProjectUser.project_id=Project.id AND Project.isactive='1' AND ProjectUser.company_id='" . SES_COMP . "') " . $searchcase . " " . trim($qry) . "  ORDER BY  Easycase.dt_created DESC) AS Easycase LEFT JOIN users User ON Easycase.assign_to=User.id ORDER BY " . $orderby . " ");
                    } else {
                        $req_sql = "SELECT SQL_CALC_FOUND_ROWS Easycase.*,User.name,IF((Easycase.assign_to =" . SES_ID . "),User.name,User.name) AS Assigned FROM ( SELECT * FROM easycases as Easycase WHERE " . $istype . " AND " . $clt_sql . " " . $cond_easycase_actuve . " AND Easycase.project_id!=0 AND Easycase.project_id IN (SELECT ProjectUser.project_id FROM project_users AS ProjectUser,projects as Project WHERE ProjectUser.user_id=" . SES_ID . " AND ProjectUser.project_id=Project.id AND Project.isactive='1' AND ProjectUser.company_id='" . SES_COMP . "') AND ( CASE WHEN Easycase.istype = 1 THEN 1 " . $searchcase . " " . trim($qry) . " ".$istype_2." END )  ORDER BY  Easycase.project_id DESC) AS Easycase LEFT JOIN users User ON Easycase.assign_to=User.id ORDER BY " . $orderby . " LIMIT 0,10000 ";
                        if ($gby == 'milestone') {
                            $req_sql = "SELECT SQL_CALC_FOUND_ROWS Easycase.*,EasycaseMilestone.milestone_id as mid,User.name,IF((Easycase.assign_to =" . SES_ID . "),User.name,User.name) AS Assigned FROM ( SELECT * FROM easycases as Easycase WHERE " . $istype . " AND " . $clt_sql . " " . $cond_easycase_actuve . " AND Easycase.project_id!=0 AND Easycase.project_id IN (SELECT ProjectUser.project_id FROM project_users AS ProjectUser,projects as Project WHERE ProjectUser.user_id=" . SES_ID . " AND ProjectUser.project_id=Project.id AND Project.isactive='1' AND ProjectUser.company_id='" . SES_COMP . "') AND ( CASE WHEN Easycase.istype = 1 THEN 1 " . $searchcase . " " . trim($qry) . " ".$istype_2." END )  ORDER BY  Easycase.project_id DESC) AS Easycase LEFT JOIN users User ON Easycase.assign_to=User.id " . $case_join . " JOIN easycase_milestones EasycaseMilestone ON Easycase.id=EasycaseMilestone.easycase_id" . $milstone_filter_condition . " ORDER BY " . $orderby . $mileSton_orderby . " ,EasycaseMilestone.id_seq ASC LIMIT 0,10000 ";
                        }
                        $caseAll = $this->Easycase->query($req_sql);
                        if ($gby == 'milestone') {
                            $results_mids = Hash::extract($caseAll, '{n}.EasycaseMilestone.mid');
                            $results_mids = array_filter($results_mids);
                            if ($results_mids) {
                                $cond = array('conditions' => array('Milestone.id' => $results_mids), 'fields' => array('Milestone.id', 'Milestone.uniq_id', 'Milestone.title', 'Milestone.isactive', 'Milestone.project_id'));
                                $mileSton_names = $this->Milestone->find('all', $cond);
                                $mileSton_names = Hash::combine($mileSton_names, '{n}.Milestone.id', '{n}.Milestone');
                                foreach ($mileSton_names as $miik => $miiv) {
                                    $mileSton_names[$miik]['title'] = htmlspecialchars_decode($miiv['title']);
                                }
                            }
                        }
                    }
                } else {
                    if (in_array('comment', $checkedFields)) {
                        $res_cs_nos = $this->Easycase->query("SELECT case_no FROM easycases as Easycase WHERE Easycase.istype=1 AND " . $clt_sql . " " . $cond_easycase_actuve . " AND Easycase.project_id='$curProjId' AND Easycase.project_id!=0  " . $searchcase . " " . trim($qry));
                        if ($res_cs_nos) {
                            $cs_no_ids = Hash::extract($res_cs_nos, '{n}.Easycase.case_no');
                            $istype_2 = " ELSE Easycase.case_no IN(".implode(',', $cs_no_ids).") ";
                        }
                    }
                    $req_sql = "SELECT SQL_CALC_FOUND_ROWS Easycase.*,User.name,IF((Easycase.assign_to =" . SES_ID . "),User.name,User.name) AS Assigned FROM (SELECT * FROM easycases as Easycase WHERE " . $istype . " AND " . $clt_sql . " " . $cond_easycase_actuve . " AND Easycase.project_id='$curProjId' AND Easycase.project_id!=0  AND ( CASE WHEN Easycase.istype = 1 THEN 1 " . $searchcase . " " . trim($qry) . " ".$istype_2." END ) ) AS Easycase LEFT JOIN users User ON Easycase.assign_to=User.id ORDER BY " . $orderby . " LIMIT 0,10000 ";
                    if ($gby == 'milestone') {
                        $req_sql = "SELECT SQL_CALC_FOUND_ROWS Easycase.*,EasycaseMilestone.milestone_id as mid,User.name,IF((Easycase.assign_to =" . SES_ID . "),User.name,User.name) AS Assigned FROM ( SELECT * FROM easycases as Easycase WHERE " . $istype . " AND " . $clt_sql . " " . $cond_easycase_actuve . " AND Easycase.project_id='$curProjId' AND Easycase.project_id!=0   AND ( CASE WHEN Easycase.istype = 1 THEN 1 " . $searchcase . " " . trim($qry) . " ".$istype_2." END ) ) AS Easycase LEFT JOIN users User ON Easycase.assign_to=User.id " . $case_join . " JOIN easycase_milestones EasycaseMilestone ON Easycase.id=EasycaseMilestone.easycase_id AND EasycaseMilestone.project_id ='" . $curProjId . "'" . $milstone_filter_condition . " ORDER BY " . $orderby . $mileSton_orderby . " ,EasycaseMilestone.id_seq ASC LIMIT 0,10000 ";
                    }
                    $caseAll = $this->Easycase->query($req_sql);
                    if ($gby == 'milestone') {
                        $results_mids = Hash::extract($caseAll, '{n}.EasycaseMilestone.mid');
                        $results_mids = array_filter($results_mids);
                        if ($results_mids) {
                            $cond = array('conditions' => array('Milestone.id' => $results_mids), 'fields' => array('Milestone.id', 'Milestone.uniq_id', 'Milestone.title', 'Milestone.isactive', 'Milestone.project_id'));
                            $mileSton_names = $this->Milestone->find('all', $cond);
                            $mileSton_names = Hash::combine($mileSton_names, '{n}.Milestone.id', '{n}.Milestone');
                            foreach ($mileSton_names as $miik => $miiv) {
                                $mileSton_names[$miik]['title'] = htmlspecialchars_decode($miiv['title']);
                            }
                        }
                    }
                }
            }
            if ($gby == 'milestone') {
                if ($projUniq == 'all') {
                    $req_sql_cnt = "SELECT count(Easycase.id) as cnt FROM ( SELECT Easycase.* FROM easycases as Easycase WHERE " . $istype . " AND " . $clt_sql . " " . $cond_easycase_actuve . " AND Easycase.project_id!=0 AND Easycase.project_id IN (SELECT ProjectUser.project_id FROM project_users AS ProjectUser,projects as Project WHERE ProjectUser.user_id=" . SES_ID . " AND ProjectUser.project_id=Project.id AND Project.isactive='1' AND ProjectUser.company_id='" . SES_COMP . "')  AND ( CASE WHEN Easycase.istype = 1 THEN 1  " . $searchcase . " " . trim($qry) . " ".$istype_2." END ) ) AS Easycase " . $case_join . " JOIN easycase_milestones EasycaseMilestone ON Easycase.id=EasycaseMilestone.easycase_id" . $milstone_filter_condition . " LEFT JOIN users User ON Easycase.assign_to=User.id ORDER BY " . $orderby;
                    $tot = $this->Easycase->query($req_sql_cnt);
                } else {
                    $req_sql_cnt = "SELECT count(Easycase.id) as cnt FROM ( SELECT Easycase.* FROM easycases as Easycase WHERE " . $istype . " AND " . $clt_sql . " " . $cond_easycase_actuve . " AND Easycase.project_id='$curProjId' AND Easycase.project_id!=0  AND ( CASE WHEN Easycase.istype = 1 THEN 1 " . $searchcase . " " . trim($qry) . " ".$istype_2." END ) ) AS Easycase " . $case_join . " JOIN easycase_milestones EasycaseMilestone ON Easycase.id=EasycaseMilestone.easycase_id" . $milstone_filter_condition . " LEFT JOIN users User ON Easycase.assign_to=User.id ORDER BY " . $orderby;
                    $tot = $this->Easycase->query($req_sql_cnt);
                }
                $CaseCount = $tot[0][0]['cnt'];

                $tsk_grp_fl = array(0, 1);
                if (isset($_COOKIE['TASKGROUP_FIL']) && $_COOKIE['TASKGROUP_FIL']) {
                    if (trim($_COOKIE['TASKGROUP_FIL']) == 'active') {
                        $tsk_grp_fl = 1;
                    } elseif (trim($_COOKIE['TASKGROUP_FIL']) == 'completed') {
                        $tsk_grp_fl = 0;
                    }
                }
                if ($projUniq == 'all') {
                    $ec_mil = $this->Easycase->query("SELECT DISTINCT(EasycaseMilestone.milestone_id) as mid FROM easycase_milestones AS EasycaseMilestone WHERE EasycaseMilestone.project_id IN(SELECT PJU.project_id FROM project_users AS PJU WHERE PJU.company_id = " . SES_COMP . " AND PJU.user_id = " . SES_ID . ")");
                    $cond = array('conditions' => array('Milestone.company_id' => SES_COMP, 'Milestone.isactive' => $tsk_grp_fl), 'fields' => array('Milestone.id', 'Milestone.uniq_id', 'Milestone.project_id', 'Milestone.title'), 'order' => 'Milestone.created DESC');
                    if ($ec_mil) {
                        $ec_mil = array_unique(Hash::extract($ec_mil, '{n}.EasycaseMilestone.mid'));
                        $cond = array('conditions' => array('Milestone.company_id' => SES_COMP, 'Milestone.isactive' => $tsk_grp_fl, 'NOT' => array('Milestone.id' => $ec_mil)), 'fields' => array('Milestone.id', 'Milestone.uniq_id', 'Milestone.project_id', 'Milestone.title'), 'order' => 'Milestone.created DESC');
                    }
                } else {
                    $ec_mil = $this->Easycase->query("SELECT DISTINCT(EasycaseMilestone.milestone_id) as mid FROM easycase_milestones AS EasycaseMilestone WHERE EasycaseMilestone.project_id IN(SELECT PJU.project_id FROM project_users AS PJU WHERE PJU.company_id = " . SES_COMP . " AND PJU.user_id = " . SES_ID . " AND PJU.project_id = " . $curProjId . ")");
                    $cond = array('conditions' => array('Milestone.company_id' => SES_COMP, 'Milestone.isactive' => $tsk_grp_fl, 'Milestone.project_id' => $curProjId), 'fields' => array('Milestone.id', 'Milestone.uniq_id', 'Milestone.project_id', 'Milestone.title', 'Milestone.isactive'), 'order' => 'Milestone.created DESC');
                    if ($ec_mil) {
                        $ec_mil = array_unique(Hash::extract($ec_mil, '{n}.EasycaseMilestone.mid'));
                        $cond = array('conditions' => array('Milestone.company_id' => SES_COMP, 'Milestone.isactive' => $tsk_grp_fl, 'Milestone.project_id' => $curProjId, 'NOT' => array('Milestone.id' => $ec_mil)), 'fields' => array('Milestone.id', 'Milestone.uniq_id', 'Milestone.project_id', 'Milestone.title', 'Milestone.isactive'), 'order' => 'Milestone.created DESC');
                    }
                }
                $all_mileSton_names = $this->Milestone->find('all', $cond);
                if ($all_mileSton_names) {
                    $all_mileSton_names = Hash::combine($all_mileSton_names, '{n}.Milestone.id', '{n}.Milestone');
                    foreach ($all_mileSton_names as $mik => $miv) {
                        $all_mileSton_names[$mik]['title'] = htmlspecialchars_decode($miv['title']);
                    }
                }
            } else {
                $tot = $this->Easycase->query("SELECT FOUND_ROWS() as total");
                $CaseCount = $tot[0][0]['total'];
            }
        } else {
            $CaseCount = 0;
        }
        /* the total Spent hours Task wise */
        $spentHrs = array();
        if (in_array('spent_hour', $checkedFields)) {
            if ($projUniq == 'all') {
                $logProjectCond = " AND  LogTime.project_id IN (SELECT ProjectUser.project_id FROM project_users AS ProjectUser,projects as Project WHERE ProjectUser.user_id=" . SES_ID . " AND ProjectUser.project_id=Project.id AND Project.isactive='1' AND ProjectUser.company_id='" . SES_COMP . "')";
            } else {
                $logProjectCond = " AND  LogTime.project_id='".$curProjId."'";
            }

            $logQuery = "SELECT SUM(LogTime.total_hours) AS total,LogTime.task_id FROM log_times AS LogTime WHERE 1=1 $logProjectCond GROUP BY LogTime.task_id";
            $logts =  $this->LogTime->query($logQuery);
            if (!empty($logts)) {
                foreach ($logts as $k=>$v) {
                    $spentHrs[$v['LogTime']['task_id']] = $v[0]['total'];
                }
            }
        }
        /* End */
        $resCaseProj['caseCount'] = $CaseCount;
        $view = new View($this);
        $tz = $view->loadHelper('Tmzone');
        $dt = $view->loadHelper('Datetime');
        $cq = $view->loadHelper('Casequery');
        $frmt = $view->loadHelper('Format');
        $resCaseProj['caseAll'] = $caseAll;
        $resCaseProj['milesto_names'] = $mileSton_names;
        $resCaseProj['all_milesto_names'] = $all_mileSton_names;
        $priArr = array('high', 'medium', 'low');
        $stsArr = array(1 => 'New', 2 => 'In Progress', 3 => 'Closed', 4 => 'In Progress', 5 => 'Resolved');
        $sql = "SELECT Type.* FROM types AS Type WHERE Type.company_id = 0 OR Type.company_id =" . SES_COMP;
        $typeArr = $this->Easycase->query($sql);
        $curCreated = $tz->GetDateTime(SES_TIMEZONE, TZ_GMT, TZ_DST, TZ_CODE, GMT_DATETIME, "datetime");

        $milestone_pids = array_unique(Hash::extract($caseAll, '{n}.Easycase.project_id'));
        $cond_pnames = array('conditions' => array('Project.id' => $milestone_pids), 'fields' => array('Project.id', 'Project.name'));
        $all_prj_names = $this->Project->find('list', $cond_pnames);

        $content = '';
        if (in_array('date', $checkedFields)) {
            $content.= 'Date';
        }
        if (in_array('case_no', $checkedFields)) {
            $content == '' ? $content.= 'Task#' : $content.= ',Task#';
        }
        if (in_array('case_title', $checkedFields)) {
            $content == '' ? $content.= 'Title' : $content.= ',Title';
        }
        if (in_array('case_description', $checkedFields)) {
            $content == '' ? $content.= 'Description' : $content.= ',Description';
        }
        if ($gby == 'milestone') {
            if ($projUniq == 'all') {
                $content == '' ? $content.= 'Sprint/TaskGroup' : $content.=',Sprint/TaskGroup';
            } else {
                if ($_SESSION['project_methodology'] != 'scrum') {
                    $content == '' ? $content.= 'Task Group' : $content.=',Task Group';
                } else {
                    $content == '' ? $content.= 'Sprint' : $content.=',Sprint';
                }
            }
        }
        if (in_array('task_parent', $checkedFields)) {
            $content == '' ? $content.= 'Parent' : $content.= ',Parent';
        }
        if (in_array('project_name', $checkedFields)) {
            $content == '' ? $content.= 'Project' : $content.= ',Project';
        }
        if (in_array('case_type', $checkedFields)) {
            $content == '' ? $content.= 'Type' : $content.= ',Type';
        }
        if (in_array('Label', $checkedFields)) {
            $content == '' ? $content.= 'Label' : $content.= ',Label';
        }
        if (in_array('estimated_hour', $checkedFields)) {
            $content == '' ? $content.= 'Estimated Hour' : $content.= ',Estimated Hour';
        }
        if (in_array('spent_hour', $checkedFields)) {
            $content == '' ? $content.= 'Spent Hour' : $content.= ',Spent Hour';
        }
        if (in_array('assigned_to', $checkedFields)) {
            $content == '' ? $content.= 'Assigned To' : $content.= ',Assigned To';
        }
        if (in_array('case_priority', $checkedFields)) {
            $content == '' ? $content.= 'Priority' : $content.= ',Priority';
        }
        if (in_array('created_date', $checkedFields)) {
            $content == '' ? $content.= 'Created Date' : $content.= ',Created Date';
        }
        if (in_array('created_by', $checkedFields)) {
            $content == '' ? $content.= 'Created By' : $content.= ',Created By';
        }
        if (in_array('updated_date', $checkedFields)) {
            $content == '' ? $content.= 'Updated Date' : $content.= ',Updated Date';
        }
        if (in_array('case_status', $checkedFields)) {
            $content == '' ? $content.= 'Status' : $content.= ',Status';
        }
        if (in_array('gantt_start_date', $checkedFields)) {
            $content == '' ? $content.= 'Start Date' : $content.= ',Start Date';
        }
        if (in_array('due_date', $checkedFields)) {
            $content == '' ? $content.= 'Due Date' : $content.= ',Due Date';
        }
        if (in_array('comment', $checkedFields)) {
            $content == '' ? $content.= 'Comments' : $content.= ',Comments';
        }
        $content .= "\n";
        $csts_arr = array();
        if (is_array($resCaseProj) && count($resCaseProj) > 0) {
            if (in_array('Label', $checkedFields)) {
                $easy_ids = Hash::extract($resCaseProj['caseAll'], '{n}.Easycase.id');
                $this->loadModel('EasycaseLabel');
                $esy_labels = $this->EasycaseLabel->geteasyLabels($easy_ids, SES_COMP);
            }
            $csts_arr = $this->Easycase->getStatusFortasks($resCaseProj['caseAll']);
            $existingTaskProject = array();
            $totalRecors = 0;
            foreach ($resCaseProj['caseAll'] as $key => $val) {
                if ($val["Easycase"]['istype'] == 1) {
                    $existingTaskProject[$val["Easycase"]['project_id']][$val["Easycase"]['case_no']] = $val["Easycase"]['case_no'];
                } else {
                    if (!isset($existingTaskProject[$val["Easycase"]['project_id']][$val["Easycase"]['case_no']])) {
                        continue;
                    }
                }
                $updated = $tz->GetDateTime(SES_TIMEZONE, TZ_GMT, TZ_DST, TZ_CODE, $val['Easycase']['dt_created'], "datetime");
                $created = $tz->GetDateTime(SES_TIMEZONE, TZ_GMT, TZ_DST, TZ_CODE, $val['Easycase']['actual_dt_created'], "datetime");
                $dueDate = '';
                if (!empty($val["Easycase"]['due_date']) && trim($val["Easycase"]['due_date']) != '0000-00-00 00:00:00' && !stristr($val["Easycase"]['due_date'], "1970-01-01")) {
                    $dueDate = $val["Easycase"]['due_date'] != '' ? date('m/d/Y', strtotime($val["Easycase"]['due_date'])) : '';
                }
                $gantt_start_date = $val["Easycase"]['gantt_start_date'] != '' ? date('m/d/Y', strtotime($val["Easycase"]['gantt_start_date'])) : '';
                $types = $cq->getTypeArr($val["Easycase"]['type_id'], $typeArr);
                $typeName = $types['Type']['name'];
                $assigned = $val["0"]['Assigned'] != '' ? $val["0"]['Assigned'] : 'Nobody';
                $estHour = $this->Format->format_second_hrmin($val['Easycase']['estimated_hours']);
                if (in_array('date', $checkedFields)) {
                    $content .= '"' . date('m/d/Y', strtotime($val["Easycase"]['dt_created'])) . '",';
                }
                if (in_array('case_no', $checkedFields)) {
                    $content .='"' . $val["Easycase"]['case_no'] . '",';
                }
                if ($val["Easycase"]['istype'] == 2) {
                    if (in_array('case_title', $checkedFields)) {
                        $content .=",";
                    }
                    if (in_array('task_parent', $checkedFields)) {
                        if ($val["Easycase"]['parent_task_id']) {
                            $parents = $this->Easycase->find('first', array('conditions'=>array('id'=>$val["Easycase"]['parent_task_id']),'fields'=>array('case_no')));
                            $content .='"' . $parents["Easycase"]['case_no'] . '",';
                        } else {
                            $content .='0,';
                        }
                    }
                    if (in_array('project_name', $checkedFields)) {
                        $content .=",";
                    }
                    if ($gby == 'milestone') {
                        $content .=",";
                    }
                    if (in_array('case_title', $checkedFields)) {
                        $content .=",";
                    }
                } else {
                    if (in_array('case_title', $checkedFields)) {
                        $content .='"' . $this->Format->getReplacedStrng($frmt->formatTitle($val["Easycase"]['title'])) . '",';
                    }
                    if (in_array('case_description', $checkedFields)) {
                        $content .='"' . $this->getNewlinesInsingle($this->Format->getReplacedStrng($frmt->formatTitle($this->Format->stripHtml($val["Easycase"]['message'])))) . '",';
                    }
                    if ($gby == 'milestone') {
                        $content .='"' . $this->Format->getReplacedStrng($frmt->formatTitle($resCaseProj['milesto_names'][$val["EasycaseMilestone"]['mid']]['title'])) . '",';
                    }
                    if (in_array('task_parent', $checkedFields)) {
                        if ($val["Easycase"]['parent_task_id']) {
                            $parents = $this->Easycase->find('first', array('conditions'=>array('id'=>$val["Easycase"]['parent_task_id']),'fields'=>array('case_no')));
                            $content .='"' . $parents["Easycase"]['case_no'] . '",';
                        } else {
                            $content .='0,';
                        }
                    }
                    if (in_array('project_name', $checkedFields)) {
                        $content .='"' . $all_prj_names[$val["Easycase"]['project_id']] . '",';
                    }
                }
                if (in_array('case_type', $checkedFields)) {
                    $content .='"' . $typeName . '",';
                }
                if (in_array('Label', $checkedFields)) {
                    $content .='"' . $esy_labels[$val["Easycase"]['id']] . '",';
                }
                if (in_array('estimated_hour', $checkedFields)) {
                    $content .='"' . $estHour . '",';
                }
                if (in_array('spent_hour', $checkedFields)) {
                    $spnt = isset($spentHrs[$val["Easycase"]['id']])?$spentHrs[$val["Easycase"]['id']]:0;
                    $content .='"' .  $this->Format->format_second_hrmin($spnt) . '",';
                }
                if (in_array('assigned_to', $checkedFields)) {
                    $content .='"' . $assigned . '",';
                }
                if (in_array('case_priority', $checkedFields)) {
                    $content .='"' . $priArr[$val["Easycase"]['priority']] . '",';
                }
                if (in_array('created_date', $checkedFields)) {
                    $content .='"' . date('m/d/Y', strtotime($val["Easycase"]['actual_dt_created'])) . '",';
                }
                if (in_array('created_by', $checkedFields)) {
                    $content .='"' . $this->Format->getUserShortName($val["Easycase"]['user_id'])['User']['name'] . '",';
                }
                if (in_array('updated_date', $checkedFields)) {
                    #$content .='"' . $dt->facebook_style($updated, $curCreated, 'time') . '",';
                    $content .='"' . date('m/d/Y', strtotime($updated)) . '",';
                }
                if (in_array('case_status', $checkedFields)) {
                    if ($val['Easycase']['custom_status_id']) {
                        $content .='"' . $csts_arr[$val["Easycase"]['custom_status_id']]['name'] . '",';
                    } else {
                        $content .='"' . $stsArr[$val["Easycase"]['legend']] . '",';
                    }
                }
                if (in_array('gantt_start_date', $checkedFields)) {
                    $content .='"' . $gantt_start_date . '",';
                }
                if (in_array('due_date', $checkedFields)) {
                    $content .='"' . $dueDate . '",';
                }
                if (in_array('comment', $checkedFields)) {
                    if ($val["Easycase"]['istype'] == 1) {
                        $content .=",";
                    } else {
//                        if (!empty($val["Easycase"]['message'])) {
                        $desp = $val["Easycase"]['message'];
//                        } else {
                        if (!empty($val["Easycase"]['project_id']) && !empty($val["Easycase"]['case_no'])) {
                            $query = "SELECT * FROM easycases as Easycase WHERE  id=" . $val["Easycase"]['id'] . " AND project_id='" . $val["Easycase"]['project_id'] . "' AND case_no=" . $val["Easycase"]['case_no'] . " AND istype='2' ORDER BY dt_created ASC";
                            $sqlcasedata = $this->Easycase->query($query);
                        }
//                        pr($sqlcasedata); exit;
                        $usrDtlsAll = $this->Easycase->getTaskUser($val["Easycase"]['project_id'], $val["Easycase"]['case_no']);
                        $userArr = array();
                        foreach ($usrDtlsAll as $ud) {
                            $userArr[$ud['User']['id']] = $ud;
                        }
                        $view = new View($this);
                        $tz = $view->loadHelper('Tmzone');
                        $dt = $view->loadHelper('Datetime');
                        $cq = $view->loadHelper('Casequery');
                        $frmt = $view->loadHelper('Format');
                        $sqlcasedata = $this->Easycase->formatReplies($sqlcasedata, $userArr, $frmt, $cq, $tz, $dt);
                        $desp = !empty($sqlcasedata['sqlcasedata']['0']["Easycase"]['replyCap']) ? strip_tags($sqlcasedata['sqlcasedata']['0']["Easycase"]['replyCap']) : '';
                        $reply = !empty($sqlcasedata['sqlcasedata']['0']["Easycase"]['usrName']) ? strip_tags($sqlcasedata['sqlcasedata']['0']["Easycase"]['usrName']) : 'NA';
                        if (empty($desp)) {
                            $desp = !empty($val["Easycase"]['message']) ? $val["Easycase"]['message'] : 'No Comment';
                        }
                        $desp = $reply . ' - ' . $desp;
//                        }
//                            pr($sqlcasedata); exit;
                        $content .='"' . $this->getNewlinesInsingle($this->Format->getReplacedStrng($frmt->formatTitle($this->Format->stripHtml($desp)))) . '",';
//                        $content .='"' . $reply . '",';
                    }
                }
                $content = trim($content, ',');
                $content .="\n";
                $totalRecors++;
                if ($totalRecors >= 5000) {
                    break;
                }
            }
            $content .= "\n" . "Export Date," . $this->Format->dateFormatReverse($tz->GetDateTime(SES_TIMEZONE, TZ_GMT, TZ_DST, TZ_CODE, GMT_DATETIME, "datetime"));
            $content .= "\n" . "Total," . $totalRecors . " records";
        }
        if (!is_dir(TASKLIST_CSV_PATH)) {
            @mkdir(TASKLIST_CSV_PATH, 0777, true);
        }

        $name = $projFil;
        if (trim($name) != '' && strlen($name) > 25) {
            $name = substr($name, 0, 24) . "_" . date('m-d-Y', strtotime(GMT_DATE)) . "_tasklist.csv";
        } else {
            $name .= (trim($name) != '' ? "_" : '') . date('m-d-Y', strtotime(GMT_DATE)) . "_tasklist.csv";
        }
        $download_name = date('m-d-Y', strtotime(GMT_DATE)) . "_tasklist.csv";

        $file_path = TASKLIST_CSV_PATH . $name;
        $fp = @fopen($file_path, 'w+');
        fwrite($fp, $content);
        fclose($fp);

        //$this->response->header(array('Content-Encoding'=>'UTF-8','Content-type'=>'text/csv','charset'=>'UTF-8'));
        $this->response->charset('UTF-8');
        $this->response->type('csv');
        $this->response->file($file_path, array('download' => true, 'name' => urlencode($download_name)));
        return $this->response;
    }
    public function appendReplyThread()
    {
        $curCaseId = $this->data['curCaseId'];
        $caseId = $this->data['caseId'];
        $projUId = $this->data['prjid'];
        $this->loadModel('Project');
        $this->Project->recursive = '-1';
        $projId = $this->Project->query('SELECT Project.id from projects AS Project WHERE Project.uniq_id = "' . $projUId . '"');
        //$case_count = $this->Easycase->query('SELECT Easycase.case_count from easycases AS Easycase WHERE Easycase.project_id = "' . $projId[0]['Project']['id'] . '" AND Easycase.id = "' . $caseId . '"');
        $threadDtls = array();
        $view = new View($this);
        $tz = $view->loadHelper('Tmzone');
        $dt = $view->loadHelper('Datetime');
        $cq = $view->loadHelper('Casequery');
        $frmt = $view->loadHelper('Format');

        $sql = 'SELECT Easycase.*, CONCAT_WS(" ", User.name, User.last_name) as user_name, User.id, User.email, User.name, User.last_name, User.short_name, User.photo as photo, IF(Easycase.assign_to > 0, CONCAT_WS(" ", User1.name, User1.last_name), "Nobody") as asgnd_usr from easycases AS Easycase LEFT JOIN users AS User ON Easycase.user_id=User.id LEFT JOIN users AS User1 ON Easycase.assign_to=User1.id WHERE Easycase.id = ' . $curCaseId;
        $curCaseDtls = $this->Easycase->query($sql);
        $curCaseDtls = $curCaseDtls[0];

        $curCaseDtls['User']['photo_existBg'] = $frmt->getProfileBgColr($curCaseDtls['Easycase']['user_id']);
        $by_photo = $curCaseDtls['User']['photo'];

        $curCaseDtls['User']['photo_exist'] = 0;
        if (trim($by_photo)) {
            $curCaseDtls['User']['photo_exist'] = 1; //$frmt->pub_file_exists(DIR_USER_PHOTOS_S3_FOLDER,$by_photo);
        }
        $replyDt = $tz->GetDateTime(SES_TIMEZONE, TZ_GMT, TZ_DST, TZ_CODE, $curCaseDtls['Easycase']['dt_created'], "datetime");
        $curDate = $tz->GetDateTime(SES_TIMEZONE, TZ_GMT, TZ_DST, TZ_CODE, GMT_DATETIME, "date");
        $caseReplyType = $curCaseDtls['Easycase']['reply_type'];
        $caseDtMsg = $curCaseDtls['Easycase']['message'];
        $caseDtLegend = $curCaseDtls['Easycase']['legend'];
        $caseDtTyp = $curCaseDtls['Easycase']['type_id'];
        $assignes_to = $this->Format->getUserShortName($curCaseDtls['Easycase']['assign_to']);
        $caseAssignTo = $curCaseDtls['Easycase']['assign_to'];
        $curCaseDtls['Easycase']['rply_dt'] = $dt->dateFormatOutputdateTime_day($replyDt, $curDate);
        $curCaseDtls['Easycase']['wrap_msg'] = $frmt->html_wordwrap($frmt->formatCms($curCaseDtls['Easycase']['message']), 75);
        /*check for custom status*/
        $cust_sts_list = array();
        if ($curCaseDtls && $curCaseDtls['Easycase']['custom_status_id']) {
            $sts_grp_id = $this->Format->hasCustomTaskStatus($curCaseDtls['Easycase']['project_id'], 'Project.id');
            if ($sts_grp_id) {
                $cust_sts_list = $this->Format->getCustomTaskStatus($sts_grp_id, 'list');
            }
        }
        if ($caseReplyType == 0 && ($caseDtMsg == '' || $caseDtLegend == 6)) {
            if ($curCaseDtls['Easycase']['custom_status_id']) {
                $replyCap = __('Changed the status of the task to', true).' <b class="resolved">'.__($cust_sts_list[$curCaseDtls['Easycase']['custom_status_id']], true).'</b>';
            } else {
                if ($caseDtLegend == 3) {
                    $replyCap = '<b class="closed">'.__('Closed', true).'</b> '.__('the Task', true);
                } elseif ($caseDtLegend == 4 || $caseDtLegend == 2) {
                    $replyCap = '<b class="wip">'.__('Started', true).'</b> '.__('the Task', true);
                } elseif ($caseDtLegend == 5) {
                    $replyCap = '<b class="resolved">'.__('Resolved', true).'</b> '.__('the Task', true);
                } elseif ($caseDtLegend == 6) {
                    $replyCap = '<b class="resolved">'.__('Modified', true).'</b> '.__('the Task', true);
                } elseif ($caseDtLegend == 1) {
                    $replyCap = __('Changed the status of the task to', true).' <b class="resolved">'.__('New', true).'</b>';
                }
            }
        } else {
            if ($caseReplyType == 1) {
                $caseDtTyp = $curCaseDtls['Easycase']['type_id'];
                $prjtype_name = $cq->getTypeArr($caseDtTyp, $GLOBALS['TYPE']);
                $name = $prjtype_name['Type']['name'];
                $sname = $prjtype_name['Type']['short_name'];
                $Type = ClassRegistry::init('Type');
                $Type->recursive = -1;
                $Type_name = $Type->find('first', array('conditions' => array('Type.id' => $caseDtTyp), 'fields' => array('Type.name')));
                $image = $frmt->todo_typ($sname, $name);
                $replyCap = 'Updated task type to  <b>' . $Type_name['Type']['name'] . '</b>';
            } elseif ($caseReplyType == 2) {
                if ($caseAssignTo == 0) {
                    $replyCap = __('Task re-assigned to', true).' <b class="ttc">'.__('Nobody', true).'</b>';
                } else {
                    //$userArr = $cq->getUserDtlsArr($caseAssignTo, $allUserArr);
                    $by_id = $curCaseDtls['User']['id'];
                    $by_email = $curCaseDtls['User']['email'];
                    $by_name_assign = $assignes_to['User']['name'];
                    $by_last_name_assign = $curCaseDtls['User']['last_name'];
                    $short_name_assign = $assignes_to['User']['short_name'];
                    $by_photo = $userArr['User']['photo'];
                    //$short_name_assign = $userArr['User']['short_name'];
                    $replyCap = __('Task re-assigned to', true).' <b class="ttc">' . $by_name_assign .'</b>('.$short_name_assign.')';
                }
            } elseif ($caseReplyType == 3) {
                #$caseDtDue = $curCaseDtls['Easycase']['due_date'];
                $caseDtDue = $tz->GetDateTime(SES_TIMEZONE, TZ_GMT, TZ_DST, TZ_CODE, $curCaseDtls['Easycase']['due_date'], "datetime");
                $curCreated = $tz->GetDateTime(SES_TIMEZONE, TZ_GMT, TZ_DST, TZ_CODE, GMT_DATETIME, "datetime");
                if ($caseDtDue != "NULL" && $caseDtDue != "0000-00-00 00:00:00" && $caseDtDue != "" && $caseDtDue != "1970-01-01 00:00:00") {
                    $due_date = $dt->dateFormatOutputdateTime_day($caseDtDue, $curCreated, 'week');
                    $replyCap = __('Updated due date to', true).' <b>' . $due_date . '</b>';
                } else {
                    $replyCap = __('Due Date', true).': <i>'.__('No Due Date', true).'</i>';
                }
            } elseif ($caseReplyType == 4) {
                $casePriority = $curCaseDtls['Easycase']['priority'];
                if ($casePriority == 0) {
                    $replyCap = __('Updated priority to', true).' <b class="pr_high">'.__('High', true).'</b>';
                } elseif ($casePriority == 1) {
                    $replyCap = __('Updated priority to', true).' <b class="pr_medium">'.__('Medium', true).'</b>';
                } elseif ($casePriority == 2) {
                    $replyCap = __('Updated priority to', true).' <b class="pr_low">'.__('Low', true).'</b>';
                }
            } elseif ($caseReplyType == 5) {
                $caseEstHour = $frmt->format_time_hr_min($curCaseDtls['Easycase']['estimated_hours']);
                $replyCap = __('Updated estimated hour(s) to', true).' <b>' . $caseEstHour . '</b>';
            } elseif ($caseReplyType == 6) {
                $completed = $curCaseDtls['Easycase']['completed_task'];
                $replyCap = __('Updated task progress to', true).' <b>' . $completed . '%</b>';
            } elseif ($caseReplyType == 7) {
                $titl = $frmt->formatTitle($curCaseDtls['Easycase']['title']);
                $replyCap = __('Changed task title to', true).' "<b>' . $titl . '</b>"';
            } elseif ($caseReplyType == 8) {
                $replyCap = __('Removed a file from this task', true);
            } elseif ($caseReplyType == 9) {
                $replyCap = __('Updated the status of this task', true);
            } elseif ($caseReplyType == 10) {
                $replyCap = __('Added time log', true);
            } elseif ($caseReplyType == 11) {
                $replyCap = __('Updated time log', true);
            // Here Activity for Set favorite task
            } elseif ($caseReplyType == 13) {
                $replyCap = __('Set as favorite task', true);
            // Here Activity for Remove favorite task
            } elseif ($caseReplyType == 14) {
                $replyCap = __('Removed as favorite task', true);
            } elseif ($caseReplyType == 15) {
                $replyCap = __('Added story point', true);
            } elseif ($caseReplyType == 16) {
                $replyCap = __('Updated story point', true);
            } else {
                $replyCap = __('Started', true);
            }
        }
        $curCaseDtls['Easycase']['replyCap'] = $replyCap;
        $curCaseDtls['Easycase']['wrap_msg'] = $frmt->html_wordwrap($frmt->formatCms($curCaseDtls['Easycase']['message']), 75);
        $curCaseDtls['Easycase']['user_name'] = $curCaseDtls[0]['user_name'];
        $rplyFilesArr = $this->Easycase->getCaseFiles($curCaseId);
        foreach ($rplyFilesArr as $fkey => $getFiles) {
            $caseFileName = $getFiles['CaseFile']['file'];
            $caseFileUName = $getFiles['CaseFile']['upload_name'] != '' ? $getFiles['CaseFile']['upload_name'] : $getFiles['CaseFile']['file'];

            $rplyFilesArr[$fkey]['CaseFile']['is_exist'] = 0;
            if (trim($caseFileName)) {
                $rplyFilesArr[$fkey]['CaseFile']['is_exist'] = 1; //$frmt->pub_file_exists(DIR_CASE_FILES_S3_FOLDER,$caseFileName);
            }

            if (stristr($getFiles['CaseFile']['downloadurl'], 'www.dropbox.com')) {
                $rplyFilesArr[$fkey]['CaseFile']['format_file'] = 'db'; //'<img src="'.HTTP_IMAGES.'images/db16x16.png" alt="Dropbox" title="'.$caseFileName.'" width="16" height="16" border="0" style="border:0px solid #C3C3C3" />';
                $rplyFilesArr[$fkey]['CaseFile']['is_ImgFileExt'] = $frmt->validateImgFileExt($caseFileUName);
            } elseif (stristr($getFiles['CaseFile']['downloadurl'], '.google.com')) {
                $rplyFilesArr[$fkey]['CaseFile']['format_file'] = 'gd'; //'<img src="'.HTTP_IMAGES.'images/gd16x16.png" alt="Google" title="'.$caseFileName.'" width="16" height="16" border="0" style="border:0px solid #C3C3C3" />';
                $rplyFilesArr[$fkey]['CaseFile']['is_ImgFileExt'] = 0;
            } else {
                $rplyFilesArr[$fkey]['CaseFile']['format_file'] = substr(strrchr(strtolower($caseFileName), "."), 1); //str_replace(array('"','\''), array('\'','"'), $frmt->imageType($caseFileName,25,10,1));
                $rplyFilesArr[$fkey]['CaseFile']['is_ImgFileExt'] = $frmt->validateImgFileExt($caseFileUName);
            }

            if ($rplyFilesArr[$fkey]['CaseFile']['is_ImgFileExt']) {
                if (defined('USE_S3') && USE_S3 == 1) {
                    $rplyFilesArr[$fkey]['CaseFile']['fileurl'] = $frmt->generateTemporaryURL(DIR_CASE_FILES_S3 . $caseFileUName);
                } else {
                    $rplyFilesArr[$fkey]['CaseFile']['fileurl'] = HTTP_CASE_FILES . $caseFileUName;
                }
                if (trim($rplyFilesArr[$fkey]['CaseFile']['thumb']) != '') {
                    $info = true; #$s3->getObjectInfo(BUCKET_NAME, DIR_CASE_FILES_S3_FOLDER_THUMB . $caseFileName, S3::ACL_PRIVATE);
                    if ($info && defined('USE_S3') && USE_S3 == 1) {
                        $rplyFilesArr[$fkey]['CaseFile']['fileurl_thumb'] = $frmt->generateTemporaryURL(DIR_CASE_FILES_S3 . "thumb/" . $caseFileUName);
                    } else {
                        $rplyFilesArr[$fkey]['CaseFile']['fileurl_thumb'] = HTTP_CASE_FILES . trim($rplyFilesArr[$fkey]['CaseFile']['thumb']);
                    }
                } else {
                    $rplyFilesArr[$fkey]['CaseFile']['fileurl_thumb'] = '';
                }
            }

            //$rplyFilesArr[$fkey]['CaseFile']['file_shname'] = $frmt->shortLength($caseFileName,37);
            $rplyFilesArr[$fkey]['CaseFile']['file_size'] = $frmt->getFileSize($getFiles['CaseFile']['file_size']);
        }
        $curCaseDtls['Easycase']['rply_files'] = $rplyFilesArr;
        #pr($curCaseDtls);exit;
        $threadDtls['curCaseDtls'] = $curCaseDtls;
        $query = 'Select Easycase.case_count,Easycase.thread_count, Easycase.case_no, Easycase.id, Easycase.uniq_id from easycases AS Easycase WHERE Easycase.id = ' . $caseId;
        $mainCaseDtls = $this->Easycase->query($query);
        $threadDtls['curCaseDtls']['caseId'] = $mainCaseDtls[0]['Easycase']['id'];
        $threadDtls['curCaseDtls']['caseUniqId'] = $mainCaseDtls[0]['Easycase']['uniq_id'];
        $threadDtls['curCaseDtls']['case_count'] = $mainCaseDtls[0]['Easycase']['thread_count'];
        $threadDtls['curCaseDtls']['case_no'] = $mainCaseDtls[0]['Easycase']['case_no'];
        //$threadDtls['mainCaseDtls'] = $mainCaseDtls;
        echo json_encode(array('threadDetails' => $threadDtls, 'total' => $mainCaseDtls[0]['Easycase']['thread_count']));
        exit;
    }

    public function taskListTmpl()
    {
        $caseid = $this->data['caseid'];
        $mid = $this->data['mid'];
        $pageHash = (isset($this->data['page']))?trim($this->data['page']):'';
        $view = new View($this);
        $tz = $view->loadHelper('Tmzone');
        $dt = $view->loadHelper('Datetime');
        $cq = $view->loadHelper('Casequery');
        $frmt = $view->loadHelper('Format');
        $groupby = $_COOKIE['TASKGROUPBY'];
        //$sql = 'SELECT Easycase.*, User.name as user_name, IF(Easycase.assign_to > 0, User1.name, "Unassigned") as asgnd_usr,CustomStatus.* from easycases AS Easycase LEFT JOIN users AS User ON Easycase.user_id=User.id LEFT JOIN users AS User1 ON Easycase.assign_to=User1.id LEFT JOIN custom_statuses AS CustomStatus ON Easycase.custom_status_id=CustomStatus.id WHERE Easycase.id = ' . $caseid;
        // $sql = 'SELECT Easycase.*,(SELECT parent_task_id from easycases where id=Easycase.parent_task_id ) AS is_sub_sub_task,(SELECT count(parent_task_id) from easycases as E1 where E1.parent_task_id IN (SELECT id from easycases as E2 where E2.parent_task_id = Easycase.id) AND E1.project_id = Easycase.project_id) AS sub_sub_task, User.name as user_name, IF(Easycase.assign_to > 0, User1.name, "Unassigned") as asgnd_usr from easycases AS Easycase LEFT JOIN users AS User ON Easycase.user_id=User.id LEFT JOIN users AS User1 ON Easycase.assign_to=User1.id  WHERE Easycase.id = ' . $caseid;

        $sql = 'SELECT 
        Easycase.*,
        (
            SELECT 
                parent_task_id 
            from 
                easycases 
            where 
                id=Easycase.parent_task_id 
        ) AS is_sub_sub_task,
        (
            SELECT 
                count(parent_task_id) from easycases as E1 where E1.parent_task_id IN 
                (
                    SELECT id from easycases as E2 where E2.parent_task_id = Easycase.id
                ) AND E1.project_id = Easycase.project_id
        ) AS sub_sub_task, User.name as user_name, IF(Easycase.assign_to > 0, User1.name, "Unassigned") as asgnd_usr, lt.tot_spent_hour 
    from 
        easycases AS Easycase 
        LEFT JOIN users AS User ON Easycase.user_id=User.id 
        LEFT JOIN users AS User1 ON Easycase.assign_to=User1.id 
        LEFT JOIN 
        (
            select sum(t.total_hours) as tot_spent_hour, t.task_id from log_times t WHERE t.task_id = '.$caseid.' 
        ) as lt ON Easycase.id = lt.task_id 
    WHERE 
        Easycase.id = '.$caseid.'';
        // echo $sql;exit;
        if ($groupby == 'milestone' && $mid != 'NA' && $mid != 'qtl') {
            $sql = 'SELECT Easycase.*, EasycaseMilestone.milestone_id as mid, User.name as user_name, IF(Easycase.assign_to > 0, User1.name, "Unassigned") as asgnd_usr from easycases AS Easycase LEFT JOIN easycase_milestones AS EasycaseMilestone on Easycase.id =EasycaseMilestone.easycase_id LEFT JOIN users AS User ON Easycase.user_id=User.id LEFT JOIN users AS User1 ON Easycase.assign_to=User1.id WHERE Easycase.id = ' . $caseid;
        }
        $caseListData = $this->Easycase->query($sql);
        $caseDetArr = '';
        $caseDetArr = $caseListData[0];
        if (isset($caseDetArr['Easycase']['estimated_hours'])) {
            $caseDetArr['Easycase']['estimated_hours_convert'] = $this->Format->format_time_hr_min($caseDetArr['Easycase']['estimated_hours']);
        } else {
            $caseDetArr['Easycase']['estimated_hours_convert'] = 0;
        }
        $task_ids = [$caseListData[0]['Easycase']['id']];

        $getAllCustomFields = [];
        if ($task_ids) {
            $this->loadModel('CustomFieldValue');
            $getAllCustomFields = $this->CustomFieldValue->getAllCustomFieldByTaskIds($task_ids, SES_COMP);
        }
        
        /* Checking whether the user is allowed to see Advanced custom fields */
        $allowAdvancedCustomField = $this->Format->isAllowedAdvancedCustomFields();
                             
        $caseDetArr['allowAdvancedCustomField']= $allowAdvancedCustomField;
        /* --End-- */
        $this->loadModel('CustomField');
        $caseDetArr['allCustomFields'] = $this->CustomField->getAllActiveCustomFields();
        $caseDetArr['custom_field_ids'] = array_keys($caseDetArr['allCustomFields']);
        $caseDetArr['custom_field_head'] = array_values($caseDetArr['allCustomFields']);
        $CustomFieldValue = ClassRegistry::init('CustomFieldValue');
        if ($caseDetArr['allCustomFields']) {
            $getAllCustomFields = $CustomFieldValue->reorderCustomFieldArray($getAllCustomFields, 'taskid', $dt, $tz);
        }
        if (isset($caseListData[0]['Easycase']['id'])) {
            $caseDetArr['Easycase']['custom_fields'] = $getAllCustomFields[$caseListData[0]['Easycase']['id']];
        } else {
            $caseDetArr['Easycase']['custom_fields'] = [];
        }
        
        if (!empty($caseDetArr['allCustomFields'])) {
            $tasktimeBalance = $this->Easycase->getTimeBalance($caseDetArr['Easycase'], $caseDetArr['allCustomFields']);
            $task_duration = $this->Easycase->getDurationOfTask($caseDetArr['Easycase'], $caseDetArr['allCustomFields']);
            $caseDetArr['Easycase']['custom_fields'][$tasktimeBalance[0]]['CustomFieldValue']['value'] = $tasktimeBalance[1];
            $caseDetArr['Easycase']['custom_fields'][$tasktimeBalance[0]]['CustomField']['placeholder'] = 'timeBalance';

            $caseDetArr['Easycase']['custom_fields'][$task_duration[0]]['CustomFieldValue']['value'] = $task_duration[1];
            $caseDetArr['Easycase']['custom_fields'][$task_duration[0]]['CustomField']['placeholder'] = 'taskDuration';
        }
        $caseDetArr['Easycase']['reply_cnt'] = $caseDetArr['Easycase']['thread_count'];
        $caseDetArr['Easycase']['asgnName'] = $caseDetArr[0]['asgnd_usr'] != 'Unassigned' ? $this->Format->shortLength(mb_convert_case($caseDetArr[0]['asgnd_usr'], MB_CASE_TITLE, "UTF-8"), 8) : $caseDetArr[0]['asgnd_usr'];
        $caseDetArr['Easycase']['asgnShortName'] = $caseDetArr[0]['asgnd_usr'] != 'Unassigned' ? $this->Format->shortLength(mb_convert_case($caseDetArr[0]['asgnd_usr'], MB_CASE_TITLE, "UTF-8"), 8) : $caseDetArr[0]['asgnd_usr'];
        $caseDetArr['Easycase']['usrShortName'] = $caseDetArr['User']['user_name'];
        //For subtaskview
        $caseDetArr['Easycase']['usrTgShortName'] = $caseDetArr['User']['user_name'];
        if ($caseDetArr['Easycase']['assign_to'] == SES_ID) {
            $caseDetArr['Easycase']['asgnName'] = 'me';
            $caseDetArr['Easycase']['usrShortName'] = 'me';
        }
        $caseDetArr['Easycase']['mid'] = $caseDetArr['EasycaseMilestone']['mid'];
        $updated = $tz->GetDateTime(SES_TIMEZONE, TZ_GMT, TZ_DST, TZ_CODE, $caseDetArr['Easycase']['dt_created'], "datetime");
        $curCreated = $tz->GetDateTime(SES_TIMEZONE, TZ_GMT, TZ_DST, TZ_CODE, GMT_DATETIME, "datetime");
        $caseDetArr['Easycase']['updtedCapDt'] = $dt->dateFormatOutputdateTime_day($updated, $curCreated);
        $caseDetArr['Easycase']['fbstyle'] = $dt->facebook_style($updated, $curCreated, 'time');
        $caseTypeId = $caseDetArr['Easycase']['type_id'];
        $caseLegend = $caseDetArr['Easycase']['legend'];
        if ($caseTypeId) {
            $this->loadModel("Type");
            $task_types = $this->Type->getAllTypes();
            $types = $cq->getTypeArr($caseTypeId, $task_types);
            if (count($types)) {
                $typeShortName = $types['Type']['short_name'];
                $typeName = $types['Type']['name'];
            } else {
                $typeShortName = "";
                $typeName = "";
            }
        }
        $caseDueDate = $tz->GetDateTime(SES_TIMEZONE, TZ_GMT, TZ_DST, TZ_CODE, $caseDetArr['Easycase']['due_date'], "datetime");
        if ($caseTypeId == 10 || $caseLegend == 3 || $caseLegend == 5) {
            if ($caseDueDate != "NULL" && $caseDueDate != "0000-00-00 00:00:00" && $caseDueDate != "" && $caseDueDate != "1970-01-01 00:00:00") {
                if ($caseDueDate < $curdtT) {
                    $csDuDtFmtT = $dt->facebook_datestyle($caseDueDate);
                    $csDuDtFmt = '<span class="over-due">'.__('Overdue', true).'</span>';
                    $csDueDate = $dt->dateFormatOutputdateTime_day($caseDueDate, $curCreated, 'week');
                } else {
                    $csDuDtFmtT = $dt->facebook_datestyle($caseDueDate);
                    $csDuDtFmt = $dt->dateFormatOutputdateTime_day($caseDueDate, $curCreated, 'week');
                }
            } else {
                $csDuDtFmtT = '';
                $csDuDtFmt = '';
            }
            $csDueDate = $csDuDtFmt;
        } else {
            if ($caseDueDate != "NULL" && $caseDueDate != "0000-00-00 00:00:00" && $caseDueDate != "" && $caseDueDate != "1970-01-01 00:00:00") {
                if ($caseDueDate < $curdtT) {
                    $csDuDtFmtT = $dt->facebook_datestyle($caseDueDate);
                    $csDuDtFmt = '<span class="over-due">'.__('Overdue', true).'</span>';
                    $csDueDate = $dt->dateFormatOutputdateTime_day($caseDueDate, $curCreated, 'week');
                } else {
                    $csDuDtFmtT = $dt->facebook_datestyle($caseDueDate);
                    $csDuDtFmt = $dt->dateFormatOutputdateTime_day($caseDueDate, $curCreated, 'week');
                    $csDueDate = $csDuDtFmt;
                }
            } else {
                $csDuDtFmtT = '';
                $csDuDtFmt = '<span class="set-due-dt">'.__('Schedule it', true).'</span>';
                $csDueDate = '';
            }
        }
        if ($caseLegend == 3 || $caseLegend == 5) {
            $caseDetArr['Easycase']['completed_task'] = 100;
        }
        $caseDueDateInintial = $tz->GetDateTime(SES_TIMEZONE, TZ_GMT, TZ_DST, TZ_CODE, $caseDetArr['Easycase']['initial_due_date'], "datetime");
        if ($caseDueDateInintial != "NULL" && $caseDueDateInintial != "0000-00-00 00:00:00" && $caseDueDateInintial != "" && $caseDueDateInintial != "1970-01-01 00:00:00") {
            $csDuDtFmtInitial = $dt->dateFormatOutputdateTime_day($caseDueDateInintial, $curCreated, 'week');
        } else {
            $csDuDtFmtInitial = '--';
        }

        $caseDetArr['Easycase']['csDuDtFmtInitial'] = $csDuDtFmtInitial;
        $caseDetArr['Easycase']['csTdTyp'] = array($typeShortName, $typeName);
        $caseDetArr['Easycase']['csDuDtFmt'] = $csDuDtFmt;
        $caseDetArr['Easycase']['csDuDtFmtT'] = $csDuDtFmtT;
        $caseDetArr['Easycase']['csDueDate'] = $csDueDate;
        $friday = date('Y-m-d', strtotime($curCreated . "next Friday"));
        $monday = date('Y-m-d', strtotime($curCreated . "next Monday"));
        $tomorrow = date('Y-m-d', strtotime($curCreated . "+1 day"));
        $caseDetArr['intCurCreated'] = strtotime($curCreated);
        $caseDetArr['mdyCurCrtd'] = date('m/d/Y', strtotime($curCreated));
        $caseDetArr['mdyFriday'] = date('m/d/Y', strtotime($friday));
        $caseDetArr['mdyMonday'] = date('m/d/Y', strtotime($monday));
        $caseDetArr['mdyTomorrow'] = date('m/d/Y', strtotime($tomorrow));
        //fix the XSS issue
        //for kanban project detail needed
        $this->loadModel('Project');
        $pinf= $this->Project->find('first', array('conditions'=>array('Project.id'=>$caseDetArr['Easycase']['project_id']),'fields'=>array('Project.uniq_id','Project.name')));
        $caseDetArr['Easycase']['pjUniqid'] = $pinf['Project']['uniq_id'];
        $caseDetArr['Easycase']['pjname'] =  $pinf['Project']['name'];
        $caseDetArr['Easycase']['title'] = h($caseDetArr['Easycase']['title'], true, 'UTF-8');
        $caseDetArr['Easycase']['is_parent'] = $this->Easycase->checkParentTask($caseDetArr['Easycase']['id']);
        
        if (isset($caseDetArr[0]['sub_sub_task'])) {
            $caseDetArr['Easycase']['sub_sub_task'] = $caseDetArr[0]['sub_sub_task'];
        } else {
            $caseDetArr['Easycase']['sub_sub_task'] = null;
        }
        if (isset($caseDetArr[0]['is_sub_sub_task'])) {
            $caseDetArr['Easycase']['is_sub_sub_task'] = $caseDetArr[0]['is_sub_sub_task'];
        } else {
            $caseDetArr['Easycase']['is_sub_sub_task'] = null;
        }
        // Start fetch the Favourite Task in EasycaseFavourite table
        $EasycaseFavourite = ClassRegistry::init('EasycaseFavourite');
        $favouriteconditions = array('EasycaseFavourite.easycase_id'=>$caseDetArr['Easycase']['id'],'EasycaseFavourite.project_id'=>$caseDetArr['Easycase']['project_id'],'EasycaseFavourite.company_id'=>SES_COMP,'EasycaseFavourite.user_id'=>SES_ID);
        $easycase_favourite = $EasycaseFavourite->find('first', array('fields'=>array('EasycaseFavourite.id'),'conditions'=>$favouriteconditions));
        if (!empty($easycase_favourite['EasycaseFavourite']['id'])) {
            $caseDetArr['Easycase']['isFavourite'] = 1;
            $caseDetArr['Easycase']['favouriteColor'] = '#FFDC77';
        } else {
            $caseDetArr['Easycase']['isFavourite'] = 0;
            $caseDetArr['Easycase']['favouriteColor'] = '#888888';
        }
        if ($caseDetArr['Easycase']['custom_status_id']) {
            $Csts = ClassRegistry::init('CustomStatus');
            $csts_arr = $Csts->find('first', array('conditions'=>array('CustomStatus.id'=>$caseDetArr['Easycase']['custom_status_id'])));
            $caseDetArr['Easycase']['CustomStatus'] = $csts_arr['CustomStatus'];
            $caseDetArr['Easycase']['completed_task'] = $csts_arr['CustomStatus']['progress'];
        }
        $allCSByProj = $this->Format->getStatusByProject($caseDetArr['Easycase']['project_id']);
        $customStatusByProject = array();
        $lastCustomStatus = [];
        if (isset($allCSByProj)) {
            foreach ($allCSByProj as $k=>$v) {
                if (isset($v['StatusGroup']['CustomStatus'])) {
                    $lastCustomStatus['LastCS'] = end($v['StatusGroup']['CustomStatus']);
                    $customStatusByProject[$v['Project']['id']] = $v['StatusGroup']['CustomStatus'];
                }
            }
        }
        $caseDetArr['customStatusByProject'] = $customStatusByProject;
        $caseDetArr['lastCustomStatus'] = $lastCustomStatus;
        if ($caseDetArr['Easycase']['custom_status_id']) {
            $CustomStatus = ClassRegistry::init('CustomStatus');
            $sts_cond = array('CustomStatus.status_group_id'=>$caseDetArr['Easycase']['project_id']);
            $CustomStatusArr =  $CustomStatus->find('first', array('conditions'=>$sts_cond,'order'=>array('CustomStatus.seq'=>'DESC')));
            $max_custom_status = $CustomStatusArr['CustomStatus']['id'];
        } else {
            $max_custom_status = "3";
        }
        // End fetch the Favourite Task in EasycaseFavourite table
        $related_tasks = array();
        //$parent_task_id = array_filter(array($caseDetArr['Easycase']['id']=>$caseDetArr['Easycase']['parent_task_id']));
        //$related_tasks = !empty($parent_task_id) ? $this->Easycase->getSubTasks($parent_task_id) : array();
        $caseDetArr['related_tasks'] = $related_tasks;
        $field_name_arr = array("All", "Priority", "Updated", "Assigned to", "Status", "Due Date");
        $this->loadModel('TaskField');
        //$field_name_arr = array();
        $fields = $this->TaskField->find('first', array('conditions' => array('TaskField.user_id' => SES_ID)));
        if (!empty($fields)) {
            $field_name_arr = json_decode($fields['TaskField']['field_name'], true);
        }
        $caseDetArr['field_name_arr'] = $field_name_arr;
        $caseDetArr['pageHash'] = $pageHash;
        $caseDetArr['max_custom_status'] = $max_custom_status;
        
        $ProjectSetting = ClassRegistry::init('ProjectSetting');
        $velo = $ProjectSetting->find('first', array('conditions'=>array('ProjectSetting.project_id'=>$caseDetArr['Easycase']['project_id']),'fields'=>array('ProjectSetting.velocity_reports')));
        $velocity = (isset($velo['ProjectSetting']) && !empty($velo['ProjectSetting']))?$velo['ProjectSetting']['velocity_reports']:0;
        $caseDetArr['velocity'] = $velocity;
        unset($caseDetArr[0], $caseDetArr['EasycaseMilestone'], $caseDetArr['User']);
        $seconds= $caseDetArr['lt']['tot_spent_hour'];
        $caseDetArr['lt']['tot_spent_sec'] = $seconds;
        $hours = floor($seconds / 3600);
        $minutes = floor(($seconds / 60) % 60);
        $seconds = $seconds % 60;
        $caseDetArr['lt']['tot_spent_hour'] = $hours.' hrs '.$minutes.' mins';
        // pr($caseDetArr);exit;
        echo json_encode(array('caseDet' => $caseDetArr));
        exit;
    }

    public function ajax_convert_to_task($miles = null)
    {
        if (!empty($miles)) {
            $this->request->data = $miles;
        }
        $this->layout = 'ajax';
        $mid = $this->request->data['mid'];
        $project_id = $this->request->data['pid'];
        $project_UId = $this->request->data['puid'];
        $milestoneTitle = $this->Milestone->find('first', array('conditions' => array('Milestone.id' => $mid, 'Milestone.project_id' => $project_id, 'Milestone.company_id' => SES_COMP), 'fields' => array('Milestone.title')));
        $tskArr = array();
        $tskArr['project_id'] = $project_UId;
        $tskArr['title'] = $milestoneTitle['Milestone']['title'];
        $resArr = $this->quickTask($tskArr);
        if ($resArr['success'] == 1) {
            $this->Milestone->deleteAll(array('Milestone.id' => $mid, 'Milestone.project_id' => $project_id, 'Milestone.company_id' => SES_COMP));
        }
        if (!empty($miles)) {
            return $resArr;
        } else {
            echo json_encode($resArr);
            exit;
        }
    }

    public function case_taskgroup()
    {
        $this->layout = 'ajax';
        ############Decleration of Variables ###############
        $resCaseProj = array();
        $page_limit = TASK_GROUP_CASE_PAGE_LIMIT;
        $this->_datestime();
        $projUniq = $this->params->data['projFil']; // Project Uniq ID
        $projIsChange = $this->params->data['projIsChange']; // Project Uniq ID
        $caseStatus = $this->params->data['caseStatus']; // Filter by Status(legend)
        $caseCustomStatus = $this->params->data['caseCustomStatus']; // Filter by Status(legend)
        $priorityFil = $this->params->data['priFil']; // Filter by Priority
        $caseTypes = $this->params->data['caseTypes']; // Filter by case Types
        $caseLabel = $this->params->data['caseLabel']; // Filter by case Label
        $caseUserId = $this->params->data['caseMember']; // Filter by Member
        $caseComment = $this->params->data['caseComment']; // Filter by Member
        $caseAssignTo = $this->params->data['caseAssignTo']; // Filter by AssignTo
        $caseDate = $this->params->data['caseDate']; // Sort by Date
        $caseDueDate = $this->params->data['caseDueDate']; // Sort by Due Date
        $caseEstHours = $this->params->data['caseEstHours']; // Sort by Estimated Hours
        @$case_duedate = $this->params->data['case_due_date'];
        @$case_date = urldecode($this->params->data['case_date']);
        $caseSrch = $this->params->data['caseSearch']; // Search by keyword

        $casePage = $this->params->data['casePage']; // Pagination
        $caseUniqId = $this->params->data['caseId']; // Case Uniq ID to close a case
        $caseTitle = $this->params->data['caseTitle']; // Case Uniq ID to close a case
        $caseNum = $this->params->data['caseNum']; // Sort by Due Date
        $caseLegendsort = $this->params->data['caseLegendsort']; // Sort by Case Status
        $caseAtsort = $this->params->data['caseAtsort']; // Sort by Case Status
        $startCaseId = $this->params->data['startCaseId']; // Start Case
        $caseResolve = $this->params->data['caseResolve']; // Resolve Case
        $caseMenuFilters = $this->params->data['caseMenuFilters']; // Resolve Case
        $milestoneIds = $this->params->data['milestoneIds']; // Resolve Case
        $caseNew = $this->params->data['caseNew']; // New Case
        $caseCreateDate = $this->params->data['caseCreateDate']; // Sort by Created Date
        @$case_srch = $this->params->data['case_srch'];
        @$milestone_type = $this->params->data['mstype'];
        $changecasetype = $this->params->data['caseChangeType'];
        $caseChangeDuedate = $this->params->data['caseChangeDuedate'];
        $caseChangePriority = $this->params->data['caseChangePriority'];
        $caseChangeAssignto = $this->params->data['caseChangeAssignto'];
        $customfilterid = $this->params->data['customfilter'];
        $detailscount = $this->params->data['detailscount']; // Count number to open casedetails
        $searchMilestoneUid = $this->params->data['searchMilestoneUid']; // Search Milestone Unique Id wise
        $filterenabled = 0;
        $clt_sql = 1;
        if ($this->Auth->user('is_client') == 1) {
            $clt_sql = "((Easycase.client_status = " . $this->Auth->user('is_client') . " AND Easycase.user_id = " . $this->Auth->user('id') . ") OR Easycase.client_status != " . $this->Auth->user('is_client') . ")";
        }
        #######################Order By##################################
        // Order by
        $sortby = '';
        $caseStatusby = '';
        $caseUpdatedby = '';
        $casePriority = '';
        if (isset($_COOKIE['TASKSORTBY'])) {
            $sortby = $_COOKIE['TASKSORTBY'];
            $sortbygroup = $_COOKIE['TASKSORTBY2'];
            $sortorder = $_COOKIE['TASKSORTORDER'];
            $sortordergroup = $_COOKIE['TASKSORTORDER2'];
        } else {
            $sortorder = 'DESC';
        }
        $orderbyMilestone = '';
        if ($sortbygroup == 'title') {
            $orderbyMilestone = "LTRIM(Milestone.title) " . $sortordergroup;
            $casegroupTitle = strtolower($sortordergroup);
        } else {
            $orderbyMilestone = "Milestone.id_seq ASC,EasycaseMilestone.m_order ASC";
        }

        if ($sortby == 'title') {
            // $orderby = "LTRIM(Easycase.title) " . $sortorder;
            $caseTitle = strtolower($sortorder);
        } elseif ($sortby == 'duedate') {
            $caseDueDate = strtolower($sortorder);
        //  $orderby = "Easycase.due_date " . $sortorder;
        } elseif ($sortby == 'estimatedhours') {
            $caseEstHours = strtolower($sortorder);
        //  $orderby = "Easycase.due_date " . $sortorder;
        } elseif ($sortby == 'caseno') {
            $caseNum = strtolower($sortorder);
        // $orderby = "Easycase.id " . $sortorder;
        } elseif ($sortby == 'caseAt') {
            $caseAtsort = strtolower($sortorder);
        // $orderby = "Assigned " . $sortorder;
        } elseif ($sortby == 'priority') {
            $casePriority = strtolower($sortorder);
        // $orderby = "Easycase.priority " . $sortorder;
        } elseif ($sortby == 'status') {
            $caseStatusby = strtolower($sortorder);
        //   $orderby = "Easycase.legend " . $sortorder;
        } else {
            $caseUpdatedby = strtolower($sortorder);
            //$orderby = "Easycase.dt_created DESC";
            //   $orderby=" Milestone.id_seq ASC,EasycaseMilestone.m_order ASC ";
        }
        #pr ($orderby);exit;
        #################End of Order by#################################
        ######## get project ID from project uniq-id ################
        $curProjId = null;
        $curProjShortName = null;
        if ($projUniq != 'all') {
            $this->loadModel('ProjectUser');
            $this->ProjectUser->bindModel(array('belongsTo' => array('Project')));
            $projArr = $this->ProjectUser->find('first', array('conditions' => array('Project.uniq_id' => $projUniq, 'ProjectUser.user_id' => SES_ID, 'Project.isactive' => 1, 'ProjectUser.company_id' => SES_COMP), 'fields' => array('Project.id', 'Project.short_name', 'ProjectUser.id')));
            if (count($projArr)) {
                $curProjId = $projArr['Project']['id'];
                $curProjShortName = $projArr['Project']['short_name'];


                if ($projIsChange != $projUniq) {
                    $ProjectUser['id'] = $projArr['ProjectUser']['id'];
                    $ProjectUser['dt_visited'] = GMT_DATETIME;
                    $this->ProjectUser->save($ProjectUser);
                }
            }
        }
        ######## End of  project ID from project uniq-id ################
        ##########Set the result array for search and pagination variables ##################
        $resCaseProj['page_limit'] = $page_limit;
        $resCaseProj['csPage'] = $casePage;
        //$resCaseProj['caseUrl'] = $caseUrl;
        $resCaseProj['projUniq'] = $projUniq;
        $resCaseProj['csdt'] = $caseDate;
        $resCaseProj['csTtl'] = $caseTitle;
        $resCaseProj['csTtl2'] = $casegroupTitle;
        $resCaseProj['csDuDt'] = $caseDueDate;
        $resCaseProj['csEstHrsSrt'] = $caseEstHours;
        $resCaseProj['csCrtdDt'] = $caseCreateDate;
        $resCaseProj['csNum'] = $caseNum;
        $resCaseProj['csLgndSrt'] = $caseLegendsort;
        $resCaseProj['csAtSrt'] = $caseAtsort;


        $resCaseProj['csPriSrt'] = $casePriority;
        $resCaseProj['csStusSrt'] = $caseStatusby;
        $resCaseProj['csUpdatSrt'] = $caseUpdatedby;

        $resCaseProj['caseMenuFilters'] = $caseMenuFilters;
        $resCaseProj['filterenabled'] = $filterenabled;
        ##########End the result array for search and pagination variables ##################
        ################Filter Starts#################################
        $qry = '';
        $all_rest = '';
        $qry_rest = '';
        $searchMilestone = "";
        #######################Search by filter Date#######################
        if (!$this->Format->isAllowed('View All Task', $roleAccess)) {
            $qry.= " AND (Easycase.assign_to=" . SES_ID . " OR Easycase.user_id=".SES_ID.")";
        }
        if (trim($case_date) != "") {
            $frmTz = '+00:00';
            $toTz = $this->Tmzone->getGmtTz(TZ_GMT, TZ_DST);
            $GMT_DATE =$this->Tmzone->GetDateTime(SES_TIMEZONE, TZ_GMT, TZ_DST, TZ_CODE, GMT_DATETIME, "datetime");
            
            if (trim($case_date) == 'one') {
                $one_date = date('Y-m-d H:i:s', strtotime($GMT_DATE) - 3600);
                $qry.= " AND CONVERT_TZ(Easycase.dt_created,'".$frmTz."','".$toTz."') >='" . $one_date . "'";
            } elseif (trim($case_date) == '24') {
                $filterenabled = 1;
                $day_date = date("Y-m-d H:i:s", strtotime($GMT_DATE. " -1 day"));
                $qry.= " AND CONVERT_TZ(Easycase.dt_created,'".$frmTz."','".$toTz."') >='" . $day_date . "'";
            } elseif (trim($case_date) == 'week') {
                $filterenabled = 1;
                $week_date = date("Y-m-d H:i:s", strtotime($GMT_DATE . " -1 week"));
                $qry.= " AND CONVERT_TZ(Easycase.dt_created,'".$frmTz."','".$toTz."') >='" . $week_date . "'";
            } elseif (trim($case_date) == 'month') {
                $filterenabled = 1;
                $month_date = date("Y-m-d H:i:s", strtotime($GMT_DATE . " -1 month"));
                $qry.= " AND CONVERT_TZ(Easycase.dt_created,'".$frmTz."','".$toTz."') >='" . $month_date . "'";
            } elseif (trim($case_date) == 'year') {
                $filterenabled = 1;
                $year_date = date("Y-m-d H:i:s", strtotime($GMT_DATE . " -1 year"));
                $qry.= " AND CONVERT_TZ(Easycase.dt_created,'".$frmTz."','".$toTz."') >='" . $year_date . "'";
            } elseif (strstr(trim($case_date), ":")) {
                $filterenabled = 1;
                $ar_dt = explode(":", trim($case_date));
                $frm_dt = $ar_dt['0'];
                $to_dt = $ar_dt['1'];
                //$qry.= " AND DATE(Easycase.dt_created) >= '" . date('Y-m-d H:i:s', strtotime($frm_dt)) . "' AND DATE(Easycase.dt_created) <= '" . date('Y-m-d H:i:s', strtotime($to_dt)) . "'";
                $qry.= " AND DATE(CONVERT_TZ(Easycase.dt_created,'".$frmTz."','".$toTz."')) >= '" . date('Y-m-d', strtotime($frm_dt)) . "' AND DATE(CONVERT_TZ(Easycase.dt_created,'".$frmTz."','".$toTz."')) <= '" . date('Y-m-d', strtotime($to_dt)) . "'";
            }
        }

        ##################Filter By Taskgroup Status###############
        if (isset($_COOKIE['TASKGROUP_FIL']) && $_COOKIE['TASKGROUP_FIL']) {
            if (trim($_COOKIE['TASKGROUP_FIL']) == 'active') {
                $searchMilestone.= " AND (Milestone.isactive ='1')";
            } elseif (trim($_COOKIE['TASKGROUP_FIL']) == 'completed') {
                $searchMilestone.= " AND (Milestone.isactive ='0')";
            }
        }
        #####################Filter By Case due date##############3##
        if (trim($case_duedate) != "") {
            $frmTz = '+00:00';
            $toTz = $this->Tmzone->getGmtTz(TZ_GMT, TZ_DST);
            $GMT_DATE =$this->Tmzone->GetDateTime(SES_TIMEZONE, TZ_GMT, TZ_DST, TZ_CODE, GMT_DATETIME, "date");
            if (trim($case_duedate) == '24') {
                $filterenabled = 1;
                $day_date = date("Y-m-d H:i:s", strtotime(date("Y-m-d H:i:s", strtotime(date("Y-m-d H:i:s"))) . " +1 day"));
                $qry.= " AND (DATE(CONVERT_TZ(Easycase.due_date,'".$frmTz."','".$toTz."')) ='" . $GMT_DATE . "')";
            } elseif (trim($case_duedate) == 'overdue') {
                $filterenabled = 1;
                $week_date = date("Y-m-d H:i:s", strtotime(date("Y-m-d H:i:s", strtotime(date("Y-m-d H:i:s"))) . " +1 week"));
                $qry .= " AND ( DATE(CONVERT_TZ(Easycase.due_date,'".$frmTz."','".$toTz."')) <'" . $GMT_DATE . "') AND (DATE(CONVERT_TZ(Easycase.due_date,'".$frmTz."','".$toTz."')) !='0000-00-00') AND (Easycase.legend !=3) ";
            } elseif (strstr(trim($case_duedate), ":") && trim($case_duedate) !== '0000-00-00 00:00:00') {
                $filterenabled = 1;
                $ar_dt = explode(":", trim($case_duedate));
                $frm_dt = $ar_dt['0'];
                $to_dt = $ar_dt['1'];
                $qry.= " AND DATE(CONVERT_TZ(Easycase.due_date,'".$frmTz."','".$toTz."')) >= '" . date('Y-m-d', strtotime($frm_dt)) . "' AND DATE(CONVERT_TZ(Easycase.due_date,'".$frmTz."','".$toTz."')) <= '" . date('Y-m-d', strtotime($to_dt)) . "'";
            }
        }
        ######### Filter by CaseUniqId ##########$qry = "";
        if (trim($caseUrl)) {
            $filterenabled = 1;
            $qry.= " AND Easycase.uniq_id='" . $caseUrl . "'";
        }
        $is_def_status_enbled = 0;
        ######### Filter by Custom Status ##########
        if (trim($caseCustomStatus) && $caseCustomStatus != "all") {
            $is_def_status_enbled = 1;
            $filterenabled = 1;
            $qry.= " AND (";
            $qry.= $this->Format->customStatusFilter($caseCustomStatus, $projUniq, $caseStatus, 1);
            $stsLegArr = $caseCustomStatus . "-" . "";
            $expStsLeg = explode("-", $stsLegArr);
        }
        ######### Filter by Status ##########
        if (trim($caseStatus) && $caseStatus != "all") {
            $filterenabled = 1;
            if (!$is_def_status_enbled) {
                $qry.= " AND (";
            } else {
                $qry.= " OR ";
            }
            $qry.= $this->Format->statusFilter($caseStatus, '', 1);
            $qry .= ")";
            $stsLegArr = $caseStatus . "-" . "";
            $expStsLeg = explode("-", $stsLegArr);
            if (!in_array("upd", $expStsLeg)) {
                $qry.= " AND Easycase.type_id !=10";
            }
        } else {
            if (trim($caseCustomStatus) && $caseCustomStatus != "all") {
                $qry .= ")";
            }
        }
        /*######### Filter by Status ##########
        if (trim($caseStatus) && $caseStatus != "all") {
            $filterenabled = 1;
            $qry.= $this->Format->statusFilter($caseStatus);
            $stsLegArr = $caseStatus . "-" . "";
            $expStsLeg = explode("-", $stsLegArr);
            if (!in_array("upd", $expStsLeg)) {
                $qry.= " AND Easycase.type_id !=10";
            }
        }*/
        ######### Filter by Case Types ##########
        if (trim($caseTypes) && $caseTypes != "all") {
            $qry.= $this->Format->typeFilter($caseTypes);
            $filterenabled = 1;
        }
        ######### Filter by Case Label ##########
        if (trim($caseLabel) && $caseLabel != "all") {
            $qry.= $this->Format->labelFilter($caseLabel, $curProjId, SES_COMP, SES_TYPE, SES_ID);
        }
        ######### Filter by Priority ##########
        if (trim($priorityFil) && $priorityFil != "all") {
            $qry.= $this->Format->priorityFilter($priorityFil, $caseTypes);
            $filterenabled = 1;
        }
        ######### Filter by Member ##########
        if (trim($caseUserId) && $caseUserId != "all") {
            $qry.= $this->Format->memberFilter($caseUserId);
            $filterenabled = 1;
        }
        ######### Filter by Member ##########
        if (trim($caseComment) && $caseComment != "all") {
            $qry.= $this->Format->commentFilter($caseComment, $curProjId, $case_date);
            $filterenabled = 1;
        }
        #########memberFilter Filter by AssignTo ##########
        if (trim($caseAssignTo) && $caseAssignTo != "all" && $caseAssignTo != "unassigned") {
            $qry.= $this->Format->assigntoFilter($caseAssignTo);
            $filterenabled = 1;
        } elseif (trim($caseAssignTo) == "unassigned") {
            $qry.= " AND Easycase.assign_to='0'";
            $filterenabled = 1;
        }
        ######### Filter by $caseMenuFilters ##########
        if ($caseMenuFilters == "assigntome") {
            $qry.= " AND (Easycase.assign_to=" . SES_ID . ")";
        } elseif ($caseMenuFilters == "favourite") {
            if ($projUniq != 'all') {
                $this->loadModel('ProjectUser');
                $this->ProjectUser->bindModel(array('belongsTo' => array('Project')));
                $projArr = $this->ProjectUser->find('first', array('conditions' => array('Project.uniq_id' => $projUniq, 'ProjectUser.user_id' => SES_ID, 'Project.isactive' => 1, 'ProjectUser.company_id' => SES_COMP), 'fields' => array('Project.id', 'Project.short_name', 'ProjectUser.id')));
                if (count($projArr)) {
                    $curProjId = $projArr['Project']['id'];
                    $curProjShortName = $projArr['Project']['short_name'];
                    $conditions = array('EasycaseFavourite.project_id'=>$curProjId,'EasycaseFavourite.company_id'=>SES_COMP,'EasycaseFavourite.user_id'=>SES_ID);
                    $this->loadModel('EasycaseFavourite');
                    $easycase_favourite = $this->EasycaseFavourite->find('list', array('fields'=>array('EasycaseFavourite.id','EasycaseFavourite.easycase_id'),'conditions'=>$conditions));
                    //if(!empty($easycase_favourite)){
                    $qry .= " AND Easycase.id IN('".implode("','", $easycase_favourite)."') ";
                    //}
                }
            } else {
                $conditions = array('EasycaseFavourite.company_id'=>SES_COMP,'EasycaseFavourite.user_id'=>SES_ID);
                $this->loadModel('EasycaseFavourite');
                $easycase_favourite = $this->EasycaseFavourite->find('list', array('fields'=>array('EasycaseFavourite.id','EasycaseFavourite.easycase_id'),'conditions'=>$conditions));
                // if(!empty($easycase_favourite)){
                $qry .= " AND Easycase.id IN('".implode("','", $easycase_favourite)."') ";
                // }
            }
        }
        ######### Filter by Delegate To ##########
        elseif ($caseMenuFilters == "delegateto") {
            $qry.= " AND Easycase.assign_to!=0 AND Easycase.assign_to!=" . SES_ID . " AND Easycase.user_id=" . SES_ID;
        } elseif ($caseMenuFilters == "closecase") {
            $qry.= " AND (Easycase.legend='3' OR Easycase.legend='5') AND Easycase.type_id !='10'";
        } elseif ($caseMenuFilters == "closedtasks") {
            $qry.= " AND (Easycase.legend='3' OR Easycase.legend='5') AND Easycase.type_id !='10'";
        } elseif ($caseMenuFilters == "overdue") {
            $cur_dt = date('Y-m-d H:i:s', strtotime(GMT_DATETIME));
            $qry.= " AND Easycase.due_date !='' AND Easycase.due_date != '0000-00-00 00:00:00' AND Easycase.due_date !='1970-01-01 00:00:00' AND Easycase.due_date < '" . $cur_dt . "' AND (Easycase.legend !=3) ";
        } elseif ($caseMenuFilters == "highpriority") {
            $qry.= " AND Easycase.priority ='0' ";
        } elseif ($caseMenuFilters == "newwip") {
            $qry.= " AND (Easycase.legend='1' OR Easycase.legend='2')  AND Easycase.type_id !='10'";
        } elseif ($caseMenuFilters == "openedtasks") {
            $qry.= " AND (Easycase.legend='1' OR Easycase.legend='2' OR Easycase.legend='4')  AND Easycase.type_id !='10'";
        }
        ######### Filter by Latest ##########
        elseif ($caseMenuFilters == "latest") {
            $filterenabled = 1;
            $qry_rest = $qry;
            $before = date('Y-m-d H:i:s', strtotime(GMT_DATETIME . "-2 day"));
            $all_rest = " AND Easycase.dt_created > '" . $before . "' AND Easycase.dt_created <= '" . GMT_DATETIME . "'";
            $qry_rest.= " AND Easycase.dt_created > '" . $before . "' AND Easycase.dt_created <= '" . GMT_DATETIME . "'";
        }
        if ($caseMenuFilters == "latest" && $projUniq != 'all') {
            $CaseCount3 = $this->Easycase->query("SELECT COUNT(Easycase.id) as count FROM easycases as Easycase WHERE istype='1' " . $cond_easycase_actuve . " AND Easycase.project_id='$curProjId' AND Easycase.project_id!=0  " . $searchcase . " " . trim($qry_rest));
            $CaseCount = $CaseCount3['0']['0']['count'];
            if ($CaseCount == 0) {
                $rest = $this->Easycase->query("SELECT dt_created FROM easycases WHERE project_id ='" . $curProjId . "' ORDER BY dt_created DESC LIMIT 0 , 1");
                @$sdate = explode(" ", @$rest[0]['easycases']['dt_created']);
                $qry.= " AND Easycase.dt_created >= '" . @$sdate[0] . "' AND Easycase.dt_created <= '" . GMT_DATETIME . "'";
            } else {
                $qry = $qry . $all_rest;
            }
        } elseif ($caseMenuFilters == "latest" && $projUniq == 'all') {
            $qry = $qry . $all_rest;
        }

        #####Update status of tasks ###############
        ######### Close a Case ##########
        if ($changecasetype) {
            $caseid = $changecasetype;
        } elseif ($caseChangeDuedate) {
            $caseid = $caseChangeDuedate;
        } elseif ($caseChangePriority) {
            $caseid = $caseChangePriority;
        } elseif ($caseChangeAssignto) {
            $caseid = $caseChangeAssignto;
        }
        if ($caseid) {
            $checkStatus = $this->Easycase->query("SELECT legend FROM easycases WHERE id='" . $caseid . "' AND isactive='1'");
            if ($checkStatus['0']['easycases']['legend'] == 1) {
                $status = '<font color="#737373" style="font-weight:bold">Status:</font> <font color="#763532" style="font:normal 12px verdana;">NEW</font>';
            } elseif ($checkStatus['0']['easycases']['legend'] == 4) {
                $status = '<font color="#737373" style="font-weight:bold">Status:</font> <font color="#55A0C7" style="font:normal 12px verdana;">STARTED</font>';
            } elseif ($checkStatus['0']['easycases']['legend'] == 5) {
                $status = '<font color="#737373" style="font-weight:bold">Status:</font> <font color="#EF6807" style="font:normal 12px verdana;">RESOLVED</font>';
            } elseif ($checkStatus['0']['easycases']['legend'] == 3) {
                $status = '<font color="#737373" style="font-weight:bold">Status:</font> <font color="green" style="font:normal 12px verdana;">CLOSED</font>';
            }
        }

        //echo $startCaseId."---".$caseResolve."---".$caseUniqId."----".$caseNew;exit;
        $commonAllId = "";
        $caseid_list = '';
        if ($startCaseId) {
            $csSts = 1;
            $csLeg = 4;
            $acType = 2;
            $cuvtype = 4;
            $commonAllId = $startCaseId;
            $emailType = "Start";
            $msg = '<font color="#737373" style="font-weight:bold">Status:</font> <font color="#55A0C7" style="font:normal 12px verdana;">STARTED</font>';
            $emailbody = '<font color="#55A0C7" style="font:normal 12px verdana;">STARTED</font> the Task.';
        } elseif ($caseResolve) {
            $csSts = 1;
            $csLeg = 5;
            $acType = 3;
            $cuvtype = 5;
            $commonAllId = $caseResolve;
            $emailType = "Resolve";
            $msg = '<font color="#737373" style="font-weight:bold">Status:</font> <font color="#EF6807" style="font:normal 12px verdana;">RESOLVED</font>';
            $emailbody = '<font color="#EF6807" style="font:normal 12px verdana;">RESOLVED</font> the Task.';
        } elseif ($caseNew) {
            $csSts = 1;
            $csLeg = 1;
            $acType = 3;
            $cuvtype = 5;
            $commonAllId = $caseNew;
            $emailType = "New";
            $msg = '<font color="#737373" style="font-weight:bold">Status:</font> <font color="#EF6807" style="font:normal 12px verdana;">RESOLVED</font>';
            $emailbody = 'Changed the status of the task to<font color="#F08E83" style="font:normal 12px verdana;">NEW</font>.';
        } elseif ($caseUniqId) {
            $csSts = 2;
            $csLeg = 3;
            $acType = 1;
            $cuvtype = 3;
            $commonAllId = $caseUniqId;
            $emailType = "Close";
            $msg = '<font color="#737373" style="font-weight:bold">Status:</font> <font color="green" style="font:normal 12px verdana;">CLOSED</font>';
            $emailbody = '<font color="green" style="font:normal 12px verdana;">CLOSED</font> the Task.';
        } elseif ($changecasetype) {
            $csSts = 1;
            $csLeg = 4;
            $acType = 2;
            $cuvtype = 4;
            $commonAllId = $changecasetype;
            $emailType = "Change Type";
            $caseChageType1 = 1;
            $msg = $status;
            $emailbody = '<font color="#55A0C7" style="font:normal 12px verdana;">changed the type of</font> the Task.';
        } elseif ($caseChangeDuedate) {
            $csSts = 1;
            $csLeg = 4;
            $acType = 2;
            $cuvtype = 4;
            $commonAllId = $caseChangeDuedate;
            $emailType = "Change Duedate";
            $caseChageDuedate1 = 3;
            $msg = $status;
            $emailbody = '<font color="#55A0C7" style="font:normal 12px verdana;">changed the due date of</font> the Task.';
        } elseif ($caseChangePriority) {
            $csSts = 1;
            $csLeg = 4;
            $acType = 2;
            $cuvtype = 4;
            $commonAllId = $caseChangePriority;
            $emailType = "Change Priority";
            $caseChagePriority1 = 2;
            $msg = $status;
            $emailbody = '<font color="#55A0C7" style="font:normal 12px verdana;">changed the priority of</font> the Task.';
        } elseif ($caseChangeAssignto) {
            $csSts = 1;
            $csLeg = 4;
            $acType = 2;
            $cuvtype = 4;
            $commonAllId = $caseChangeAssignto;
            $emailType = "Change Assignto";
            $caseChangeAssignto1 = 4;
            $msg = $status;
            $emailbody = '<font color="#55A0C7" style="font:normal 12px verdana;">changed the assigned to of</font> the Task.';
        }
        if ($commonAllId) {
            $commonAllId = $commonAllId . ",";
            $commonArrId = explode(",", $commonAllId);
            $done = 1;
            if ($caseChageType1 || $caseChageDuedate1 || $caseChagePriority1 || $caseChangeAssignto1) {
            } else {
                foreach ($commonArrId as $commonCaseId) {
                    if (trim($commonCaseId)) {
                        /* dependency check start */
                        $allowed = "Yes";
                        $depends = $this->Easycase->find('first', array('conditions' => array('id' => $commonCaseId)));
                        if (is_array($depends) && count($depends) > 0 && trim($depends['Easycase']['depends']) != '') {
                            $result = $this->Easycase->find('all', array('conditions' => array('id IN (' . $depends['Easycase']['depends'] . ')')));
                            if (is_array($result) && count($result) > 0) {
                                foreach ($result as $key => $parent) {
                                    if (($parent['Easycase']['status'] == 2 && $parent['Easycase']['legend'] == 3) || ($parent['Easycase']['legend'] == 3)) {
                                        // NO ACTION
                                    } else {
                                        $allowed = "No";
                                    }
                                }
                            }
                        }
                        /* dependency check end */
                        if ($allowed == 'No') {
                            $resCaseProj['errormsg'] = __('Dependant tasks are not closed.', true);
                        } else {
                            $done = 1;
//                            $checkSts = $this->Easycase->query("SELECT legend FROM easycases WHERE id='" . $commonCaseId . "' AND isactive='1'");
//                            if (isset($checkSts['0']) && count($checkSts['0']) > 0) {
//                                if ($checkSts['0']['easycases']['legend'] == 3) {
//                                    $done = 0;
//                                }
//                                if ($csLeg == 4) {
//                                    if ($checkSts['0']['easycases']['legend'] == 4) {
//                                        $done = 0;
//                                    }
//                                }
//                                if ($csLeg == 5) {
//                                    if ($checkSts['0']['easycases']['legend'] == 5) {
//                                        $done = 0;
//                                    }
//                                }
//                            } else {
//                                $done = 0;
//                            }
                            if ($done) {
                                $caseid_list .= $commonCaseId . ',';
                                $caseDataArr = $this->Easycase->find('first', array('conditions' => array('Easycase.id' => $commonCaseId), 'fields' => array('Easycase.id', 'Easycase.case_no', 'Easycase.project_id', 'Easycase.type_id', 'Easycase.priority', 'Easycase.title', 'Easycase.uniq_id', 'Easycase.assign_to')));

                                $caseStsId = $caseDataArr['Easycase']['id'];
                                $caseStsNo = $caseDataArr['Easycase']['case_no'];
                                $closeStsPid = $caseDataArr['Easycase']['project_id'];
                                $closeStsTyp = $caseDataArr['Easycase']['type_id'];
                                $closeStsPri = $caseDataArr['Easycase']['priority'];
                                $closeStsTitle = $caseDataArr['Easycase']['title'];
                                $closeStsUniqId = $caseDataArr['Easycase']['uniq_id'];
                                $caUid = $caseDataArr['Easycase']['assign_to'];

                                $this->Easycase->query("UPDATE easycases SET case_no='" . $caseStsNo . "',updated_by='" . SES_ID . "',case_count=case_count+1, project_id='" . $closeStsPid . "', type_id='" . $closeStsTyp . "', priority='" . $closeStsPri . "', status='" . $csSts . "', legend='" . $csLeg . "', dt_created='" . GMT_DATETIME . "' WHERE id=" . $caseStsId . " AND isactive='1'");

                                /* Delete previous RA **/
                                if ($this->Format->isResourceAvailabilityOn() && $csLeg == 3) {
                                    foreach ($casearr as $casek=>$casev) {
                                        $this->Format->delete_booked_hours(array('easycase_id' => $caseStsId, 'project_id' =>$closeStsPid));
                                    }
                                }
                                /* End */
                                $caseuniqid = $this->Format->generateUniqNumber();
                                $this->Easycase->query("INSERT INTO easycases SET uniq_id='" . $caseuniqid . "', user_id='" . SES_ID . "', format='2', istype='2', actual_dt_created='" . GMT_DATETIME . "', case_no='" . $caseStsNo . "', project_id='" . $closeStsPid . "', type_id='" . $closeStsTyp . "', priority='" . $closeStsPri . "', status='" . $csSts . "', legend='" . $csLeg . "', dt_created='" . GMT_DATETIME . "'");
                                //$thisCaseId = mysql_insert_id();
                                //socket.io implement start

                                $this->ProjectUser->recursive = -1;
                                $getUser = $this->ProjectUser->query("SELECT user_id FROM project_users WHERE project_id='" . $closeStsPid . "'");
                                $prjuniq = $this->Project->query("SELECT uniq_id, short_name FROM projects WHERE id='" . $closeStsPid . "'");
                                $prjuniqid = $prjuniq[0]['projects']['uniq_id']; //print_r($prjuniq);
                                $projShName = strtoupper($prjuniq[0]['projects']['short_name']);
                                $channel_name = $prjuniqid;
                                //$pname = $this->Format->getProjectName($closeStsPid);
                                //$msg = "'Case Started in ".$pname."'";
                                if ($csLeg == 3) {
                                    //on close of parent task close all children tasks
                                    $child_tasks = $this->Easycase->getSubTaskChild($commonCaseId, $caseDataArr['Easycase']['project_id']);
                                    if ($child_tasks) {
                                        $this->closerecursiveTaskFrmList($child_tasks['data'], $prjuniq);
                                    }
                                }
                                $msgpub = 'Updated.~~' . SES_ID . '~~' . $caseStsNo . '~~' . 'UPD' . '~~' . $closeStsTitle . '~~' . $projShName;
                                if (!stristr(HTTP_ROOT, 'payzilla.in') && !stristr(HTTP_ROOT, 'orangegigs.com')) {
                                    $resCaseProj['iotoserver']= array('channel' => $channel_name, 'message' => $msgpub);
                                    //$this->Postcase->iotoserver(array('channel' => $channel_name, 'message' => $msgpub));
                                    //socket.io implement end
                                }

                                $CaseActivity = ClassRegistry::init('CaseActivity');
                                $CaseActivity->recursive = -1;
                                $CaseAct['easycase_id'] = $thisCaseId;
                                $CaseAct['user_id'] = SES_ID;
                                $CaseAct['project_id'] = $closeStsPid;
                                $CaseAct['case_no'] = $caseStsNo;
                                $CaseAct['type'] = $csLeg;
                                $CaseAct['dt_created'] = GMT_DATETIME;
                                //$CaseActivity->saveAll($CaseAct);
                            }
                        }
                    }
                }
            }
            $_SESSION['email']['email_body'] = $emailbody;
            $_SESSION['email']['msg'] = $msg;
            if ($caseChageType1 == 1) {
                $caseid_list = $commonAllId;
            } elseif ($caseChagePriority1 == 2) {
                $caseid_list = $commonAllId;
            } elseif ($caseChageDuedate1 == 3) {
                $caseid_list = $commonAllId;
            } elseif ($caseChangeAssignto1 == 4) {
                $caseid_list = $commonAllId;
            }
            $email_notification = array('allfiles' => $allfiles, 'caseNo' => $caseStsNo, 'closeStsTitle' => $closeStsTitle, 'emailMsg' => $emailMsg, 'closeStsPid' => $closeStsPid, 'closeStsPri' => $closeStsPri, 'closeStsTyp' => $closeStsTyp, 'assignTo' => $assignTo, 'usr_names' => $usr_names, 'caseuniqid' => $caseuniqid, 'csType' => $emailType, 'closeStsPid' => $closeStsPid, 'caseStsId' => $caseStsId, 'caseIstype' => 5, 'caseid_list' => $caseid_list, 'caseUniqId' => $closeStsUniqId); // $caseuniqid

            $resCaseProj['email_arr'] = json_encode($email_notification);
        }
        #End of Update tasks#############
        ###############Searching Conditions ##############

        $searchMilestone_dflt = '';
        if (!empty($caseSrch)) {
            $searchcase = $this->Format->caseKeywordSearch($caseSrch, 'full');
            $qry .= $searchcase;
            $searchMilestone_dflt = $searchcase;
            $searchMilestone .= " AND (Milestone.title like '%" . $caseSrch . "%' OR EasycaseMilestone.milestone_id = Milestone.id) ";
        } elseif (!empty($searchMilestoneUid)) {
            $searchMilestone .= " AND Milestone.uniq_id='" . $searchMilestoneUid . "' ";
            $searchMilestone_dflt = " AND Easycase.uniq_id='" . $searchMilestoneUid . "' ";
        }
        #$searchMilestone .=$qry;
        ###############End of Searching Conditions ##############
        $page = $casePage;
        $limit1 = $page * $page_limit - $page_limit;
        $limit2 = $page_limit;
        $sql1 = " SELECT SQL_CALC_FOUND_ROWS ";
        $fields = " Milestone.*,EasycaseMilestone.milestone_id as mid, EasycaseMilestone.m_order,User.short_name,IF((Milestone.user_id =" . SES_ID . "),'Me',User.short_name) AS Assigned,EasycaseMilestone.cnt as count ,IF(EasycaseMilestone.cnt IS NULL,0,EasycaseMilestone.cnt) AS cnt ";
        $count = " COUNT(DISTINCT Milestone.id) as caseCount ";

        $sql2 = " FROM milestones AS Milestone LEFT JOIN users User ON Milestone.user_id=User.id "
                . "LEFT JOIN (SELECT count(*) as cnt , EM.milestone_id,EM.m_order from easycase_milestones as EM Left join easycases as Easycase ON EM.easycase_id=Easycase.id WHERE EM.project_id=".$curProjId." AND Easycase.isactive=1 AND  Easycase.istype=1 {$qry} GROUP BY EM.milestone_id ) as EasycaseMilestone ON Milestone.id=EasycaseMilestone.milestone_id ";
        $sql_default = " FROM milestones AS Milestone LEFT JOIN users User ON Milestone.user_id=User.id "
                . "LEFT JOIN (SELECT count(*) as cnt , EM.milestone_id,EM.m_order from easycase_milestones as EM Left join easycases as Easycase ON EM.easycase_id=Easycase.id  WHERE EM.project_id=".$curProjId." AND Easycase.isactive=1 AND  Easycase.istype=1 GROUP BY EM.milestone_id ) as EasycaseMilestone ON Milestone.id=EasycaseMilestone.milestone_id ";
        $where = " WHERE Milestone.project_id='" . $curProjId . "' ";
        $groupby = " GROUP BY Milestone.id ";

        #print $sql1.$fields.$sql2.$where.$searchMilestone.$groupby." ORDER BY ".$orderbyMilestone." LIMIT $limit1,$limit2";exit;
        $caseCount = $this->Milestone->query($sql1 . $count . $sql2 . $where);
        $resCaseProj['caseCount'] = $caseCount[0][0]['caseCount'];
        $resCaseProj['GrpBy'] = 'milestone';
        //$caseMenuFilters='milestone';
        $caseAll = $this->Milestone->query($sql1 . $fields . $sql2 . $where . $searchMilestone . $groupby . " ORDER BY " . $orderbyMilestone . " LIMIT $limit1,$limit2");
        $lastcount = count($caseAll);
        if ($lastcount) {
            foreach ($caseAll as $k => $v) {
                $caseAll[$k]['Milestone']['estimated_hours'] = $this->Format->formatTGMeta($v['Milestone']['estimated_hours'], 'est');
                $caseAll[$k]['Milestone']['start_date'] = $this->Format->formatTGMeta($v['Milestone']['start_date'], 'sdate');
                $caseAll[$k]['Milestone']['end_date'] = $this->Format->formatTGMeta($v['Milestone']['end_date'], 'edate');
            }
        }
        //pr($caseAll);exit;
        $caseAll[$lastcount]['Milestone']['id'] = 0;
        $caseAll[$lastcount]['Milestone']['uniq_id'] = 0;
        $caseAll[$lastcount]['Milestone']['project_id'] = $curProjId;
        $caseAll[$lastcount]['Milestone']['company_id'] = 0;
        $caseAll[$lastcount]['Milestone']['title'] = 'Default Task Group';
        $caseAll[$lastcount]['Milestone']['description'] = '';
        $caseAll[$lastcount]['Milestone']['user_id'] = '';
        $caseAll[$lastcount]['Milestone']['start_date'] = '';
        $caseAll[$lastcount]['Milestone']['end_date'] = '';
        $caseAll[$lastcount]['Milestone']['estimated_hours'] = '';
        $caseAll[$lastcount]['Milestone']['modified'] = '';
        $caseAll[$lastcount]['Milestone']['isactive'] = '1';
        $caseAll[$lastcount]['Milestone']['id_seq'] = '1';
        $caseAll[$lastcount]['EasycaseMilestone']['mid'] = 0;
        $caseAll[$lastcount]['User']['short_name'] = '';
        $caseAll[$lastcount][0]['Assigned'] = '';
        $cntdefault = $this->Easycase->query("select count(*) as cnt from easycases as Easycase left join easycase_milestones as EasycaseMilestone on Easycase.id=EasycaseMilestone.easycase_id left join milestones as Milestone on Milestone.id=EasycaseMilestone.milestone_id WHERE Easycase.id NOT in (select EasycaseMilestones.easycase_id from easycase_milestones as EasycaseMilestones WHERE EasycaseMilestones.project_id='" . $curProjId . "') and Easycase.isactive='1'and Easycase.istype='1' {$qry}  and  Easycase.project_id='" . $curProjId . "' $searchMilestone_dflt");

        $caseAll[$lastcount][0]['cnt'] = $cntdefault[0][0]['cnt'];
        $caseAll[$lastcount]['Milestone']['count_tasks'] = $cntdefault[0][0]['cnt'];
        # pr("select count(*) as cnt from easycases as Easycase left join easycase_milestones as EasycaseMilestone on Easycase.id=EasycaseMilestone.easycase_id left join milestones as Milestone on Milestone.id=EasycaseMilestone.milestone_id WHERE Easycase.id NOT in (select EasycaseMilestones.easycase_id from easycase_milestones as EasycaseMilestones WHERE EasycaseMilestones.project_id='".$curProjId."') and Easycase.isactive='1'and Easycase.istype='1' and  Easycase.project_id='".$curProjId."' $searchMilestone");exit;
        $m = array();
        $c = array();
        $mid = '';
        $caseAll_default = $this->Milestone->query($sql1 . $fields . $sql_default . $where . $groupby . " ORDER BY " . $orderbyMilestone . " LIMIT $limit1,$limit2");
        foreach ($caseAll_default as $k => $v) {
            $mid.= $v['Milestone']['id'] . ',';
            $m[$v['Milestone']['id']]['id'] = $v['Milestone']['id'];
            $m[$v['Milestone']['id']]['caseids'] = 0;
            $m[$v['Milestone']['id']]['totalcases'] = $v[0]['cnt'];
            $m[$v['Milestone']['id']]['title'] = $v['Milestone']['title'];
            $m[$v['Milestone']['id']]['project_id'] = $v['Milestone']['project_id'];
            $m[$v['Milestone']['id']]['end_date'] = $v['Milestone']['end_date'];
            $m[$v['Milestone']['id']]['uinq_id'] = $v['Milestone']['uniq_id'];
            $m[$v['Milestone']['id']]['isactive'] = $v['Milestone']['isactive'];
            $m[$v['Milestone']['id']]['user_id'] = $v['Milestone']['user_id'];
        }

        if ($mid) {
            $closed_cases = $this->Easycase->query("SELECT EasycaseMilestone.milestone_id,COUNT(Easycase.id) as totcase FROM easycase_milestones AS EasycaseMilestone LEFT JOIN easycases as Easycase ON   EasycaseMilestone.easycase_id=Easycase.id WHERE Easycase.istype='1' AND " . $clt_sql . " AND Easycase.isactive='1' AND Easycase.legend='3' AND EasycaseMilestone.milestone_id IN (" . trim($mid, ',') . ") GROUP BY  EasycaseMilestone.milestone_id");
            foreach ($closed_cases as $key => $val) {
                $c[$val['EasycaseMilestone']['milestone_id']]['totalclosed'] = $val[0]['totcase'];
            }
        }
        $view = new View($this);
        $tz = $view->loadHelper('Tmzone');
        $dt = $view->loadHelper('Datetime');
        $cq = $view->loadHelper('Casequery');
        $frmt = $view->loadHelper('Format');
        $frmtCaseAll = $this->Easycase->formatCases($caseAll, ($caseCount[0][0]['caseCount'] + 1), $caseMenuFilters, $c, $m, $projUniq, $usrDtlsArr, $frmt, $dt, $tz, $cq);
        $resCaseProj['all_milesto_names'] = $frmtCaseAll['caseAll']; //$caseAll;
        $pgShLbl = $frmt->pagingShowRecords($caseCount[0][0]['caseCount'], $page_limit, $casePage);
        $resCaseProj['pgShLbl'] = $pgShLbl;
        $resCaseProj['case_date'] = $case_date;
        $resCaseProj['caseStatus'] = $caseStatus;
        $resCaseProj['priorityFil'] = $priorityFil;
        $resCaseProj['caseTypes'] = $caseTypes;
        $resCaseProj['caseUserId'] = $caseUserId;
        $resCaseProj['caseComment'] = $caseComment;
        $resCaseProj['caseAssignTo'] = $caseAssignTo;
        $resCaseProj['case_duedate'] = $case_duedate;
        $resCaseProj['caseSrch'] = $caseSrch;
        $field_name_arr = array("All", "Priority", "Updated", "Assigned to", "Status", "Due Date");
        $this->loadModel('TaskField');
        $field_name_arr = array();
        $fields = $this->TaskField->find('first', array('conditions' => array('TaskField.user_id' => SES_ID)));
        if (!empty($fields)) {
            $field_name_arr = json_decode($fields['TaskField']['field_name'], true);
        }
        $allCSByProj = $this->Format->getStatusByProject($curProjId);
        $customStatusByProject = array();
        if (isset($allCSByProj)) {
            foreach ($allCSByProj as $k=>$v) {
                if (isset($v['StatusGroup']['CustomStatus'])) {
                    $customStatusByProject[$v['Project']['id']] = $v['StatusGroup']['CustomStatus'];
                }
            }
        }
        $resCaseProj['customStatusByProject'] = $customStatusByProject;
        $resCaseProj['curProjId'] = $curProjId;
        $resCaseProj['field_name_arr'] = $field_name_arr;
        $this->set('resCaseProj', json_encode($resCaseProj));
    }
    //Close all child tasks while closing from mass actions.
    public function closerecursiveTaskFrmList($easy_recs, $projdetl)
    {
        if ($easy_recs) {
            foreach ($easy_recs as $tk => $tv) {
                $caseStsId = $tv['Easycase']['id'];
                $caseStsNo = $tv['Easycase']['case_no'];
                $closeStsPid = $tv['Easycase']['project_id'];
                $closeStsTyp = $tv['Easycase']['type_id'];
                $closeStsPri = $tv['Easycase']['priority'];
                $closeStsTitle = $tv['Easycase']['title'];
                $closeStsUniqId = $tv['Easycase']['uniq_id'];
                $caUid = $tv['Easycase']['assign_to'];
                $csLeg = 3;
                $csSts = 2;
                $this->Easycase->query("UPDATE easycases SET case_no='" . $caseStsNo . "',updated_by='" . SES_ID . "',case_count=case_count+1, project_id='" . $closeStsPid . "', type_id='" . $closeStsTyp . "', priority='" . $closeStsPri . "', status='" . $csSts . "', legend='" . $csLeg . "', dt_created='" . GMT_DATETIME . "' WHERE id=" . $caseStsId . " AND isactive='1'");
                /* Delete previous RA **/
                if ($this->Format->isResourceAvailabilityOn() && $csLeg == 3) {
                    foreach ($casearr as $casek=>$casev) {
                        $this->Format->delete_booked_hours(array('easycase_id' => $caseStsId, 'project_id' =>$closeStsPid));
                    }
                }
                /* End */
                $caseuniqid = $this->Format->generateUniqNumber();
                $this->Easycase->query("INSERT INTO easycases SET uniq_id='" . $caseuniqid . "', user_id='" . SES_ID . "', format='2', istype='2', actual_dt_created='" . GMT_DATETIME . "', case_no='" . $caseStsNo . "', project_id='" . $closeStsPid . "', type_id='" . $closeStsTyp . "', priority='" . $closeStsPri . "', status='" . $csSts . "', legend='" . $csLeg . "', dt_created='" . GMT_DATETIME . "'");

                $prjuniqid = $projdetl[0]['projects']['uniq_id']; //print_r($prjuniq);
                $projShName = strtoupper($projdetl[0]['projects']['short_name']);
                $channel_name = $prjuniqid;
                $msgpub = 'Updated.~~' . SES_ID . '~~' . $caseStsNo . '~~' . 'UPD' . '~~' . $closeStsTitle . '~~' . $projShName;
                if (!stristr(HTTP_ROOT, 'payzilla.in') && !stristr(HTTP_ROOT, 'osnewui16.com')) {
                    $resCaseProj['iotoserver']= array('channel' => $channel_name, 'message' => $msgpub);
                }
            }
        }
    }
    public function loadTaskByMilestone()
    {
        $this->layout = 'ajax';
        $curProjId = $this->params->data['pid'];
        $mid = $this->params->data['mid'];

        $this->LoadModel('Milestone');
        ############Decleration of Variables ###############
        $resCaseProj = array();
        $this->_datestime();
        $projUniq = $this->params->data['projFil']; // Project Uniq ID
        $projIsChange = $this->params->data['projIsChange']; // Project Uniq ID
        $caseStatus = $this->params->data['caseStatus']; // Filter by Status(legend)
        $caseCustomStatus = $this->params->data['caseCustomStatus']; // Filter by Status(legend)
        $priorityFil = $this->params->data['priFil']; // Filter by Priority
        $caseTypes = $this->params->data['caseTypes']; // Filter by case Types
        $caseLabel = $this->params->data['caseLabel']; // Filter by case Label
        $caseUserId = $this->params->data['caseMember']; // Filter by Member
        $caseComment = $this->params->data['caseComment']; // Filter by Member
        $caseAssignTo = $this->params->data['caseAssignTo']; // Filter by AssignTo
        $caseDate = $this->params->data['caseDate']; // Sort by Date
        $caseDueDate = $this->params->data['caseDueDate']; // Sort by Due Date
        @$case_duedate = $this->params->data['case_due_date'];
        @$case_date = urldecode($this->params->data['case_date']);
        $caseSrch = $this->params->data['caseSearch']; // Search by keyword

        $casePage = $this->params->data['casePage']; // Pagination
        $caseUniqId = $this->params->data['caseId']; // Case Uniq ID to close a case
        $caseTitle = $this->params->data['caseTitle']; // Case Uniq ID to close a case
        $caseNum = $this->params->data['caseNum']; // Sort by Due Date
        $caseLegendsort = $this->params->data['caseLegendsort']; // Sort by Case Status
        $caseAtsort = $this->params->data['caseAtsort']; // Sort by Case Status
        $startCaseId = $this->params->data['startCaseId']; // Start Case
        $caseResolve = $this->params->data['caseResolve']; // Resolve Case
        $caseMenuFilters = $this->params->data['caseMenuFilters']; // Resolve Case
        $milestoneIds = $this->params->data['milestoneIds']; // Resolve Case
        $caseCreateDate = $this->params->data['caseCreateDate']; // Sort by Created Date
        @$case_srch = $this->params->data['case_srch'];
        @$milestone_type = $this->params->data['mstype'];
        $changecasetype = $this->params->data['caseChangeType'];
        $caseChangeDuedate = $this->params->data['caseChangeDuedate'];
        $caseChangePriority = $this->params->data['caseChangePriority'];
        $caseChangeAssignto = $this->params->data['caseChangeAssignto'];
        $customfilterid = $this->params->data['customfilter'];
        $detailscount = $this->params->data['detailscount']; // Count number to open casedetails
        $searchMilestoneUid = $this->params->data['searchMilestoneUid']; // Search Milestone Unique Id wise
        $filterenabled = 0;
        $clt_sql = 1;
        if ($this->Auth->user('is_client') == 1) {
            $clt_sql = "((Easycase.client_status = " . $this->Auth->user('is_client') . " AND Easycase.user_id = " . $this->Auth->user('id') . ") OR Easycase.client_status != " . $this->Auth->user('is_client') . ")";
        }
        #######################Order By##################################
        // Order by
        $sortby = '';
        $caseStatusby = '';
        $caseUpdatedby = '';
        $casePriority = '';
        if (isset($_COOKIE['TASKSORTBY'])) {
            $sortby = $_COOKIE['TASKSORTBY'];
            $sortorder = $_COOKIE['TASKSORTORDER'];
        } else {
            $sortorder = 'DESC';
        }

        if ($sortby == 'title') {
            $orderby = "LTRIM(Easycase.title) " . $sortorder;
            $caseTitle = strtolower($sortorder);
        } elseif ($sortby == 'duedate') {
            $caseDueDate = strtolower($sortorder);
            $orderby = "Easycase.due_date " . $sortorder;
        } elseif ($sortby == 'estimatedhours') {
            $caseEstHours = strtolower($sortorder);
            $orderby = "Easycase.estimated_hours " . $sortorder;
        } elseif ($sortby == 'caseno') {
            $caseNum = strtolower($sortorder);
            $orderby = "Easycase.id " . $sortorder;
        } elseif ($sortby == 'caseAt') {
            $caseAtsort = strtolower($sortorder);
            $orderby = "Assigned " . $sortorder;
        } elseif ($sortby == 'priority') {
            $casePriority = strtolower($sortorder);
            $orderby = "Easycase.priority " . $sortorder;
        } elseif ($sortby == 'status') {
            $caseStatusby = strtolower($sortorder);
            $orderby = "Easycase.legend " . $sortorder;
        } else {
            $caseUpdatedby = strtolower($sortorder);
            $orderby = " EasycaseMilestone.id_seq ASC, Easycase.seq_id ASC ";
        }
        #pr ($orderby);exit;
        #################End of Order by#################################
        ##########Set the result array for search and pagination variables ##################
        $resCaseProj['page_limit'] = $page_limit;
        $resCaseProj['csPage'] = $casePage;
        //$resCaseProj['caseUrl'] = $caseUrl;
        $resCaseProj['projUniq'] = $projUniq;
        $resCaseProj['csdt'] = $caseDate;
        $resCaseProj['csTtl'] = $caseTitle;
        $resCaseProj['csDuDt'] = $caseDueDate;
        $resCaseProj['csEstHrsSrt'] = $caseEstHours;
        $resCaseProj['csCrtdDt'] = $caseCreateDate;
        $resCaseProj['csNum'] = $caseNum;
        $resCaseProj['csLgndSrt'] = $caseLegendsort;
        $resCaseProj['csAtSrt'] = $caseAtsort;

        $resCaseProj['csPriSrt'] = $casePriority;
        $resCaseProj['csStusSrt'] = $caseStatusby;
        $resCaseProj['csUpdatSrt'] = $caseUpdatedby;

        $resCaseProj['caseMenuFilters'] = $caseMenuFilters;
        $resCaseProj['filterenabled'] = $filterenabled;
        ##########End the result array for search and pagination variables ##################
        ################Filter Starts#################################
        $qry = '';
        $all_rest = '';
        $qry_rest = '';
        if (!$this->Format->isAllowed('View All Task', $roleAccess)) {
            $qry.= " AND (Easycase.assign_to=" . SES_ID . " OR Easycase.user_id=".SES_ID.")";
        }
        #######################Search by filter Date#######################
        if (trim($case_date) != "") {
            $frmTz = '+00:00';
            $toTz = $this->Tmzone->getGmtTz(TZ_GMT, TZ_DST);
            $GMT_DATE =$this->Tmzone->GetDateTime(SES_TIMEZONE, TZ_GMT, TZ_DST, TZ_CODE, GMT_DATETIME, "datetime");
            
            if (trim($case_date) == 'one') {
                $one_date = date('Y-m-d H:i:s', strtotime($GMT_DATE) - 3600);
                $qry.= " AND CONVERT_TZ(Easycase.dt_created,'".$frmTz."','".$toTz."') >='" . $one_date . "'";
            } elseif (trim($case_date) == '24') {
                $filterenabled = 1;
                $day_date = date("Y-m-d H:i:s", strtotime($GMT_DATE. " -1 day"));
                $qry.= " AND CONVERT_TZ(Easycase.dt_created,'".$frmTz."','".$toTz."') >='" . $day_date . "'";
            } elseif (trim($case_date) == 'week') {
                $filterenabled = 1;
                $week_date = date("Y-m-d H:i:s", strtotime($GMT_DATE . " -1 week"));
                $qry.= " AND CONVERT_TZ(Easycase.dt_created,'".$frmTz."','".$toTz."') >='" . $week_date . "'";
            } elseif (trim($case_date) == 'month') {
                $filterenabled = 1;
                $month_date = date("Y-m-d H:i:s", strtotime($GMT_DATE . " -1 month"));
                $qry.= " AND CONVERT_TZ(Easycase.dt_created,'".$frmTz."','".$toTz."') >='" . $month_date . "'";
            } elseif (trim($case_date) == 'year') {
                $filterenabled = 1;
                $year_date = date("Y-m-d H:i:s", strtotime($GMT_DATE . " -1 year"));
                $qry.= " AND CONVERT_TZ(Easycase.dt_created,'".$frmTz."','".$toTz."') >='" . $year_date . "'";
            } elseif (strstr(trim($case_date), ":")) {
                $filterenabled = 1;
                $ar_dt = explode(":", trim($case_date));
                $frm_dt = $ar_dt['0'];
                $to_dt = $ar_dt['1'];
                //$qry.= " AND DATE(Easycase.dt_created) >= '" . date('Y-m-d H:i:s', strtotime($frm_dt)) . "' AND DATE(Easycase.dt_created) <= '" . date('Y-m-d H:i:s', strtotime($to_dt)) . "'";
                $qry.= " AND DATE(CONVERT_TZ(Easycase.dt_created,'".$frmTz."','".$toTz."')) >= '" . date('Y-m-d', strtotime($frm_dt)) . "' AND DATE(CONVERT_TZ(Easycase.dt_created,'".$frmTz."','".$toTz."')) <= '" . date('Y-m-d', strtotime($to_dt)) . "'";
            }
        }
        #####################Filter By Case due date##############3##
        if (trim($case_duedate) != "") {
            $frmTz = '+00:00';
            $toTz = $this->Tmzone->getGmtTz(TZ_GMT, TZ_DST);
            $GMT_DATE =$this->Tmzone->GetDateTime(SES_TIMEZONE, TZ_GMT, TZ_DST, TZ_CODE, GMT_DATETIME, "date");
            if (trim($case_duedate) == '24') {
                $filterenabled = 1;
                $day_date = date("Y-m-d H:i:s", strtotime(date("Y-m-d H:i:s", strtotime(date("Y-m-d H:i:s"))) . " +1 day"));
                $qry.= " AND (DATE(CONVERT_TZ(Easycase.due_date,'".$frmTz."','".$toTz."')) ='" . $GMT_DATE . "')";
            } elseif (trim($case_duedate) == 'overdue') {
                $filterenabled = 1;
                $week_date = date("Y-m-d H:i:s", strtotime(date("Y-m-d H:i:s", strtotime(date("Y-m-d H:i:s"))) . " +1 week"));
                $qry .= " AND ( DATE(CONVERT_TZ(Easycase.due_date,'".$frmTz."','".$toTz."')) <'" . $GMT_DATE . "') AND (DATE(CONVERT_TZ(Easycase.due_date,'".$frmTz."','".$toTz."')) !='0000-00-00') AND (Easycase.legend !=3) ";
            } elseif (strstr(trim($case_duedate), ":") && trim($case_duedate) !== '0000-00-00 00:00:00') {
                $filterenabled = 1;
                $ar_dt = explode(":", trim($case_duedate));
                $frm_dt = $ar_dt['0'];
                $to_dt = $ar_dt['1'];
                $qry.= " AND DATE(CONVERT_TZ(Easycase.due_date,'".$frmTz."','".$toTz."')) >= '" . date('Y-m-d', strtotime($frm_dt)) . "' AND DATE(CONVERT_TZ(Easycase.due_date,'".$frmTz."','".$toTz."')) <= '" . date('Y-m-d', strtotime($to_dt)) . "'";
            }
        }
        ######### Filter by CaseUniqId ##########$qry = "";
        if (trim($caseUrl)) {
            $filterenabled = 1;
            $qry.= " AND Easycase.uniq_id='" . $caseUrl . "'";
        }
        $is_def_status_enbled = 0;
        ######### Filter by Custom Status ##########
        if (trim($caseCustomStatus) && $caseCustomStatus != "all") {
            $is_def_status_enbled = 1;
            $filterenabled = 1;
            $qry.= " AND (";
            $qry.= $this->Format->customStatusFilter($caseCustomStatus, $projUniq, $caseStatus, 1);
            $stsLegArr = $caseCustomStatus . "-" . "";
            $expStsLeg = explode("-", $stsLegArr);
        }
        ######### Filter by Status ##########
        if (trim($caseStatus) && $caseStatus != "all") {
            $filterenabled = 1;
            if (!$is_def_status_enbled) {
                $qry.= " AND (";
            } else {
                $qry.= " OR ";
            }
            $qry.= $this->Format->statusFilter($caseStatus, '', 1);
            $qry .= ")";
            $stsLegArr = $caseStatus . "-" . "";
            $expStsLeg = explode("-", $stsLegArr);
            if (!in_array("upd", $expStsLeg)) {
                $qry.= " AND Easycase.type_id !=10";
            }
        } else {
            if (trim($caseCustomStatus) && $caseCustomStatus != "all") {
                $qry .= ")";
            }
        }
        /*######### Filter by Status ##########
        if (trim($caseStatus) && $caseStatus != "all") {
            $filterenabled = 1;
            $qry.= $this->Format->statusFilter($caseStatus);
            $stsLegArr = $caseStatus . "-" . "";
            $expStsLeg = explode("-", $stsLegArr);
            if (!in_array("upd", $expStsLeg)) {
                $qry.= " AND Easycase.type_id !=10";
            }
        }
                ######### Filter by Custom Status ##########
        if (trim($caseCustomStatus) && $caseCustomStatus != "all") {
            $filterenabled = 1;
            $qry.= $this->Format->customStatusFilter($caseCustomStatus, $projUniq, $caseStatus);
            $stsLegArr = $caseCustomStatus . "-" . "";
            $expStsLeg = explode("-", $stsLegArr);
        }*/
        ######### Filter by Case Types ##########
        if (trim($caseTypes) && $caseTypes != "all") {
            $qry.= $this->Format->typeFilter($caseTypes);
            $filterenabled = 1;
        }
        ######### Filter by Case Label ##########
        if (trim($caseLabel) && $caseLabel != "all") {
            $qry.= $this->Format->labelFilter($caseLabel, $curProjId, SES_COMP, SES_TYPE, SES_ID);
        }
        ######### Filter by Priority ##########
        if (trim($priorityFil) && $priorityFil != "all") {
            $qry.= $this->Format->priorityFilter($priorityFil, $caseTypes);
            $filterenabled = 1;
        }
        ######### Filter by Member ##########
        if (trim($caseUserId) && $caseUserId != "all") {
            $qry.= $this->Format->memberFilter($caseUserId);
            $filterenabled = 1;
        }
        ######### Filter by Member ##########
        if (trim($caseComment) && $caseComment != "all") {
            $qry.= $this->Format->commentFilter($caseComment, $curProjId, $case_date);
            $filterenabled = 1;
        }
        ######### Filter by AssignTo ##########
        if (trim($caseAssignTo) && $caseAssignTo != "all" && $caseAssignTo != "unassigned") {
            $qry.= $this->Format->assigntoFilter($caseAssignTo);
            $filterenabled = 1;
        } elseif (trim($caseAssignTo) == "unassigned") {
            $qry.= " AND Easycase.assign_to='0'";
            $filterenabled = 1;
        }

        ######### Filter by $caseMenuFilters ##########
        if ($caseMenuFilters == "assigntome") {
            $qry.= " AND (Easycase.assign_to=" . SES_ID . ")";
        } elseif ($caseMenuFilters == "favourite") {
            if ($projUniq != 'all') {
                $this->loadModel('ProjectUser');
                $this->ProjectUser->bindModel(array('belongsTo' => array('Project')));
                $projArr = $this->ProjectUser->find('first', array('conditions' => array('Project.uniq_id' => $projUniq, 'ProjectUser.user_id' => SES_ID, 'Project.isactive' => 1, 'ProjectUser.company_id' => SES_COMP), 'fields' => array('Project.id', 'Project.short_name', 'ProjectUser.id')));
                if (count($projArr)) {
                    $curProjId = $projArr['Project']['id'];
                    $curProjShortName = $projArr['Project']['short_name'];
                    $conditions = array('EasycaseFavourite.project_id'=>$curProjId,'EasycaseFavourite.company_id'=>SES_COMP,'EasycaseFavourite.user_id'=>SES_ID);
                    $this->loadModel('EasycaseFavourite');
                    $easycase_favourite = $this->EasycaseFavourite->find('list', array('fields'=>array('EasycaseFavourite.id','EasycaseFavourite.easycase_id'),'conditions'=>$conditions));
                    //if(!empty($easycase_favourite)){
                    $qry .= " AND Easycase.id IN('".implode("','", $easycase_favourite)."')";
                    //}
                }
            } else {
                $conditions = array('EasycaseFavourite.company_id'=>SES_COMP,'EasycaseFavourite.user_id'=>SES_ID);
                $this->loadModel('EasycaseFavourite');
                $easycase_favourite = $this->EasycaseFavourite->find('list', array('fields'=>array('EasycaseFavourite.id','EasycaseFavourite.easycase_id'),'conditions'=>$conditions));
                // if(!empty($easycase_favourite)){
                $qry .= " AND Easycase.id IN('".implode("','", $easycase_favourite)."')";
                // }
            }
        }
        ######### Filter by Delegate To ##########
        elseif ($caseMenuFilters == "delegateto") {
            $qry.= " AND Easycase.assign_to!=0 AND Easycase.assign_to!=" . SES_ID . " AND Easycase.user_id=" . SES_ID;
        } elseif ($caseMenuFilters == "closecase") {
            $qry.= " AND (Easycase.legend='3' OR Easycase.legend='5') AND Easycase.type_id !='10'";
        } elseif ($caseMenuFilters == "closedtasks") {
            $qry.= " AND (Easycase.legend='3' OR Easycase.legend='5') AND Easycase.type_id !='10'";
        } elseif ($caseMenuFilters == "overdue") {
            $cur_dt = date('Y-m-d H:i:s', strtotime(GMT_DATETIME));
            $qry.= " AND Easycase.due_date !='' AND Easycase.due_date != '0000-00-00 00:00:00' AND Easycase.due_date !='1970-01-01 00:00:00' AND Easycase.due_date < '" . $cur_dt . "' AND (Easycase.legend !=3) ";
        } elseif ($caseMenuFilters == "highpriority") {
            $qry.= " AND Easycase.priority ='0' ";
        } elseif ($caseMenuFilters == "newwip") {
            $qry.= " AND (Easycase.legend='1' OR Easycase.legend='2')  AND Easycase.type_id !='10'";
        } elseif ($caseMenuFilters == "openedtasks") {
            $qry.= " AND (Easycase.legend='1' OR Easycase.legend='2' OR Easycase.legend='4')  AND Easycase.type_id !='10'";
        }
        ######### Filter by Latest ##########
        elseif ($caseMenuFilters == "latest") {
            $filterenabled = 1;
            $qry_rest = $qry;
            $before = date('Y-m-d H:i:s', strtotime(GMT_DATETIME . "-2 day"));
            $all_rest = " AND Easycase.dt_created > '" . $before . "' AND Easycase.dt_created <= '" . GMT_DATETIME . "'";
            $qry_rest.= " AND Easycase.dt_created > '" . $before . "' AND Easycase.dt_created <= '" . GMT_DATETIME . "'";
        }
        if ($caseMenuFilters == "latest" && $projUniq != 'all') {
            $CaseCount3 = $this->Easycase->query("SELECT COUNT(Easycase.id) as count FROM easycases as Easycase WHERE istype='1' " . $cond_easycase_actuve . " AND Easycase.project_id='$curProjId' AND Easycase.project_id!=0  " . $searchcase . " " . trim($qry_rest));
            $CaseCount = $CaseCount3['0']['0']['count'];
            if ($CaseCount == 0) {
                $rest = $this->Easycase->query("SELECT dt_created FROM easycases WHERE project_id ='" . $curProjId . "' ORDER BY dt_created DESC LIMIT 0 , 1");
                @$sdate = explode(" ", @$rest[0]['easycases']['dt_created']);
                $qry.= " AND Easycase.dt_created >= '" . @$sdate[0] . "' AND Easycase.dt_created <= '" . GMT_DATETIME . "'";
            } else {
                $qry = $qry . $all_rest;
            }
        } elseif ($caseMenuFilters == "latest" && $projUniq == 'all') {
            $qry = $qry . $all_rest;
        }


        $searchMilestone = "";
        ###############Searching Conditions ##############

        if (!empty($caseSrch)) {
            $searchcase = $this->Format->caseKeywordSearch($caseSrch, 'full');
            $searchMilestone .= $searchcase;
        }
        $searchMilestone .=$qry;

        if ($mid) {
            $extra_where = " WHERE Easycase.isactive=1 AND Easycase.istype=1 AND EasycaseMilestone.project_id='{$curProjId}' AND EasycaseMilestone.milestone_id='{$mid}' " . $searchMilestone;
        } else {
            $extra_where = " WHERE Easycase.isactive=1 AND Easycase.istype=1 AND Easycase.project_id='{$curProjId}' AND Easycase.id NOT IN (select EasycaseMilestones.easycase_id from easycase_milestones as EasycaseMilestones WHERE EasycaseMilestones.project_id='" . $curProjId . "') " . $searchMilestone;
        }

        $sql = "SELECT SQL_CALC_FOUND_ROWS "
                . "Easycase.id,Easycase.uniq_id,Easycase.case_no,Easycase.case_count,Easycase.project_id,Easycase.user_id,Easycase.updated_by,Easycase.type_id,Easycase.priority,Easycase.title,Easycase.estimated_hours,Easycase.hours,Easycase.completed_task,Easycase.assign_to,Easycase.gantt_start_date,Easycase.due_date,Easycase.istype,Easycase.client_status,Easycase.format,Easycase.status,Easycase.legend,Easycase.is_recurring,Easycase.isactive,Easycase.dt_created,Easycase.actual_dt_created,Easycase.reply_type,Easycase.is_chrome_extension,Easycase.from_email,Easycase.depends,Easycase.children,Easycase.temp_est_hours,Easycase.seq_id,Easycase.parent_task_id,Easycase.custom_status_id,Easycase.story_point,Easycase.thread_count, "
                . "EasycaseMilestone.milestone_id as mid, "
                . "User.short_name, "
                . "IF((Easycase.assign_to =" . SES_ID . "),'Me',User.short_name) AS Assigned "
                . "FROM easycases AS Easycase "
                . "LEFT JOIN users User ON Easycase.assign_to=User.id "
                . "LEFT JOIN easycase_milestones EasycaseMilestone ON Easycase.id=EasycaseMilestone.easycase_id "
                . $extra_where
                . " ORDER BY " . $orderby;
        $caseAll_records = $this->Easycase->query($sql);
        #pr($sql);exit;
        /*         * *Manipulate results**** */
        if ($projUniq != 'all') {
            $usrDtlsAll = $this->ProjectUser->query("SELECT DISTINCT User.id, User.name, User.email, User.istype,User.email,User.short_name,User.photo FROM users as User,easycases as Easycase WHERE (Easycase.user_id=User.id || Easycase.updated_by=User.id || Easycase.assign_to=User.id) AND Easycase.project_id='" . $curProjId . "' AND Easycase.isactive='1' AND Easycase.istype IN('1','2') ORDER BY User.short_name");
            $allCSByProj = $this->Format->getStatusByProject($curProjId);
        } else {
            $usrDtlsAll = $this->ProjectUser->query("SELECT DISTINCT User.id, User.name, User.email, User.istype,User.email,User.short_name,User.photo FROM users as User,easycases as Easycase WHERE (Easycase.user_id=User.id || Easycase.updated_by=User.id || Easycase.assign_to=User.id) AND Easycase.project_id IN (SELECT ProjectUser.project_id FROM project_users AS ProjectUser,projects as Project WHERE ProjectUser.user_id=" . SES_ID . " AND ProjectUser.project_id=Project.id AND Project.isactive='1' AND ProjectUser.company_id='" . SES_COMP . "') AND Easycase.isactive='1' AND Easycase.istype IN('1','2') ORDER BY User.short_name");
            $allCSByProj = $this->Format->getStatusByProject('all');
        }
        $customStatusByProject = array();
        if (isset($allCSByProj) && !empty($allCSByProj)) {
            foreach ($allCSByProj as $k=>$v) {
                if (isset($v['StatusGroup']['CustomStatus'])) {
                    $customStatusByProject[$v['Project']['id']] = $v['StatusGroup']['CustomStatus'];
                }
            }
        }
        $resCaseProj['customStatusByProject'] = $customStatusByProject;
        $usrDtlsArr = array();
        $usrDtlsPrj = array();
        foreach ($usrDtlsAll as $ud) {
            $usrDtlsArr[$ud['User']['id']] = $ud;
        }
        $m = array();
        $clt_sql = 1;
        if ($this->Auth->user('is_client') == 1) {
            $clt_sql = "((Easycase.client_status = " . $this->Auth->user('is_client') . " AND Easycase.user_id = " . $this->Auth->user('id') . ") OR Easycase.client_status != " . $this->Auth->user('is_client') . ")";
        }
        //$caseMenuFilters = "milestone";
        $CaseCount = count($caseAll_records);

        foreach ($caseAll_records as $k => $v) {
            $m[$v['Milestone']['id']]['id'] = $v['EasycaseMilestone']['mid'];
            $m[$v['Milestone']['id']]['caseids'] = $v[0]['caseids'];
            $m[$v['Milestone']['id']]['totalcases'] = $v[0]['totalcases'];
            $m[$v['Milestone']['id']]['title'] = $v['Milestone']['title'];
            $m[$v['Milestone']['id']]['project_id'] = $v['Milestone']['project_id'];
            $m[$v['Milestone']['id']]['end_date'] = $v['Milestone']['end_date'];
            $m[$v['Milestone']['id']]['uinq_id'] = $v['Milestone']['uniq_id'];
            $m[$v['Milestone']['id']]['isactive'] = $v['Milestone']['isactive'];
            $m[$v['Milestone']['id']]['user_id'] = $v['Milestone']['user_id'];
        }

        $c = array();
        if ($mid) {
            $closed_cases = $this->Easycase->query("SELECT EasycaseMilestone.milestone_id,COUNT(Easycase.id) as totcase FROM easycase_milestones AS EasycaseMilestone LEFT JOIN easycases as Easycase ON   EasycaseMilestone.easycase_id=Easycase.id WHERE Easycase.istype='1' AND " . $clt_sql . " AND Easycase.isactive='1' AND Easycase.legend='3' AND EasycaseMilestone.milestone_id IN(" . trim($mid, ',') . ") GROUP BY  EasycaseMilestone.milestone_id");
            foreach ($closed_cases as $key => $val) {
                $c[$val['EasycaseMilestone']['milestone_id']]['totalclosed'] = $val[0]['totcase'];
            }
        }

        $view = new View($this);
        $tz = $view->loadHelper('Tmzone');
        $dt = $view->loadHelper('Datetime');
        $cq = $view->loadHelper('Casequery');
        $frmt = $view->loadHelper('Format');
        $frmtCaseAll = $this->Easycase->formatCases($caseAll_records, $CaseCount, $caseMenuFilters, $c, $m, $projUniq, $usrDtlsArr, $frmt, $dt, $tz, $cq);
        /*         * *End of manipulations**** */
        $resCaseProj['caseAll'] = $frmtCaseAll['caseAll'];
        $resCaseProj['task_parent_ids'] = array();

        $related_tasks = array();
        /*if (is_array($caseAll_records) && count($caseAll_records) > 0) {
            $parent_task_id = array_filter(Hash::combine($caseAll_records, '{n}.Easycase.id', '{n}.Easycase.parent_task_id'));
            $related_tasks = !empty($parent_task_id) ? $this->Easycase->getSubTasks($parent_task_id) : array();
        }*/
        $resCaseProj['related_tasks'] = $related_tasks;
        $curCreated = $tz->GetDateTime(SES_TIMEZONE, TZ_GMT, TZ_DST, TZ_CODE, GMT_DATETIME, "datetime");
        $friday = date('Y-m-d', strtotime($curCreated . "next Friday"));
        $monday = date('Y-m-d', strtotime($curCreated . "next Monday"));
        $tomorrow = date('Y-m-d', strtotime($curCreated . "+1 day"));

        $resCaseProj['intCurCreated'] = strtotime($curCreated);
        $resCaseProj['mdyCurCrtd'] = date('m/d/Y', strtotime($curCreated));
        $resCaseProj['mdyFriday'] = date('m/d/Y', strtotime($friday));
        $resCaseProj['mdyMonday'] = date('m/d/Y', strtotime($monday));
        $resCaseProj['mdyTomorrow'] = date('m/d/Y', strtotime($tomorrow));
        $resCaseProj['GrpBy'] = 'milestone';

        $milestoens = $this->Milestone->find('list', array('conditions' => array('Milestone.id' => $mid), 'fields' => array('Milestone.id', 'Milestone.isactive')));
        $resCaseProj['milesto_names']['mid'] = $mid;
        $resCaseProj['mid'] = $mid;
        $resCaseProj['milesto_names']['isactive'] = $milestoens[$mid];
        $field_name_arr = array("All", "Priority", "Updated", "Assigned to", "Status", "Due Date");
        $this->loadModel('TaskField');
        $field_name_arr = array();
        $fields = $this->TaskField->find('first', array('conditions' => array('TaskField.user_id' => SES_ID)));
        if (!empty($fields)) {
            $field_name_arr = json_decode($fields['TaskField']['field_name'], true);
        }
        $resCaseProj['field_name_arr'] = $field_name_arr;
        $this->set('resCaseProj', json_encode($resCaseProj));
    }

    public function saveFilter()
    {
        $this->layout = 'ajax';
        $this->loadModel('SearchFilter');
        $data['SearchFilter'] = $this->data['SearchFilter'];
        $json_arr = array();
        if ($data['SearchFilter']['create'] == 0) {
            $data['SearchFilter']['id'] = '';
            $data['SearchFilter']['name'] = trim($this->data['SearchFilter']['name']);
            /* Check the duplicate value of filter name */
            $cnt = $this->SearchFilter->find("count", array("conditions" => array("SearchFilter.name" => trim($this->data['SearchFilter']['name']), "SearchFilter.user_id" => SES_ID, "SearchFilter.company_id" => SES_COMP)));
            if ($cnt > 0) {
                $msg['type'] = 'error';
                $msg['message'] = __("Filter name already exists.", true);
                echo json_encode($msg);
                exit;
            }
            /* End of code */
        }
        $json_arr['PRIORITY'] = ($data['SearchFilter']['PRIORITY']) ? $data['SearchFilter']['PRIORITY'] : '';
        $json_arr['CS_TYPES'] = ($data['SearchFilter']['CS_TYPES']) ? $data['SearchFilter']['CS_TYPES'] : '';
        $json_arr['TASKLABEL'] = ($data['SearchFilter']['TASKLABEL']) ? $data['SearchFilter']['TASKLABEL'] : '';
        $json_arr['MEMBERS'] = ($data['SearchFilter']['MEMBERS']) ? $data['SearchFilter']['MEMBERS'] : '';
        $json_arr['COMMENTS'] = ($data['SearchFilter']['COMMENTS']) ? $data['SearchFilter']['COMMENTS'] : '';
        $json_arr['ASSIGNTO'] = ($data['SearchFilter']['ASSIGNTO']) ? $data['SearchFilter']['ASSIGNTO'] : '';
        $json_arr['DATE'] = ($data['SearchFilter']['DATE']) ? $data['SearchFilter']['DATE'] : '';
        $json_arr['DUE_DATE'] = ($data['SearchFilter']['DUE_DATE']) ? $data['SearchFilter']['DUE_DATE'] : '';
        $json_arr['TASKGROUP'] = ($data['SearchFilter']['TASKGROUP']) ? $data['SearchFilter']['TASKGROUP'] : '';
        $json_arr['TASKGROUP_FIL'] = ($_COOKIE['TASKGROUP_FIL']) ? $_COOKIE['TASKGROUP_FIL'] : '';
        $json_arr['STATUS'] = ($data['SearchFilter']['STATUS']) ? $data['SearchFilter']['STATUS'] : '';
        $json_arr['CUSTOM_STATUS'] = ($data['SearchFilter']['CUSTOM_STATUS']) ? $data['SearchFilter']['CUSTOM_STATUS'] : '';
        $data['SearchFilter']['json_array'] = json_encode($json_arr);
        $data['SearchFilter']['company_id'] = SES_COMP;
        $msg = array();
        if ($this->SearchFilter->save($data)) {
            $msg['type'] = 'success';
            if ($this->data['SearchFilter']['create'] == 0) {
                $msg['message'] = __("Filter saved successfully.", true);
            } else {
                $msg['message'] = __("Filter updated successfully.", true);
            }
            $msg['id'] = $this->SearchFilter->id;
        } else {
            $msg['type'] = 'error';
            $msg['message'] = __("Filter can't save. Please try again later.", true);
        }
        echo json_encode($msg);
        exit;
    }

    /*
     * show parent tasks of a Subtask     *
     */
    public function fetchParentTask()
    {
        $id = $this->data['id'];
        $uniqid = $this->data['uid'];
        $parent_task_id = $this->data['p_nt_uid'];
        $parents = $this->Easycase->getSubTasks($parent_task_id, $id);
        $ret_text = array();
        if ($parents) {
            $i = 0;
            foreach ($parents['task'] as $k => $v) {
                if ($this->Auth->user('is_client') != 1 || ($this->Auth->user('is_client') == 1 && $parents['data'][$k]['client_status'] != 1)) {
                    $ret_text['parent'][$i]['title'] = $v;
                    $ret_text['parent'][$i]['uid'] = $parents['data'][$k]['uniq_id'];
                    $ret_text['message'] = '';
                    $i++;
                }
            }
        }
        if (empty($ret_text)) {
            $ret_text['message'] = __('No parent present or parent has limited access.');
        }
        echo json_encode($ret_text);
        exit;
    }
    /*
     * show gantt depend and child tasks
     * */

    public function dependent_overview()
    {
        $id = $this->data['id'];
        $uniqid = $this->data['uid'];
        $mode = $this->data['mode'];
        $depends = explode(',', $this->data['deps']);
        $case = $this->Easycase->find('first', array('conditions' => array('id' => $id), 'fields' => array('project_id')));
        $project_id = $case['Easycase']['project_id'];
        $res = $this->Easycase->find('all', array('conditions' => array('Easycase.id' => $depends, 'Easycase.isactive' => '1', 'Easycase.legend !=' => '3', 'Easycase.project_id' => $project_id),
            'fields' => array('Easycase.id', 'Easycase.uniq_id', 'Easycase.title', 'Easycase.case_no', 'Easycase.legend'),
            'order' => array('Easycase.case_no ASC')));
        echo json_encode($res);
        exit;
    }

    /* By GKM
     * Show if action allowed on task
     */

    public function check_dependant_action_allowed()
    {
        $case_id = isset($this->data['cid']) && intval($this->data['cid']) > 0 ? $this->data['cid'] : 0;
        $action_allowed = 'Yes';
        if (intval($case_id) > 0) {
            $action_allowed = $this->task_dependency($case_id);
        }
        echo $action_allowed;
        exit;
    }

    public function inactive_project_task()
    {
        $request = new RequestsController;
        $proId = !empty($this->request->data['proId']) ? $this->request->data['proId'] : '';
        $page = !empty($this->request->data['page']) ? $this->request->data['page'] : '';
        $type = !empty($this->request->data['type']) ? $this->request->data['type'] : '';
        $cases = !empty($this->request->data['cases']) ? $this->request->data['cases'] : '';
        $csNum = !empty($this->request->data['csNum']) ? $this->request->data['csNum'] : '';
        $search_val = !empty($this->request->data['search_val']) ? $this->request->data['search_val'] : '';
        $records = $request->case_project(1, $proId, $page, $type, $cases, $csNum, $search_val, 'impFormart');
        $this->set('resCaseProj', json_encode($records));
    }

    public function inactive_case_details()
    {
        $proId = !empty($this->request->data['proId']) ? $this->request->data['proId'] : '';
        $id = !empty($this->request->data['id']) ? $this->request->data['id'] : '';
        $caseUniqId = !empty($this->request->data['caseUniqId']) ? $this->request->data['caseUniqId'] : '';
        $records = $this->case_details('', 1, $proId, $id, $caseUniqId);
        $records['is_inactive_case'] = 1;
        $this->set('caseDetail', json_encode($records));
    }

    public function view_comments()
    {
        if (!empty($this->data['uid'])) {
            $uid1 = $this->data['uid'];
            $task = $this->Easycase->find('first', array('conditions' => array('Easycase.uniq_id' => $uid1)));
            $comments_count = $this->Easycase->find('count', array('conditions' => array('Easycase.case_no' => $task['Easycase']['case_no'], 'Easycase.project_id' => $task['Easycase']['project_id'], 'Easycase.thread_count' => 0, 'Easycase.istype' => 2)));
            $comments = $this->Easycase->find('all', array('conditions' => array('Easycase.case_no' => $task['Easycase']['case_no'], 'Easycase.project_id' => $task['Easycase']['project_id'], 'Easycase.thread_count' => 0, 'Easycase.istype' => 2), 'limit' => '5'));
            $comment_arr = array();
            foreach ($comments as $key => $val) {
                $desp = $val["Easycase"]['message'];
                if (!empty($val["Easycase"]['project_id']) && !empty($val["Easycase"]['case_no'])) {
                    $query = "SELECT * FROM easycases as Easycase WHERE  id=" . $val["Easycase"]['id'] . " AND project_id='" . $val["Easycase"]['project_id'] . "' AND case_no=" . $val["Easycase"]['case_no'] . " AND istype='2' ORDER BY dt_created ASC";
                    $sqlcasedata = $this->Easycase->query($query);
                }
                $usrDtlsAll = $this->Easycase->getTaskUser($val["Easycase"]['project_id'], $val["Easycase"]['case_no']);
                $userArr = array();
                foreach ($usrDtlsAll as $ud) {
                    $userArr[$ud['User']['id']] = $ud;
                }
                $view = new View($this);
                $tz = $view->loadHelper('Tmzone');
                $dt = $view->loadHelper('Datetime');
                $cq = $view->loadHelper('Casequery');
                $frmt = $view->loadHelper('Format');
                $sqlcasedata = $this->Easycase->formatReplies($sqlcasedata, $userArr, $frmt, $cq, $tz, $dt);
                $desp = !empty($sqlcasedata['sqlcasedata']['0']["Easycase"]['replyCap']) ? strip_tags($sqlcasedata['sqlcasedata']['0']["Easycase"]['replyCap']) : '';
                $reply = !empty($sqlcasedata['sqlcasedata']['0']["Easycase"]['usrName']) ? strip_tags($sqlcasedata['sqlcasedata']['0']["Easycase"]['usrName']) : 'NA';
                if (empty($desp)) {
                    $desp = !empty($val["Easycase"]['message']) ? $val["Easycase"]['message'] : 'No Comment';
                }
                $comment_arr[$key]['id'] = $val["Easycase"]['id'];
                $comment_arr[$key]['comment'] = $desp;
                $comment_arr[$key]['username'] = $reply;
                $comment_arr[$key]['date_time'] = $sqlcasedata['sqlcasedata']['0']['Easycase']['rply_dt'];
                $comment_arr[$key]['count'] = $comments_count;
            }
//            $comment_arr['count'] = $comments_count;
            echo json_encode($comment_arr);
            exit;
        } else {
            echo 'failed';
            exit;
        }
    }

    public function kanbanview_comments()
    {
        $this->layout = '';
        if (!empty($this->data['uid'])) {
            $uid1 = $this->data['uid'];
            $task = $this->Easycase->find('first', array('conditions' => array('Easycase.uniq_id' => $uid1,'Easycase.istype' => 1,'Easycase.isactive' => 1,),'fields'=>array('Easycase.id','Easycase.case_no','Easycase.project_id')));
            $comments_cnt = 0;
            if ($task) {
                $c_cond = array('Easycase.case_no' => $task['Easycase']['case_no'], 'Easycase.project_id' => $task['Easycase']['project_id'], 'Easycase.istype' => 2,'OR'=>array('Easycase.message !=' =>'','Easycase.format !=' =>2) ,'Easycase.legend !='=>6);
                if ($this->Auth->user('is_client') == 1) {
                    //$clt_sql = ;
                    $c_cond['Easycase.client_status !='] = 1;
                }
                $comments = $this->Easycase->find('all', array('conditions' => $c_cond, 'limit' => '5')); //'Easycase.case_count' => 0,
                $reply_attach = $this->Easycase->getFilesInTasksCount($task['Easycase']['project_id'], $task['Easycase']['case_no'], 1);
                #pr($reply_attach);exit;
                if ($comments || $reply_attach) {
                    $usrDtlsAll = $this->Easycase->getTaskUser($task['Easycase']['project_id'], $task['Easycase']['case_no']);
                    if ($usrDtlsAll) {
                        $usrDtlsAll = Hash::combine($usrDtlsAll, '{n}.User.id', '{n}.User');
                    }
                    //$comments_count = $this->Easycase->find('count', array('conditions' => array('Easycase.case_no' => $task['Easycase']['case_no'], 'Easycase.project_id' => $task['Easycase']['project_id'],'Easycase.istype' => 2,'Easycase.mesage !=' =>'','Easycase.legend !=' =>6))); //'Easycase.case_count' => 0,
                    if ($comments) {
                        $comments_cnt = $this->Easycase->find('count', array('conditions' => $c_cond));
                        $view = new View($this);
                        $tz = $view->loadHelper('Tmzone');
                        $dt = $view->loadHelper('Datetime');
                        foreach ($comments as $key => $val) {
                            $desp = $val["Easycase"]['message'];
                            if (empty($desp) && $val["Easycase"]['format'] != 2) {
                                if (!isset($reply_attach[$val["Easycase"]['id']])) {
                                    continue;
                                }
                                $desp = 'Attached file(s): '.$reply_attach[$val["Easycase"]['id']];
                            }
                            if (empty($desp)) {
                                $desp = 'No Comment';
                            }
                            $caseDtActdT = $val['Easycase']['dt_created'];
                            $replyDt = $tz->GetDateTime(SES_TIMEZONE, TZ_GMT, TZ_DST, TZ_CODE, $caseDtActdT, "datetime");
                            $curDate = $tz->GetDateTime(SES_TIMEZONE, TZ_GMT, TZ_DST, TZ_CODE, GMT_DATETIME, "date");
                            $comment_arr[$key]['id'] = $val["Easycase"]['id'];
                            $comment_arr[$key]['comment'] = $desp;
                            $comment_arr[$key]['username'] = $usrDtlsAll[$val["Easycase"]['user_id']]['name'];
                            $comment_arr[$key]['date_time'] = $dt->dateFormatOutputdateTime_day($replyDt, $curDate);
                            //$comment_arr[$key]['count'] = $comments_count;
                        }
                    }
                }
            }
            $this->set(compact('comment_arr'));
            $this->set(compact('comments_cnt'));
            $is_client = 0;
            if ($this->Auth->user('is_client') == 1) {
                $is_client = 1;
            }
            $this->set(compact('is_client'));
            $this->set(compact('uid1'));
        }
    }
    public function case_activity_thread()
    {
        $this->layout = 'ajax';
        $caseId = $this->params->data['id'];
        $type = $this->params->data['type'];
        $sort_order = 'DESC';
        $sorting = $sort_order;
        ######## get case number from case uniq ID ################
        $cond2 = array(
            'conditions' => array('Easycase.isactive' => 1, 'Easycase.id' => $caseId),
            'fields' => array('DISTINCT Easycase.case_no', 'Easycase.uniq_id', 'Easycase.project_id', 'Easycase.isactive')
        );
        $getCaseNo = $this->Easycase->find('first', $cond2);
        if (count($getCaseNo)) {
            $curCaseNo = $getCaseNo['Easycase']['case_no'];
            $caseUniqId = $getCaseNo['Easycase']['uniq_id'];
            $ProjId = $getCaseNo['Easycase']['project_id'];
            $is_active = (intval($getCaseNo['Easycase']['isactive'])) ? 1 : 0;
        }

        $sqlcasedata = array();
        $getPostCase = array();
        if ($ProjId && $curCaseNo) {
            ######## get all cases
            if ($type =='more') {
                $query = "SELECT * FROM easycases as Easycase LEFT JOIN case_files as CaseFile ON CaseFile.easycase_id=Easycase.id  WHERE Easycase.project_id='" . $ProjId . "' AND Easycase.case_no=" . $curCaseNo . " AND Easycase.istype='2' AND  ((CaseFile.id IS NULL AND  Easycase.message = '') OR Easycase.legend='6') ORDER BY Easycase.dt_created " . $sorting;
            } else {
                $query = "SELECT * FROM easycases as Easycase LEFT JOIN case_files as CaseFile ON CaseFile.easycase_id=Easycase.id  WHERE Easycase.project_id='" . $ProjId . "' AND Easycase.case_no=" . $curCaseNo . " AND Easycase.istype='2' AND  ((CaseFile.id IS NULL AND  Easycase.message = '') OR Easycase.legend='6') ORDER BY Easycase.dt_created " . $sorting." LIMIT 0,10";
            }
            $sqlcasedata = $this->Easycase->query($query);
        }

        
        $usrDtlsAll = $this->Easycase->getTaskUser($ProjId, $curCaseNo);
        $userArr = array();
        foreach ($usrDtlsAll as $ud) {
            $userArr[$ud['User']['id']] = $ud;
        }
        ######## End get easycase case members ################
        //For json Feed
        $view = new View($this);
        $tz = $view->loadHelper('Tmzone');
        $dt = $view->loadHelper('Datetime');
        $cq = $view->loadHelper('Casequery');
        $frmt = $view->loadHelper('Format');
        $sqlcasedata = $this->Easycase->formatReplies($sqlcasedata, $userArr, $frmt, $cq, $tz, $dt);

        $replyDetail = array();
        $replyDetail['sqlcaseactivity'] = $sqlcasedata['sqlcasedata'];
        $replyDetail['csAtId'] = $caseId;
        $replyDetail['is_active'] = $is_active;
        echo json_encode($replyDetail);
        exit;
    }
    
    public function getLinkParentTitle($ecs_id, $frmt)
    {
        if (!empty($ecs_id)) {
            $isHasParent = $this->Easycase->find('first', array('conditions'=>array('Easycase.id'=>$ecs_id),'fields'=>array('Easycase.case_no','Easycase.title','Easycase.uniq_id')));
            if (count($isHasParent) > 0) {
                return $frmt->formatTitle($isHasParent['Easycase']['title']).'_||_'.$isHasParent['Easycase']['uniq_id'].'_||_'.$isHasParent['Easycase']['case_no'];
            }
            return array();
        }
    }
    public function getParentLinkTasks($task_id, $projUniq, $usrArr)
    {
        $this->loadModel('EasycaseLinking');
        $isHasParent = $this->EasycaseLinking->find('first', array('conditions'=>array('link_id'=>$task_id),'fields'=>array('easycase_id')));
        if (count($isHasParent) > 0) {
            $linkParentId = $isHasParent['EasycaseLinking']['easycase_id'];
            $easycaseDetails = $this->Easycase->find('first', array('conditions'=>array('id'=>$linkParentId),'fields'=>array('uniq_id')));
            $parentEasycaseUniqId = $easycaseDetails['Easycase']['uniq_id'];
            $parentDetails['parentEasycaseId'] = $linkParentId;
            $parentDetails['parentEasycaseUniqId'] = $parentEasycaseUniqId;
        } else {
            $parentDetails['parentEasycaseId'] = 0;
            $parentDetails['parentEasycaseUniqId'] = 0;
        }
        return $parentDetails;
    }
    public function spent_hour()
    {
        $this->layout = 'ajax';
        $project_uid = (isset($this->params->data['projid']) && !empty($this->params->data['projid'])) ? $this->params->data['projid'] : 'all';
        $cond = '';
        if ($project_uid != 'all') {
            $cond = "Project.uniq_id = '" . $project_uid . "' AND";
        }
        $projQry = " AND LogTime.project_id IN (SELECT ProjectUser.project_id FROM project_users AS ProjectUser,projects as Project WHERE " . $cond . " ProjectUser.user_id=" . SES_ID . " AND ProjectUser.company_id=" . SES_COMP . " AND ProjectUser.project_id=Project.id AND Project.isactive='1')";
        $count_sql = 'SELECT sum(total_hours) as secds '
                . 'FROM log_times AS `LogTime` '
                . "LEFT JOIN easycases AS Easycase ON Easycase.id=LogTime.task_id AND LogTime.project_id=Easycase.project_id "
                . 'WHERE Easycase.isactive =1 AND LogTime.user_id= ' . SES_ID . ' AND LogTime.task_date > (task_date -(60*60*24*7)) ' . $projQry . ' ' . $clt_sql . '  ';
        $cntlog = $this->LogTime->query($count_sql);
        $totalhours = $cntlog[0][0]['secds'];
        $view = new View($this);
        $frmt = $view->loadHelper('Format');
        $spent_hours = $frmt->format_time_hr_min($totalhours) != '' ? $frmt->format_time_hr_min($totalhours) : '00 hrs & 00 mins';
        echo json_encode(array('sts_msg' => 'success', 'spent_hours' => $spent_hours));
        exit;
    }

    /** In this method user get his task according to the conditions
     * i.User belongs to the company.
      ii.Projects which have user added in with active project.
      iii.Task(s) that is assigned to the user with active task.
      iv.Task status is New & In Progress.
      v.If the user is client then use the client condition.
     */
    public function my_tasks()
    {
        $project_uid = (isset($this->params->data['projid']) && !empty($this->params->data['projid'])) ? $this->params->data['projid'] : 'all';
        $page_limit = CASE_PAGE_LIMIT;
        $page = 1;
        $limit1 = $page * $page_limit - $page_limit;
        $limit2 = $page_limit;
        $searchcase = " AND Easycase.assign_to=" . SES_ID . " AND Easycase.legend IN(1,2,4)";
        $clt_sql = "1";
        if ($this->Auth->user('is_client') == 1) {
            $clt_sql = "((Easycase.client_status = " . $this->Auth->user('is_client') . " AND Easycase.user_id = " . $this->Auth->user('id') . ") OR Easycase.client_status != " . $this->Auth->user('is_client') . ")";
        }
        $cond_easycase_actuve = " AND Easycase.isactive=1";
        $qry = "";
        if ($project_uid != 'all') {
            $this->ProjectUser->bindModel(array('belongsTo' => array('Project')));
            $projArr = $this->ProjectUser->find('first', array('conditions' => array('Project.uniq_id' => $project_uid, 'ProjectUser.user_id' => SES_ID, 'ProjectUser.company_id' => SES_COMP), 'fields' => array('Project.id', 'Project.short_name', 'Project.name', 'ProjectUser.id')));
            if (count($projArr)) {
                $curProjId = $projArr['Project']['id'];
            }
            $req_sql = "SELECT SQL_CALC_FOUND_ROWS Easycase.*,User.short_name,IF((Easycase.assign_to =" . SES_ID . "),'Me',User.short_name) AS Assigned FROM ( SELECT * FROM easycases as Easycase WHERE istype='1' AND " . $clt_sql . " " . $cond_easycase_actuve . " AND Easycase.project_id='$curProjId' AND Easycase.project_id<>0  " . $searchcase . " " . trim($qry) . " ) AS Easycase LEFT JOIN users User ON Easycase.assign_to=User.id ORDER BY Easycase.dt_created DESC LIMIT $limit1,$limit2";
        } else {
            $req_sql = "SELECT SQL_CALC_FOUND_ROWS Easycase.*,User.short_name,IF((Easycase.assign_to =" . SES_ID . "),'Me',User.short_name) AS Assigned FROM ( SELECT * FROM easycases as Easycase WHERE Easycase.istype='1' AND " . $clt_sql . " " . $cond_easycase_actuve . " AND Easycase.project_id!=0 AND Easycase.project_id IN (SELECT ProjectUser.project_id FROM project_users AS ProjectUser,projects as Project WHERE ProjectUser.user_id=" . SES_ID . " AND ProjectUser.project_id=Project.id AND Project.isactive='1' AND ProjectUser.company_id='" . SES_COMP . "') " . $searchcase . " " . trim($qry) . "  ORDER BY  Easycase.project_id DESC) AS Easycase LEFT JOIN users User ON Easycase.assign_to=User.id ORDER BY Easycase.dt_created DESC  LIMIT $limit1,$limit2";
        }
        $caseAll = $this->Easycase->query($req_sql);
        $tot = $this->Easycase->query("SELECT FOUND_ROWS() as total");
        $CaseCount = !empty($tot[0][0]['total']) ? $tot[0][0]['total'] : 0;
        $caseMenuFilters = '';
        $usrDtlsAll = null;
        if (!empty($caseAll)) {
            $ecs_updated_by = Hash::extract($caseAll, '{n}.Easycase.updated_by');
            $ecs_user_id = Hash::extract($caseAll, '{n}.Easycase.user_id');
            $ecs_assign_to = Hash::extract($caseAll, '{n}.Easycase.assign_to');
            $tot_ecs_users = array_values(array_filter(array_unique(array_merge($ecs_updated_by, $ecs_user_id, $ecs_assign_to), SORT_REGULAR)));
            if ($tot_ecs_users) {
                $usrDtlsAll = $this->User->find('all', array('conditions' => array('User.id' => $tot_ecs_users), 'fields' => array('User.id', 'User.name', 'User.email', 'User.istype', 'User.email', 'User.short_name', 'User.photo'), 'order' => array('User.short_name ASC')));
            }
        }
        $usrDtlsArr = array();
        $usrDtlsPrj = array();
        if ($usrDtlsAll) {
            foreach ($usrDtlsAll as $ud) {
                $usrDtlsArr[$ud['User']['id']] = $ud;
            }
        }
        $c = array();
        $m = "";
        $view = new View($this);
        $tz = $view->loadHelper('Tmzone');
        $dt = $view->loadHelper('Datetime');
        $cq = $view->loadHelper('Casequery');
        $frmt = $view->loadHelper('Format');
        $frmtCaseAll = $this->Easycase->formatCases($caseAll, $CaseCount, $caseMenuFilters, $c, $m, $project_uid, $usrDtlsArr, $frmt, $dt, $tz, $cq, null, $dependency);
        $resCaseProj['caseAll'] = $frmtCaseAll['caseAll'];
        $resCaseProj['caseCount'] = $CaseCount;
        $resCaseProj['csPage'] = $page;
        $resCaseProj['page_limit'] = $page_limit;
        $this->set('resCaseProj', json_encode($resCaseProj));
    }
    /** In this method user get his overdue task according to the conditions
    * i.User belongs to the company.
     ii.Projects which have user added in with active project.
     iii.Task(s) that is assigned to the user with active task.
     iv.Task status is New & In Progress.
     v.If the user is client then use the client condition.
     vi.Task due date cross the current date
    */
    public function my_overdue()
    {
        $project_uid = (isset($this->params->data['projid']) && !empty($this->params->data['projid'])) ? $this->params->data['projid'] : 'all';
        $page_limit = CASE_PAGE_LIMIT;
        $page = 1;
        $limit1 = $page * $page_limit - $page_limit;
        $limit2 = $page_limit;
        $curDate = "'" . date('Y-m-d') . "'";
        $searchcase = " AND Easycase.assign_to=" . SES_ID . " AND Easycase.legend IN(1,2,4) AND ( DATE(Easycase.due_date) < $curDate ) AND (DATE(Easycase.due_date) !='0000-00-00')";
        $clt_sql = "1";
        if ($this->Auth->user('is_client') == 1) {
            $clt_sql = "((Easycase.client_status = " . $this->Auth->user('is_client') . " AND Easycase.user_id = " . $this->Auth->user('id') . ") OR Easycase.client_status != " . $this->Auth->user('is_client') . ")";
        }
        $cond_easycase_actuve = " AND Easycase.isactive=1";
        $qry = "";
        if ($project_uid != 'all') {
            $this->ProjectUser->bindModel(array('belongsTo' => array('Project')));
            $projArr = $this->ProjectUser->find('first', array('conditions' => array('Project.uniq_id' => $project_uid, 'ProjectUser.user_id' => SES_ID, 'ProjectUser.company_id' => SES_COMP), 'fields' => array('Project.id', 'Project.short_name', 'Project.name', 'ProjectUser.id')));
            if (count($projArr)) {
                $curProjId = $projArr['Project']['id'];
            }
            $req_sql = "SELECT SQL_CALC_FOUND_ROWS Easycase.*,User.short_name,IF((Easycase.assign_to =" . SES_ID . "),'Me',User.short_name) AS Assigned FROM ( SELECT * FROM easycases as Easycase WHERE istype='1' AND " . $clt_sql . " " . $cond_easycase_actuve . " AND Easycase.project_id='$curProjId' AND Easycase.project_id<>0  " . $searchcase . " " . trim($qry) . " ) AS Easycase LEFT JOIN users User ON Easycase.assign_to=User.id ORDER BY Easycase.dt_created DESC LIMIT $limit1,$limit2";
        } else {
            $req_sql = "SELECT SQL_CALC_FOUND_ROWS Easycase.*,User.short_name,IF((Easycase.assign_to =" . SES_ID . "),'Me',User.short_name) AS Assigned FROM ( SELECT * FROM easycases as Easycase WHERE Easycase.istype='1' AND " . $clt_sql . " " . $cond_easycase_actuve . " AND Easycase.project_id!=0 AND Easycase.project_id IN (SELECT ProjectUser.project_id FROM project_users AS ProjectUser,projects as Project WHERE ProjectUser.user_id=" . SES_ID . " AND ProjectUser.project_id=Project.id AND Project.isactive='1' AND ProjectUser.company_id='" . SES_COMP . "') " . $searchcase . " " . trim($qry) . "  ORDER BY  Easycase.project_id DESC) AS Easycase LEFT JOIN users User ON Easycase.assign_to=User.id ORDER BY Easycase.dt_created DESC  LIMIT $limit1,$limit2";
        }
        $caseAll = $this->Easycase->query($req_sql);
        $tot = $this->Easycase->query("SELECT FOUND_ROWS() as total");
        $CaseCount = !empty($tot[0][0]['total']) ? $tot[0][0]['total'] : 0;
        $caseMenuFilters = '';
        $usrDtlsAll = null;
        if (!empty($caseAll)) {
            $ecs_updated_by = Hash::extract($caseAll, '{n}.Easycase.updated_by');
            $ecs_user_id = Hash::extract($caseAll, '{n}.Easycase.user_id');
            $ecs_assign_to = Hash::extract($caseAll, '{n}.Easycase.assign_to');
            $tot_ecs_users = array_values(array_filter(array_unique(array_merge($ecs_updated_by, $ecs_user_id, $ecs_assign_to), SORT_REGULAR)));
            if ($tot_ecs_users) {
                $usrDtlsAll = $this->User->find('all', array('conditions' => array('User.id' => $tot_ecs_users), 'fields' => array('User.id', 'User.name', 'User.email', 'User.istype', 'User.email', 'User.short_name', 'User.photo'), 'order' => array('User.short_name ASC')));
            }
        }
        $usrDtlsArr = array();
        $usrDtlsPrj = array();
        if ($usrDtlsAll) {
            foreach ($usrDtlsAll as $ud) {
                $usrDtlsArr[$ud['User']['id']] = $ud;
            }
        }
        $c = array();
        $m = "";
        $view = new View($this);
        $tz = $view->loadHelper('Tmzone');
        $dt = $view->loadHelper('Datetime');
        $cq = $view->loadHelper('Casequery');
        $frmt = $view->loadHelper('Format');
        $frmtCaseAll = $this->Easycase->formatCases($caseAll, $CaseCount, $caseMenuFilters, $c, $m, $project_uid, $usrDtlsArr, $frmt, $dt, $tz, $cq, null, $dependency);
        $resCaseProj['caseAll'] = $frmtCaseAll['caseAll'];
        $resCaseProj['caseCount'] = $CaseCount;
        $resCaseProj['csPage'] = $page;
        $resCaseProj['page_limit'] = $page_limit;
        $this->set('resCaseProj', json_encode($resCaseProj));
    }
    /**
     * a.Here we show the progress bar with percentage (%) value.
       b.Percentage calculation  formula is ((total assigned  resolved task +total assigned  closed task)/total assigned task*)100
       c.If the user select  "ALL" in the project drop then user will get or show task(s) information according to the below conditions
        i.User belongs to the company.
        ii.Projects which have user added in with active project.
        iii.Task(s) that is assigned to the user with active task.
        iv.Task status is Resolved & Closed
        d.If the user select  particular project  in the project drop then user will get progress bar according to the below conditions
        i.User belongs to the company.
        ii.Projects which have user added in with active project and the selected project.
        iii.Task(s) that is assigned to the user with active task.
        iv.Task status is New & In Progress.
     */
    public function my_progress()
    {
        $project_uid = (isset($this->params->data['projid']) && !empty($this->params->data['projid'])) ? $this->params->data['projid'] : 'all';
        $cond = '';
        $query_All = 0;
        $query_Close_Resolve = 0;
        if ($project_uid != 'all') {
            /** Here Single Project * */
            $cond = "Project.uniq_id = '" . $project_uid . "' AND";
            $projQry = "AND Easycase.project_id IN (SELECT ProjectUser.project_id FROM project_users AS ProjectUser,projects as Project WHERE " . $cond . " ProjectUser.user_id=" . SES_ID . " AND ProjectUser.company_id=" . SES_COMP . " AND ProjectUser.project_id=Project.id AND Project.isactive='1')";
            $query_All = $this->Easycase->query("SELECT Project.short_name,Easycase.project_id,COUNT(Easycase.id) as count FROM easycases as Easycase LEFT JOIN projects as Project ON Project.id = Easycase.project_id WHERE Easycase.istype='1' AND Easycase.assign_to=" . SES_ID . " AND Easycase.type_id!='10' AND  Easycase.isactive='1' AND Easycase.project_id!=0 " . $projQry);
            $query_Close_Resolve = $this->Easycase->query("SELECT Project.short_name,Easycase.project_id,COUNT(Easycase.id) as count FROM easycases as Easycase LEFT JOIN projects as Project ON Project.id = Easycase.project_id  WHERE Easycase.istype='1' AND Easycase.assign_to=" . SES_ID . " AND Easycase.isactive='1' AND (Easycase.legend='3' OR Easycase.legend='5')  AND Easycase.type_id!='10' AND Easycase.project_id!=0 " . $projQry);
        } else {
            /** Here All Projects * */
            $projQry = "AND Easycase.project_id IN (SELECT ProjectUser.project_id FROM project_users AS ProjectUser,projects as Project WHERE ProjectUser.user_id=" . SES_ID . " AND ProjectUser.company_id=" . SES_COMP . " AND ProjectUser.project_id=Project.id AND Project.isactive='1' ORDER BY ProjectUser.dt_visited)";
            $query_All = $this->Easycase->query("SELECT Project.short_name,Easycase.project_id,COUNT(Easycase.id) as count FROM easycases as Easycase LEFT JOIN projects as Project ON Project.id = Easycase.project_id WHERE Easycase.istype='1' AND Easycase.assign_to=" . SES_ID . " AND Easycase.type_id!='10' AND  Easycase.isactive='1' AND Easycase.project_id!=0 " . $projQry . " GROUP BY Easycase.project_id ");
            $query_Close_Resolve = $this->Easycase->query("SELECT Project.short_name,Easycase.project_id,COUNT(Easycase.id) as count FROM easycases as Easycase LEFT JOIN projects as Project ON Project.id = Easycase.project_id  WHERE Easycase.istype='1' AND Easycase.assign_to=" . SES_ID . " AND Easycase.isactive='1' AND (Easycase.legend='3' OR Easycase.legend='5')  AND Easycase.type_id!='10' AND Easycase.project_id!=0 " . $projQry . " GROUP BY Easycase.project_id ");
        }
        /** Start Generate array response for progress * */
        $arrayList = array();
        if (!empty($query_All)) {
            foreach ($query_All as $key => $val) {
                if (!empty($val['Project']['short_name'])) {
                    $arrayList[$key]['percent'] = 0;
                    $arrayList[$key]['total_task'] = $val['0']['count'];
                    $arrayList[$key]['pro_short_name'] = $val['Project']['short_name'];
                    $arrayList[$key]['total_resolve_close'] = 0;
                    foreach ($query_Close_Resolve as $rKey => $rVal) {
                        if ($rVal['Easycase']['project_id'] == $val['Easycase']['project_id']) {
                            $arrayList[$key]['percent'] = intval(($rVal['0']['count'] / $val['0']['count']) * 100);
                            $arrayList[$key]['total_resolve_close'] = $rVal['0']['count'];
                        }
                    }
                }
            }
        }
        /** Start Generate array response for progress * */
        $resCaseProj['caseAll'] = $arrayList;
        $this->set('resCaseProj', json_encode($resCaseProj));
    }
    /*
     * a.Here we show the Pie Chart with percentage (%) value.
        b.Percentage calculation  formula For Completed Task is ((total assigned  resolved task +total assigned  closed task)/total assigned task*)100
        c.Percentage calculation  formula For New Task is ((New assigned task )/total assigned task*)100
        d.Percentage calculation  formula For In Progress Task is ((In Progress assigned task )/total assigned task*)100
        e.This is done according to the selected "ALL" or particular project in project drop down.
     */
    public function task_piechart()
    {
        $this->layout = 'ajax';
        $project_uid = (isset($this->params->data['projid']) && !empty($this->params->data['projid'])) ? $this->params->data['projid'] : 'all';
        $cond = '';
        $query_All = 0;
        $query_Close_Resolve = 0;
        if ($project_uid != 'all') {
            /** Here Single Project * */
            $cond = "Project.uniq_id = '" . $project_uid . "' AND";
            $projQry = "AND Easycase.project_id IN (SELECT ProjectUser.project_id FROM project_users AS ProjectUser,projects as Project WHERE " . $cond . " ProjectUser.user_id=" . SES_ID . " AND ProjectUser.company_id=" . SES_COMP . " AND ProjectUser.project_id=Project.id AND Project.isactive='1')";
            $query_All = $this->Easycase->query("SELECT Project.short_name,Easycase.project_id,COUNT(Easycase.id) as count FROM easycases as Easycase LEFT JOIN projects as Project ON Project.id = Easycase.project_id  WHERE Easycase.istype='1' AND Easycase.assign_to=" . SES_ID . " AND Easycase.isactive='1' AND Easycase.type_id!='10' AND Easycase.project_id!=0 " . $projQry);
            $query_New = $this->Easycase->query("SELECT Project.short_name,Easycase.project_id,COUNT(Easycase.id) as count FROM easycases as Easycase LEFT JOIN projects as Project ON Project.id = Easycase.project_id  WHERE Easycase.istype='1' AND Easycase.assign_to=" . SES_ID . " AND Easycase.isactive='1' AND Easycase.legend IN(1)  AND Easycase.type_id!='10' AND Easycase.project_id!=0 " . $projQry);
            $query_Inprogress = $this->Easycase->query("SELECT Project.short_name,Easycase.project_id,COUNT(Easycase.id) as count FROM easycases as Easycase LEFT JOIN projects as Project ON Project.id = Easycase.project_id  WHERE Easycase.istype='1' AND Easycase.assign_to=" . SES_ID . " AND Easycase.isactive='1' AND Easycase.legend IN(2,4) AND Easycase.type_id!='10' AND Easycase.project_id!=0 " . $projQry);
            $query_Close_Resolve = $this->Easycase->query("SELECT Project.short_name,Easycase.project_id,COUNT(Easycase.id) as count FROM easycases as Easycase LEFT JOIN projects as Project ON Project.id = Easycase.project_id  WHERE Easycase.istype='1' AND Easycase.assign_to=" . SES_ID . " AND Easycase.isactive='1' AND Easycase.legend IN(3,5)  AND Easycase.type_id!='10' AND Easycase.project_id!=0 " . $projQry);
        } else {
            /** Here All Projects * */
            $projQry = "AND Easycase.project_id IN (SELECT ProjectUser.project_id FROM project_users AS ProjectUser,projects as Project WHERE ProjectUser.user_id=" . SES_ID . " AND ProjectUser.company_id=" . SES_COMP . " AND ProjectUser.project_id=Project.id AND Project.isactive='1' ORDER BY ProjectUser.dt_visited)";
            $query_All = $this->Easycase->query("SELECT COUNT(Easycase.id) as count FROM easycases as Easycase LEFT JOIN projects as Project ON Project.id = Easycase.project_id  WHERE Easycase.istype='1' AND Easycase.assign_to=" . SES_ID . " AND Easycase.isactive='1'  AND Easycase.type_id!='10' AND Easycase.project_id!=0 " . $projQry);
            $query_New = $this->Easycase->query("SELECT COUNT(Easycase.id) as count FROM easycases as Easycase LEFT JOIN projects as Project ON Project.id = Easycase.project_id  WHERE Easycase.istype='1' AND Easycase.assign_to=" . SES_ID . " AND Easycase.isactive='1' AND Easycase.legend IN(1) AND Easycase.type_id!='10' AND Easycase.project_id!=0 " . $projQry);
            $query_Inprogress = $this->Easycase->query("SELECT COUNT(Easycase.id) as count FROM easycases as Easycase LEFT JOIN projects as Project ON Project.id = Easycase.project_id  WHERE Easycase.istype='1' AND Easycase.assign_to=" . SES_ID . " AND Easycase.isactive='1'  AND Easycase.legend IN(2,4)  AND Easycase.type_id!='10' AND Easycase.project_id!=0 " . $projQry);
            $query_Close_Resolve = $this->Easycase->query("SELECT COUNT(Easycase.id) as count FROM easycases as Easycase LEFT JOIN projects as Project ON Project.id = Easycase.project_id  WHERE Easycase.istype='1' AND Easycase.assign_to=" . SES_ID . " AND Easycase.isactive='1' AND Easycase.legend IN(3,5)  AND Easycase.type_id!='10' AND Easycase.project_id!=0 " . $projQry);
        }
        $close_Resolve = $query_Close_Resolve['0']['0']['count'];
        $inprogress = $query_Inprogress['0']['0']['count'];
        $new = $query_New['0']['0']['count'];
        $this->set(compact('close_Resolve', 'inprogress', 'new'));
        $arrayList = array();
        /** Start Generate json response for Pie chart(Inprogress , New,Close and Resolve)* */
        if (!empty($query_All['0']['0']['count'])) {
            $arrayList['task_prog'][0]['name'] = 'New';
            $arrayList['task_prog'][0]['y'] = intval(($query_New['0']['0']['count'] / $query_All['0']['0']['count']) * 100);
            $arrayList['task_prog'][0]['color'] = '#F19A91';
            $arrayList['task_prog'][1]['name'] = 'In Progress';
            $arrayList['task_prog'][1]['y'] = intval(($query_Inprogress['0']['0']['count'] / $query_All['0']['0']['count']) * 100);
            $arrayList['task_prog'][1]['color'] = '#8DC2F8';
            $arrayList['task_prog'][2]['name'] = 'Completed';
            $arrayList['task_prog'][2]['y'] = intval(($query_Close_Resolve['0']['0']['count'] / $query_All['0']['0']['count']) * 100);
            $arrayList['task_prog'][2]['color'] = '#8AD6A3';
            $respone = json_encode($arrayList);
            /** End Generate json response for Pie chart(Inprogress , New,Close and Resolve) * */
            $this->set(compact('respone', 'arrayList'));
        } else {
            $stsMsgTtl1 = "Oops! NO task are in the project";
            $this->set(compact('stsMsgTtl1'));
            $respone = json_encode($arrayList);
            $this->set(compact('respone', 'arrayList'));
        }
    }
    /*
     * Here we show the bar chart with Total Completed, Total New & In Progress, Total Overdue task data according to the project wise.
     */
    public function workload_chart()
    {
        $this->layout = 'ajax';
        $curDate = "'" . date('Y-m-d') . "'";
        $project_uid = (isset($this->params->data['projid']) && !empty($this->params->data['projid'])) ? $this->params->data['projid'] : 'all';
        $cond = '';
        $query_All = 0;
        $query_Close_Resolve = 0;
        /** For Single Project * */
        if ($project_uid != 'all') {
            $cond = "Project.uniq_id = '" . $project_uid . "' AND";
            $projQry = "AND Easycase.project_id IN (SELECT ProjectUser.project_id FROM project_users AS ProjectUser,projects as Project WHERE " . $cond . " ProjectUser.user_id=" . SES_ID . " AND ProjectUser.company_id=" . SES_COMP . " AND ProjectUser.project_id=Project.id AND Project.isactive='1')";
            /** Count for New & Inprogress * */
            $query_New_Inprogress = $this->Easycase->query("SELECT Project.short_name,Easycase.project_id,COUNT(Easycase.id) as count FROM easycases as Easycase LEFT JOIN projects as Project ON Project.id = Easycase.project_id  WHERE Easycase.istype='1' AND Easycase.assign_to=" . SES_ID . " AND Easycase.isactive='1' AND Easycase.legend IN(1,2,4) AND Easycase.type_id!='10' AND Easycase.project_id!=0 " . $projQry . " GROUP BY Easycase.project_id ");
            /** Count for Close & Resolve * */
            $query_Close_Resolve = $this->Easycase->query("SELECT Project.short_name,Easycase.project_id,COUNT(Easycase.id) as count FROM easycases as Easycase LEFT JOIN projects as Project ON Project.id = Easycase.project_id  WHERE Easycase.istype='1' AND Easycase.assign_to=" . SES_ID . " AND Easycase.isactive='1' AND Easycase.legend IN(3,5) AND Easycase.type_id!='10' AND Easycase.project_id!=0 " . $projQry . " GROUP BY Easycase.project_id ");
            /** Count for overdue * */
            $query_Overdue = $this->Easycase->query("SELECT Project.short_name,Easycase.project_id,COUNT(Easycase.id) as count FROM easycases as Easycase LEFT JOIN projects as Project ON Project.id = Easycase.project_id  WHERE Easycase.istype='1' AND Easycase.assign_to=" . SES_ID . " AND Easycase.isactive='1' AND Easycase.legend IN(1,2,4) AND ( DATE(Easycase.due_date) < $curDate ) AND Easycase.type_id!='10' AND Easycase.project_id!=0 " . $projQry . " GROUP BY Easycase.project_id ");
        /** For All Projects * */
        } else {
            $projQry = "AND Easycase.project_id IN (SELECT ProjectUser.project_id FROM project_users AS ProjectUser,projects as Project WHERE ProjectUser.user_id=" . SES_ID . " AND ProjectUser.company_id=" . SES_COMP . " AND ProjectUser.project_id=Project.id AND Project.isactive='1' ORDER BY ProjectUser.dt_visited)";
            /** Count for New & Inprogress * */
            $query_New_Inprogress = $this->Easycase->query("SELECT Project.short_name,Easycase.project_id,COUNT(Easycase.id) as count FROM easycases as Easycase LEFT JOIN projects as Project ON Project.id = Easycase.project_id  WHERE Easycase.istype='1' AND Easycase.assign_to=" . SES_ID . " AND Easycase.isactive='1' AND Easycase.legend IN(1,2,4) AND Easycase.type_id!='10' AND Easycase.project_id!=0 " . $projQry . " GROUP BY Easycase.project_id ");
            /** Count for Close & Resolve * */
            $query_Close_Resolve = $this->Easycase->query("SELECT Project.short_name,Easycase.project_id,COUNT(Easycase.id) as count FROM easycases as Easycase LEFT JOIN projects as Project ON Project.id = Easycase.project_id  WHERE Easycase.istype='1' AND Easycase.assign_to=" . SES_ID . " AND Easycase.isactive='1' AND Easycase.legend IN(3,5) AND Easycase.type_id!='10' AND Easycase.project_id!=0 " . $projQry . " GROUP BY Easycase.project_id ");
            /** Count for overdue * */
            $query_Overdue = $this->Easycase->query("SELECT Project.short_name,Easycase.project_id,COUNT(Easycase.id) as count FROM easycases as Easycase LEFT JOIN projects as Project ON Project.id = Easycase.project_id  WHERE Easycase.istype='1' AND Easycase.assign_to=" . SES_ID . " AND Easycase.isactive='1' AND Easycase.legend IN(1,2,4) AND ( DATE(Easycase.due_date) < $curDate ) AND Easycase.type_id!='10' AND Easycase.project_id!=0 " . $projQry . " GROUP BY Easycase.project_id ");
        }

        $proStr = '[]';
        $colorStr = '[]';
        $arrayList = array();
        $colorList = array();
        $overList = array();
        $newProList = array();
        $completeList = array();
        $projectList = array();
        $i = 0;
        if (!empty($query_Overdue)) {
            foreach ($query_Overdue as $key => $val) {
                if (!in_array($val['Project']['short_name'], $projectList)) {
                    $projectList[] = $val['Project']['short_name'];
                }
                $overList[$val['Project']['short_name']] = $val['0']['count'];
            }
        }
        if (!empty($query_New_Inprogress)) {
            foreach ($query_New_Inprogress as $key => $val) {
                if (!in_array($val['Project']['short_name'], $projectList)) {
                    $projectList[] = $val['Project']['short_name'];
                }
                $newProList[$val['Project']['short_name']] = $val['0']['count'];
            }
        }
        if (!empty($query_Close_Resolve)) {
            foreach ($query_Close_Resolve as $key => $val) {
                if (!in_array($val['Project']['short_name'], $projectList)) {
                    $projectList[] = $val['Project']['short_name'];
                }
            }
            $completeList[$val['Project']['short_name']] = $val['0']['count'];
        }
        /** End Project List * */
        /** Start Generate the json for Workload chart* */
        if (!empty($projectList)) {
            foreach ($projectList as $key => $val) {
                $arrayList['task_prog'][$i]['name'] = 'Overdue';

                $arrayList['task_prog'][$i]['data'][] = !empty($overList[$val]) ? $overList[$val] : 0;
            }
            $colorList[$i] = '#F19A91';
            $i++;
        }
        if (!empty($projectList)) {
            foreach ($projectList as $key => $val) {
                $arrayList['task_prog'][$i]['name'] = 'New & In Progress';

                $arrayList['task_prog'][$i]['data'][] = !empty($newProList[$val]) ? $newProList[$val] : 0;
            }
            $colorList[$i] = '#8DC2F8';
            $i++;
        }
        if (!empty($projectList)) {
            foreach ($projectList as $key => $val) {
                $arrayList['task_prog'][$i]['name'] = 'Completed';
                $arrayList['task_prog'][$i]['data'][] = !empty($completeList[$val]) ? $completeList[$val] : 0;
            }
            $colorList[$i] = '#8AD6A3';
            $i++;
        }
        if (!empty($projectList)) {
            $proStr = "['" . implode("','", $projectList) . "']";
        }
        if (!empty($colorList)) {
            $colorStr = "['" . implode("','", $colorList) . "']";
        }
        $respone = json_encode($arrayList, JSON_NUMERIC_CHECK);
        /** End Generate the json for Workload chart * */
        $this->set(compact('respone', 'arrayList', 'proStr', 'colorStr'));
    }
    /**
     * Author is JAIDEEP
     * This Method used to set the task Favourite
    **/
    public function setCaseFavourite()
    {
        $response['status']=false;
        if (!empty($this->request->data['id']) && !empty($this->request->data['project_id'])) {
            $project_id = $this->request->data['project_id'];
            $case_id = $this->request->data['id'];
            $conditions = array('EasycaseFavourite.easycase_id'=>$case_id,'EasycaseFavourite.project_id'=>$project_id,'EasycaseFavourite.company_id'=>SES_COMP,'EasycaseFavourite.user_id'=>SES_ID);
            $this->loadModel('EasycaseFavourite');
            $easycase_favourite = $this->EasycaseFavourite->find('first', array('conditions'=>$conditions));
            // Here set favourite
            if (empty($easycase_favourite)) {
                $easycaseFavouriteData['EasycaseFavourite']['id']='';
                $easycaseFavouriteData['EasycaseFavourite']['easycase_id']=$case_id;
                $easycaseFavouriteData['EasycaseFavourite']['project_id']=$project_id;
                $easycaseFavouriteData['EasycaseFavourite']['company_id']=SES_COMP;
                $easycaseFavouriteData['EasycaseFavourite']['user_id']=SES_ID;
                $easycaseFavouriteData['EasycaseFavourite']['created']=GMT_DATETIME;
                $easycaseFavouriteData['EasycaseFavourite']['modified']=GMT_DATETIME;
                $this->EasycaseFavourite->save($easycaseFavouriteData['EasycaseFavourite']);
                $response['status']=true;
                $response['message']= __('You are successfully added in the favourite task', true);
                $response['class'] = 'starfill_icon';
            } else {
                $res = $this->EasycaseFavourite->query("DELETE FROM easycase_favourites WHERE id='" . $easycase_favourite['EasycaseFavourite']['id'] . "'");
                $response['status']=true;
                $response['message']= __('You are successfully removed the favourite task', true);
                $response['class'] = 'starline_icon';
            }
        } else {
            $response['status']=false;
            $response['message']= __('Sorry, Something is wrong try after sometimes.', true);
        }
        echo json_encode($response);
        exit;
    }
    public function ajax_changeMassCustomStatus()
    {
        $response = array('status'=>'success');
        $Csts = ClassRegistry::init('CustomStatus');
        //ref for other pages
        $csts_arr = $Csts->find('first', array('conditions'=>array('CustomStatus.id'=>$this->data['statusid'])));
        
        if ($csts_arr && !empty($this->data['caseid'])) {
            $inptArr = array(
                "statusid" => $csts_arr['CustomStatus']['id'],
                "masterid" => $csts_arr['CustomStatus']['status_master_id'],
                "is_sub" => 0,
                "parent_task" => 0
            );
            $easyCase = ClassRegistry::init('Easycase');
            $esyCases = $easyCase->find('list', array('conditions'=>array('Easycase.id'=>$this->data['caseid']),'fields' => array('Easycase.id','Easycase.uniq_id')));
            
            if ($esyCases) {
                foreach ($esyCases as $k => $v) {
                    $inptArr['uniqid'] = $v;
                    $inptArr['id'] = $k;
                    $res_ret = $this->changeCustomStatus($inptArr);
                    if (isset($res_ret['err']) && $res_ret['err']) {
                        $response['status'] = 'error';
                        $response['msg'] = $res_ret['msg'];
                    }
                }
            } else {
                $response['status'] = 'error';
                $response['msg'] = __('No task selected.');
            }
        } else {
            $response['status'] = 'error';
            $response['msg'] = __('Invalid status. Please try once again.');
        }
        echo json_encode($response);
        exit;
    }
    public function changeCustomStatus($reqData=null)
    {
        $postdata = ($reqData)?$reqData:$this->data;
        $commonCaseId = $postdata['id'];
        /* dependency check */
        /*$deny_arr = array('3', '2');
        $allowed = in_array($this->data['masterid'], $deny_arr) ? $this->task_dependency($commonCaseId) : "Yes";*/
        $allowed = $this->task_dependency($commonCaseId);
        if ($allowed == 'No') {
            $response['err'] = 1;
            $response['msg'] = __('Dependant tasks are not closed.', true);
        } else {
            if ($postdata['masterid'] == '3') {
                //on close of parent task close all children tasks
                $task_detail = $this->Easycase->find('first', array('conditions' => array('id' => $postdata['id']), 'fields' => array('project_id')));
                $child_tasks = $this->Easycase->getSubTaskChild($postdata['id'], $task_detail['Easycase']['project_id']);
                //closing parent task
                $response = $this->Easycase->actionOntaskCustom($postdata['id'], $postdata['uniqid'], $postdata['statusid']);
                $response['haschield'] = $child_tasks['child'];
                //closing children tasks
                if (!empty($child_tasks['data'])) {
                    $is_resourceon = $this->Format->isResourceAvailabilityOn();
                    $response['checkParentids'] = array($postdata['id']);
                    foreach ($child_tasks['data'] as $case) {
                        $ilegend = !empty($case['CustomStatus']) ?$case['CustomStatus']['status_master_id'] :$case['Easycase']['legend'];
                        if ($ilegend != '3') {
                            array_push($response['checkParentids'], $case['Easycase']['id']);
                            //$response = $this->Easycase->actionOntask($case['Easycase']['id'], $case['Easycase']['uniq_id'], $postdata['type']);
                            /*$allowed = in_array($this->data['masterid'], $deny_arr) ? $this->task_dependency($case['Easycase']['id']) : "Yes";*/
                            $allowed = $this->task_dependency($case['Easycase']['id']);
                            if ($allowed != 'No') {
                                $this->Easycase->actionOntaskCustom($case['Easycase']['id'], $case['Easycase']['uniq_id'], $postdata['statusid']);
                                if ($is_resourceon) {
                                    $this->Format->delete_booked_hours(array('easycase_id' => $case['Easycase']['id'], 'project_id' => $task_detail['Easycase']['project_id']));
                                }
                            }
                        }
                    }
                }
            } else {
                $response = $this->Easycase->actionOntaskCustom($postdata['id'], $postdata['uniqid'], $postdata['statusid']);
            }
            $this->loadModel("Project");
            $this->Project->recursive = -1;
            $projectsInfo =  $this->Project->find('first', array('conditions'=>array('Project.id'=>$response['data']['closeStsPid']),'fields'=>array('Project.id','Project.uniq_id','Project.project_methodology_id')));
            
            if ($postdata['masterid'] != 3) {
                $this->loadModel("Milestone");
                $this->loadModel("EasycaseMilestone");
                /*$this->loadModel("Project");
                $this->Project->recursive = -1;
               $projectsInfo =  $this->Project->find('first',array('conditions'=>array('Project.id'=>$response['data']['closeStsPid']),'fields'=>array('Project.project_methodology_id')));*/
                if ($projectsInfo['Project']['project_methodology_id'] ==2) {
                    $this->EasycaseMilestone->bindModel(array('belongsTo'=>array('Milestone')));
                    $this->EasycaseMilestone->recursive = 2;

                    $easy_mile = $this->EasycaseMilestone->find('first', array('conditions'=>array('EasycaseMilestone.easycase_id'=>$response['data']['caseStsId'],'EasycaseMilestone.project_id'=>$response['data']['closeStsPid'] ),'fields'=>array('EasycaseMilestone.id','Milestone.id','Milestone.is_started','Milestone.id','Milestone.isactive')));

                    if ($easy_mile['Milestone']['is_started'] == 1 && $easy_mile['Milestone']['isactive'] ==0) {
                        $this->EasycaseMilestone->id = $easy_mile['EasycaseMilestone']['id'];
                        $this->EasycaseMilestone->delete();
                    }
                }
            }


            $response['isAssignedUserFree'] = 1;
            if ($this->Format->isResourceAvailabilityOn()) {
                if ($response['succ'] == 1 && $postdata['masterid'] == 3) {
                    //$this->Easycase->recurssive = -1;
                    //$easycase = $this->Easycase->find('first', array('conditions' => array('Easycase.id' => $this->data['id']), 'field' => array('Easycase.project_id')));
                    $this->Format->delete_booked_hours(array('easycase_id' => $postdata['id'], 'project_id' => $response['data']['closeStsPid']));
                } else {
                    if ($response['prev_legend'] == 3) {
                        $postParam = $this->Easycase->find('first', array('conditions' => array('Easycase.id' => $postdata['id'])));
                        if ($postParam['Easycase']['gantt_start_date'] != '' && $postParam['Easycase']['assign_to'] != 0) {
                            $isAssignedUserFree = $this->Postcase->setBookedData($postParam, $postParam['Easycase']['estimated_hours'], $postParam['Easycase']['id'], SES_COMP);
                            $response['isAssignedUserFree'] = $isAssignedUserFree;
                            $postParam['Easycase']['gantt_start_date'] = $this->Tmzone->GetDateTime(SES_TIMEZONE, TZ_GMT, TZ_DST, TZ_CODE, $postParam['Easycase']['gantt_start_date'], "date");
                            $postParam['Easycase']['due_date'] = $this->Tmzone->GetDateTime(SES_TIMEZONE, TZ_GMT, TZ_DST, TZ_CODE, $postParam['Easycase']['due_date'], "date");
                            $response['task_details'] = $postParam;
                        }
                    }
                }
            }
            
            //status change from detail page linking section.
            if (isset($postdata['is_sub']) && trim($postdata['is_sub']) == 'link') {
                $response['link_parent'] = $postdata['parent_task'];
                $response['projUniqId'] = $projectsInfo['Project']['uniq_id'];
                $response['csProjIdRep'] = $projectsInfo['Project']['id'];
            }
        }
        $response['parent_id'] = '';
        if (!$reqData) {
            $getTitle_dtl = $this->Easycase->find('first', array('conditions' => array('Easycase.id'=>$postdata['id'], 'Easycase.istype' => '1'), 'fields' => array('Easycase.id', 'Easycase.uniq_id', 'Easycase.title','Easycase.project_id', 'Easycase.legend', 'Easycase.case_no', 'Easycase.type_id', 'Easycase.custom_status_id','Easycase.completed_task','Easycase.isactive','Easycase.user_id','Easycase.parent_task_id','Easycase.isactive')));
            if ($getTitle_dtl && !empty($getTitle_dtl['Easycase']['parent_task_id'])) {
                $response['parent_id'] = $getTitle_dtl['Easycase']['parent_task_id'];
            }
            if ($getTitle_dtl) {
                $response['csUniqId'] = $getTitle_dtl['Easycase']['uniq_id'];
                $response['csAtId'] = $getTitle_dtl['Easycase']['id'];
                $response['csTypRep'] = $getTitle_dtl['Easycase']['type_id'];
                $response['typetsk_id'] = $getTitle_dtl['Easycase']['type_id'];
                $response['csLgndRep'] = $getTitle_dtl['Easycase']['legend'];
                $response['custom_status'] = $getTitle_dtl['Easycase']['legend'];
                $response['prev_status'] = $response['prev_legend'];
                $response['is_active'] = $getTitle_dtl['Easycase']['isactive'];
                $response['custom_status_id'] = $getTitle_dtl['Easycase']['custom_status_id'];
                $response['csNoRep'] = $getTitle_dtl['Easycase']['case_no'];
                $response['completedtask'] = $getTitle_dtl['Easycase']['completed_task'];
                $response['csUsrDtls'] = $getTitle_dtl['Easycase']['user_id'];
                $response['cust_sts_list'] = array();
                if ($getTitle_dtl['Easycase']['custom_status_id']) {
                    $hasCustomStatusGroup = $this->Format->hasCustomTaskStatus($getTitle_dtl['Easycase']['project_id'], 'Project.id');
                    $response['cust_sts_list'] = $this->Format->getCustomTaskStatus($hasCustomStatusGroup);
                }
            }
            $response['milestone_id'] = $this->Easycase->getMilestoneIds($postdata['id'], $response['project_id']);
            $response['is_inactive_case'] = 0;
            echo json_encode($response);
            exit;
        } else {
            return $response;
        }
    }
    public function ajax_convert_to_parent_task()
    {
        $this->layout = 'ajax';
        $task_id  = $this->request->data['curCaseId'];
        $TaskDetail = $this->Easycase->find('first', array('conditions' => array('Easycase.id' => $task_id)));
        //echo "<pre>";print_r($TaskDetail);exit;
        $resArr = array();
        if ($TaskDetail["Easycase"]["parent_task_id"] != "") {
            $this->Easycase->id = $task_id;
            $this->Easycase->saveField('parent_task_id', '');
            $this->Easycase->id = $task_id;
            $this->Easycase->saveField('dt_created', '"'.GMT_DATETIME.'"');
            // $this->Easycase->updateAll(array('Easycase.parent_task_id' =>'','Easycase.dt_created' => '"'.GMT_DATETIME.'"'), array('Easycase.id' => $task_id, 'Easycase.project_id' => $TaskDetail["Easycase"]["project_id"])) ;
            $resArr['task_milestone_id'] = $this->Easycase->getMilestoneIds($task_id, $TaskDetail['Easycase']['project_id']);
            $resArr['success'] = 1;
            $resArr['msg'] = __("Sub task converted to task successfully");
        } else {
            $resArr['success'] = 0;
            $resArr['msg'] = __("Selected task is not a sub task");
        }
        echo json_encode($resArr);
        exit;
    }
    
    public function ajax_get_task_list()
    {
        $this->layout = 'ajax';
        $this->loadModel("Project");
        $project_id = $this->request->data['project_id'];
        $task_id = $this->request->data['case_id'];
        // "OR"=>array("ISNULL(Easycase.parent_task_id)","Easycase.parent_task_id"=>"")
        $projdtl = $this->Project->find("first", array("id"=>$project_id));
        $check_sub_tsk = $check_sub_sub_tsk = array();
        $this->loadModel('CustomStatus');
        $cusSts = $this->CustomStatus->find('first', array('conditions'=>array('CustomStatus.status_group_id'=>$projdtl['Project']['status_group_id']),'fields'=>array('CustomStatus.id','CustomStatus.status_master_id'),'order'=>array('CustomStatus.seq'=>'DESC')));
        if ($projdtl['Project']['status_group_id'] == 0) {
            $sts_cond = array("Easycase.legend !="=> 3);
        } else {
            $sts_cond = array("Easycase.custom_status_id !="=> $cusSts['CustomStatus']['id']);
        }
        $check_sub_tsk = $this->Easycase->find("list", array("conditions"=>array("Easycase.project_id"=>$project_id,"Easycase.istype"=>1,"Easycase.parent_task_id"=>$task_id),"fields"=>array("id","title")));
        /* if($check_sub_tsk){
             $chk_subtsk_lst = array_keys($check_sub_tsk);
             $check_sub_sub_tsk = $this->Easycase->find("list",array("conditions"=>array("Easycase.project_id"=>$project_id,"Easycase.istype"=>1,"Easycase.parent_task_id"=>$chk_subtsk_lst),"fields"=>array("id","title")));
         }*/
        if ($check_sub_sub_tsk) {
            echo "not_possible";
            exit;
        } else {
            $task_list_arry = $get_sub_task_list = array();
            $get_parent_task_list = $this->Easycase->find("list", array("conditions"=>array("Easycase.project_id"=>$project_id,"Easycase.istype"=>1,"Easycase.id !="=>$task_id,$sts_cond,"OR"=>array("ISNULL(Easycase.parent_task_id)","Easycase.parent_task_id"=>"")),"fields"=>array("id","title")));
            if ($get_parent_task_list) {
                $prnt_tsk_lst = array_keys($get_parent_task_list);
                $get_sub_task_list = $this->Easycase->find("list", array("conditions"=>array("Easycase.project_id"=>$project_id,"Easycase.istype"=>1,"Easycase.parent_task_id"=>$prnt_tsk_lst),"fields"=>array("id","title")));
                
                if ($check_sub_tsk) {
                    $task_list_arry = $get_parent_task_list;
                } else {
                    if ($get_sub_task_list) {
                        $task_list_arry = $get_parent_task_list + $get_sub_task_list;
                    } else {
                        $task_list_arry = $get_parent_task_list;
                    }
                }
                //  echo "<pre>".count($get_parent_task_list)."<br/>".count($get_sub_task_list)."<br/>".count($task_list_arry);print_r($get_parent_task_list);print_r($get_sub_task_list);print_r($task_list_arry);exit;
            }
        }
        if ($task_list_arry) {
            $esycs_id = array_keys($task_list_arry);
            $this->Easycase->recursive = -1;
        
            $task_lst_dtls = $this->Easycase->find("all", array("conditions"=>array("Easycase.id"=>$esycs_id),"fields"=>array("Easycase.id","Easycase.case_no","Easycase.title")));
            if ($task_lst_dtls) {
                //$task_list_arrys = Hash::combine($task_lst_dtls, '{n}.Easycase.id','{n}.Easycase.title', '{n}.Easycase.case_no');
   
                $task_list_arrys = Hash::combine($task_lst_dtls, '{n}.Easycase.id', array('%s: %s', '{n}.Easycase.case_no', '{n}.Easycase.title'));
            //   $task_list_arrys = Hash::combine($task_lst_dtls, '{n}.Easycase.id','{n}.Easycase.case_no - {n}.Easycase.title');
            } else {
                $task_list_arrys = array();
            }
        }
        // echo "<pre>";print_r($task_list_arrys);exit;
        $this->set("case_id", $task_id);
        $this->set("project_id", $project_id);
        $this->set("task_list_arry", $task_list_arrys);
    }
    
    public function make_task_to_subtask()
    {
        $this->layout = 'ajax';
        $this->loadModel("EasycaseMilestone");
        $project_id = $this->params->data['project_id'];
        $parent_task_id = $this->params->data['parent_task_id'];
        $task_id = $this->params->data['task_id'];
        $tsk_lst_arr = array();
        $this->Easycase->recursive = -1;
        $get_parent_task_details = $this->Easycase->find("first", array("conditions"=>array("Easycase.id"=>$parent_task_id,"Easycase.project_id"=>$project_id),'fields'=>array("Easycase.title","Easycase.case_no","Easycase.parent_task_id")));
        $get_task_details = $this->Easycase->find("first", array("conditions"=>array("Easycase.id"=>$task_id,"Easycase.project_id"=>$project_id),'fields'=>array("Easycase.title","Easycase.case_no","Easycase.parent_task_id")));
        $get_parent_milestone = $this->EasycaseMilestone->find("first", array("conditions"=>array("EasycaseMilestone.easycase_id"=>$parent_task_id,"EasycaseMilestone.project_id"=>$project_id)));
        $parent_milestone_id = $get_parent_milestone ? $get_parent_milestone["EasycaseMilestone"]["milestone_id"] : 0;
        $check_sub_tsk = $this->Easycase->find("list", array("conditions"=>array("Easycase.project_id"=>$project_id,"Easycase.istype"=>1,"Easycase.parent_task_id"=>$task_id),"fields"=>array("id","title")));
        $sub_task_lst = $check_sub_tsk ? array_keys($check_sub_tsk) : array();
        //  array_push($sub_task_lst,$task_id);
        $tsk_lst_arr = $sub_task_lst;
        $counter = 0;
        
        if ($task_id) {
            $get_child_milestone = $this->EasycaseMilestone->find("first", array("conditions"=>array("EasycaseMilestone.easycase_id"=>$task_id,"EasycaseMilestone.project_id"=>$project_id)));
            $child_milestone_id = $get_child_milestone ? $get_child_milestone["EasycaseMilestone"]["milestone_id"] : 0;
            $postParams = array();
            // echo "<pre>";print_r($tsk_lst_arr);echo "parent_milestone_id--".$parent_milestone_id."--child task milestone:".$child_milestone_id;exit;
            if ($child_milestone_id != $parent_milestone_id && $parent_milestone_id !=0) {
                if ($child_milestone_id !=0) {
                    $this->EasycaseMilestone->updateAll(array('EasycaseMilestone.milestone_id' => $parent_milestone_id), array('EasycaseMilestone.easycase_id' => $task_id, 'EasycaseMilestone.project_id' => $project_id));
                } else {
                    $postParams['EasycaseMilestone']['easycase_id'] = $task_id;
                    $postParams['EasycaseMilestone']['milestone_id'] = $parent_milestone_id;
                    $postParams['EasycaseMilestone']['project_id'] = $project_id;
                    $postParams['EasycaseMilestone']['user_id'] = SES_ID;
                    $postParams['EasycaseMilestone']['created'] = GMT_DATETIME;
                    $postParams['EasycaseMilestone']['id_seq'] = 0;
                    //  echo "<pre>";print_r($postParams);exit;
                    $this->EasycaseMilestone->save($postParams);
                }
            } elseif ($parent_milestone_id ==0) {
                if ($child_milestone_id !=0) {
                    $this->EasycaseMilestone->deleteAll(array('EasycaseMilestone.milestone_id' => $child_milestone_id,'EasycaseMilestone.easycase_id' => $task_id, 'EasycaseMilestone.project_id' => $project_id));
                    //  $this->EasycaseMilestone->updateAll(array('EasycaseMilestone.milestone_id' => $parent_milestone_id), array('EasycaseMilestone.easycase_id' => $v, 'EasycaseMilestone.project_id' => $project_id));
                }
            } //exit;
            if ($this->Easycase->updateAll(array('Easycase.parent_task_id' => $parent_task_id,'Easycase.dt_created' => "'".GMT_DATETIME."'"), array('Easycase.id' => $task_id, 'Easycase.project_id' => $project_id))) {
                $msg['msg'] = __("Task #".$get_task_details["Easycase"]["case_no"]. " ".$get_task_details["Easycase"]["title"]." successfully converted to sub task under #".$get_parent_task_details["Easycase"]["case_no"]." " .$get_parent_task_details["Easycase"]["title"]. " task");
                $msg['message'] = "success";
                $msg['parent_milestone_id'] = $parent_milestone_id;
                $msg['child_milestone_id'] = $child_milestone_id;
                $msg['child_task_list'] = $tsk_lst_arr;
            } else {
                $msg['msg'] = __("Unable to convert Task #".$get_task_details["Easycase"]["case_no"]. " ".$get_task_details["Easycase"]["title"]."  to sub task ");
                $msg['message'] = "error";
            }
            if ($tsk_lst_arr) {
                $get_sub_parent_milestone = $this->EasycaseMilestone->find("first", array("conditions"=>array("EasycaseMilestone.easycase_id"=>$task_id,"EasycaseMilestone.project_id"=>$project_id)));
                $get_sub_parent_milestone_id = $get_sub_parent_milestone ? $get_sub_parent_milestone["EasycaseMilestone"]["milestone_id"] : 0;
                foreach ($tsk_lst_arr as $k=>$v) {
                    $get_child_milestone = $this->EasycaseMilestone->find("first", array("conditions"=>array("EasycaseMilestone.easycase_id"=>$v,"EasycaseMilestone.project_id"=>$project_id)));
                    $child_milestone_id = $get_child_milestone ? $get_child_milestone["EasycaseMilestone"]["milestone_id"] : 0;
                    $postParams = array();
                    if ($child_milestone_id != $get_sub_parent_milestone_id && $get_sub_parent_milestone_id !=0) {
                        if ($child_milestone_id !=0) {
                            $this->EasycaseMilestone->updateAll(array('EasycaseMilestone.milestone_id' => $get_sub_parent_milestone_id), array('EasycaseMilestone.easycase_id' => $v, 'EasycaseMilestone.project_id' => $project_id));
                        } else {
                            $postParams['EasycaseMilestone']['easycase_id'] = $v;
                            $postParams['EasycaseMilestone']['milestone_id'] = $get_sub_parent_milestone_id;
                            $postParams['EasycaseMilestone']['project_id'] = $project_id;
                            $postParams['EasycaseMilestone']['user_id'] = SES_ID;
                            $postParams['EasycaseMilestone']['created'] = GMT_DATETIME;
                            $postParams['EasycaseMilestone']['id_seq'] = ++$counter;
                            $this->EasycaseMilestone->saveAll($postParams);
                        }
                    } elseif ($get_sub_parent_milestone_id ==0) {
                        if ($child_milestone_id !=0) {
                            $this->EasycaseMilestone->deleteAll(array('EasycaseMilestone.milestone_id' => $child_milestone_id,'EasycaseMilestone.easycase_id' => $v, 'EasycaseMilestone.project_id' => $project_id));
                            //  $this->EasycaseMilestone->updateAll(array('EasycaseMilestone.milestone_id' => $parent_milestone_id), array('EasycaseMilestone.easycase_id' => $v, 'EasycaseMilestone.project_id' => $project_id));
                        }
                    }
                }
            }
        } else {
            $msg['msg'] = __("Unable to convert Task to sub task ");
            $msg['message'] = "error";
        }
        
        // $msg['msg'] = '';
        print json_encode($msg);
        exit;
    }
    
    public function ajax_description()
    {
        if (!empty($this->request->data)) {
            $proj_uid=!empty($this->request->data['projUid'])?$this->request->data['projUid']:'';
            $this->loadModel("Project");
            $this->Project->recursive = -1;
            $projectsInfo =  $this->Project->find('first', array('conditions'=>array('Project.uniq_id'=>$proj_uid),'fields'=>array('Project.id','Project.description')));
            $project_id=!empty($projectsInfo['Project']['id'])?$projectsInfo['Project']['id']:'';
            $project_desc=!empty($projectsInfo['Project']['description'])?$projectsInfo['Project']['description']:'';
            $this->set('project_id', $project_id);
            $this->set('description', $project_desc);
        }
    }
    public function update_description()
    {
        $this->loadModel("Project");
        if (!empty($this->request->data)) {
            $data=$this->request->data['Milestone'];
            $project_id=!empty($data['project_id'])?$data['project_id']:'';
            $description=!empty($data['description'])?$data['description']:'';
            $this->Project->updateAll(array('Project.description' => "'".$description."'"), array('Project.id' => $project_id));
            $arr['success']=1;
            $arr['msg'] = __('Description added successfully.', true);
            echo json_encode($arr);
            exit;
        }
    }
    
    public function get_reply_mention()
    {
        $this->layout ="ajax";
        $comment_id = $this->data['id'];
        $project_id = $this->data['projid'];
        $arr['mention_array'] = array();
        $this->loadModel('EasycaseMention');
        $case_mntn_lst = $this->EasycaseMention->find("all", array("conditions"=>array("EasycaseMention.comment_id"=>$comment_id,"EasycaseMention.project_id"=>$project_id)));
        if (!empty($case_mntn_lst)) {
            foreach ($case_mntn_lst as $km =>$vm) {
                $arr['mention_array']["mention_id"][$km] = $vm["EasycaseMention"]["id"];
                $arr['mention_array']["mention_type_id"][$km] = $vm["EasycaseMention"]["mention_type_id"];
                $arr['mention_array']["mention_type"][$km] = $vm["EasycaseMention"]["mention_type"] == 1 ? "user" : "task" ;
            }
        }
        echo json_encode($arr);
        exit;
    }
}
